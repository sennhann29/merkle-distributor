{
  "12.1.0": {
    "code": {
      "coverage": 0.8887501248876012,
      "covered": {
        "ietf/__init__.py": [
          7,
          0,
          [
            5,
            9,
            12,
            15,
            18,
            23,
            25
          ],
          [
            "from . import checks                           # pyflakes:ignore",
            "__version__ = '11.0.0-dev'",
            "__release_hash__ = ''",
            "__release_branch__ = ''",
            "__patch__   = \"\"",
            "from .celeryapp import app as celery_app",
            "__all__ = ('celery_app',)"
          ]
        ],
        "ietf/api/__init__.py": [
          98,
          0.6938775510204082,
          [
            55,
            78,
            79,
            81,
            82,
            84,
            85,
            86,
            88,
            90,
            93,
            95,
            96,
            97,
            98,
            100,
            101,
            102,
            104,
            105,
            106,
            109,
            111,
            122,
            123,
            132,
            133,
            137,
            138,
            140
          ],
          [
            "                raise",
            "        if value is None:",
            "            return None",
            "        if isinstance(value, str):",
            "            match = TIMEDELTA_REGEX.search(value)",
            "            if match:",
            "                data = match.groupdict()",
            "                return datetime.timedelta(int(data['days']), int(data['hours']), int(data['minutes']), int(data['seconds']))",
            "                raise ApiFieldError(\"Timedelta provided to '%s' field doesn't appear to be a valid timedelta string: '%s'\" % (self.instance_name, value))",
            "        return value",
            "        value = super(TimedeltaField, self).hydrate(bundle)",
            "        if value and not hasattr(value, 'seconds'):",
            "            if isinstance(value, str):",
            "                try:",
            "                    match = TIMEDELTA_REGEX.search(value)",
            "                    if match:",
            "                        data = match.groupdict()",
            "                        value = datetime.timedelta(int(data['days']), int(data['hours']), int(data['minutes']), int(data['seconds']))",
            "                        raise ValueError()",
            "                except (ValueError, TypeError):",
            "                    raise ApiFieldError(\"Timedelta provided to '%s' field doesn't appear to be a valid datetime string: '%s'\" % (self.instance_name, value))",
            "                raise ApiFieldError(\"Datetime provided to '%s' field must be a string: %s\" % (self.instance_name, value))",
            "        return value",
            "            previous_obj = bundle.obj",
            "            foreign_obj = self.attribute(bundle)",
            "                except ObjectDoesNotExist:",
            "                    foreign_obj = None",
            "                if callable(self.attribute):",
            "                    raise ApiFieldError(\"The related resource for resource %s could not be found.\" % (previous_obj))",
            "                    raise ApiFieldError(\"The model '%r' has an empty attribute '%s' and doesn't allow a null value.\" % (previous_obj, attrib))"
          ]
        ],
        "ietf/api/ietf_utils.py": [
          7,
          1,
          [],
          []
        ],
        "ietf/api/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/api/serializer.py": [
          170,
          0.7588235294117647,
          [
            25,
            26,
            27,
            28,
            29,
            30,
            33,
            51,
            52,
            53,
            54,
            55,
            103,
            110,
            137,
            145,
            146,
            150,
            155,
            157,
            165,
            167,
            183,
            184,
            189,
            195,
            201,
            203,
            232,
            234,
            237,
            238,
            241,
            248,
            249,
            250,
            251,
            258,
            259,
            266,
            267
          ],
          [
            "            if v.startswith(\"[\") and v.endswith(\"]\"):",
            "                d[k] = [ s for s in v[1:-1].split(\",\") if s ]",
            "            elif \",\" in v:",
            "                d[k] = [ s for s in v.split(\",\") if s ]",
            "            if k.endswith('__in') and not isinstance(d[k], list):",
            "                d[k] = [ d[k] ]",
            "        return all(ord(c) < 128 for c in s)",
            "    value = cache.get(key)",
            "    if value is None:",
            "        value = calculate_value()",
            "        cache.set(key, value, timeout)",
            "    return value",
            "                value = cached_get(key, lambda: super(AdminJsonSerializer, self).serialize(queryset, **options))",
            "            return super(AdminJsonSerializer, self).serialize(queryset, **options)",
            "                            self._current[name] = dict([ (rel.pk, self.expand_related(rel, name)) for rel in field.all().select_related() ])",
            "                            except Exception:",
            "                                field_value = None",
            "                            self._current[name] = dict([ (rel.pk, self.expand_related(rel, name)) for rel in field_value ])",
            "                                self._current[name] = str(field_value)",
            "                pass",
            "                        self._current[name] = dict([(rel.pk, self.expand_related(rel, name)) for rel in related_objects])",
            "                    raise FieldError(\"Cannot resolve keyword '%s' into field. \"",
            "        except ObjectDoesNotExist:",
            "            related = None",
            "                related = related.natural_key()",
            "                related = smart_str(getattr(related, field.remote_field.field_name), strings_only=True)",
            "                m2m_value = lambda value: self.expand_related(value, field.name)",
            "                m2m_value = lambda value: value.natural_key()",
            "            expand = []",
            "            filter = {}",
            "            if k.startswith(\"_\"):",
            "                del qfilter[k]",
            "            del qfilter['apikey']",
            "                expand.append(e)",
            "                if not \"__\" in e:",
            "                    break",
            "                e = e.rsplit(\"__\", 1)[0]",
            "        except (FieldError, ValueError) as e:",
            "            return HttpResponse(json.dumps({\"error\": str(e)}, sort_keys=True, indent=3), content_type=content_type)",
            "        except (FieldError, ValueError) as e:",
            "            return HttpResponse(json.dumps({\"error\": str(e)}, sort_keys=True, indent=3), content_type=content_type)"
          ]
        ],
        "ietf/api/urls.py": [
          13,
          1,
          [],
          []
        ],
        "ietf/api/views.py": [
          261,
          0.9042145593869733,
          [
            63,
            65,
            66,
            68,
            166,
            167,
            172,
            173,
            175,
            179,
            197,
            198,
            201,
            223,
            367,
            383,
            384,
            404,
            405,
            406,
            407,
            409,
            419,
            420,
            446
          ],
          [
            "        callback = request.GET.get('callback', 'callback')",
            "        if not is_valid_jsonp_callback_value(callback):",
            "            raise BadRequest('JSONP callback name is invalid.')",
            "        options['callback'] = callback",
            "        except Meeting.DoesNotExist:",
            "            return err(400, \"Invalid meeting value: '%s'\" % (number, ))",
            "        except ValidationError:",
            "            return err(400, \"Invalid email value: '%s'\" % (email, ))",
            "            MeetingRegistration.objects.filter(",
            "            return HttpResponse('OK', status=200, content_type='text/plain')",
            "            except ValueError as e:",
            "                return err(400, \"Unexpected POST data: %s\" % e)",
            "                pass",
            "        return HttpResponse(status=405)",
            "                    prev_rev = f'{(int(doc.rev)-1):02d}'",
            "                        response['previous'] = f'rfc{match.group(2)}'",
            "                        response['previous_url'] = get_previous_url(f'rfc{match.group(2)}')",
            "            match = re.search(\"-(rfc)?([0-9][0-9][0-9]+)bis(-.*)?$\", name)",
            "            if match and match.group(2):",
            "                response['previous'] = f'rfc{match.group(2)}'",
            "                response['previous_url'] = get_previous_url(f'rfc{match.group(2)}')",
            "        raise Http404",
            "            except json.decoder.JSONDecodeError:",
            "                data = None",
            "                log.log(f\"Direct auth of personless user {user.pk}:{user.username}\")"
          ]
        ],
        "ietf/celeryapp.py": [
          15,
          0,
          [
            1,
            2,
            4,
            5,
            9,
            11,
            17,
            20,
            21,
            22,
            23,
            24,
            36,
            39,
            42
          ],
          [
            "import os",
            "import scout_apm.celery",
            "from celery import Celery",
            "from scout_apm.api import Config",
            "os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ietf.settings')",
            "app = Celery('ietf')",
            "app.config_from_object('django.conf:settings', namespace='CELERY')",
            "scout_key = os.environ.get(\"SCOUT_KEY\", \"\")",
            "scout_name = os.environ.get(\"SCOUT_NAME\", \"\")",
            "scout_core_agent_socket_path = os.environ.get(\"SCOUT_CORE_AGENT_SOCKET_PATH\", \"tcp://scoutapm:6590\")",
            "if scout_key and scout_name:",
            "    Config.set(",
            "    scout_apm.celery.install() ",
            "app.autodiscover_tasks()",
            "@app.task(bind=True)"
          ]
        ],
        "ietf/community/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/community/forms.py": [
          96,
          0.9583333333333333,
          [
            34,
            111,
            112,
            136
          ],
          [
            "                raise RuntimeError(f\"Rule type {rule_type} cannot include state filtering\")",
            "        except re.error as e:",
            "            raise forms.ValidationError(str(e))",
            "            raise forms.ValidationError(\"You already have a subscription like this.\")"
          ]
        ],
        "ietf/community/models.py": [
          55,
          0.890909090909091,
          [
            26,
            29,
            37,
            84,
            97,
            108
          ],
          [
            "            return 'I-D list'",
            "        return self.long_name()",
            "        return \"\"",
            "        return \"%s %s %s/%s/%s/%s\" % (self.community_list, self.rule_type, self.state, self.group, self.person, self.text)",
            "        return \"%s to %s (%s changes)\" % (self.email, self.community_list, self.notify_on)",
            "        return"
          ]
        ],
        "ietf/community/resources.py": [
          38,
          1,
          [],
          []
        ],
        "ietf/community/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/community/utils.py": [
          110,
          0.9272727272727274,
          [
            57,
            61,
            98,
            104,
            114,
            139,
            199,
            200
          ],
          [
            "    return False",
            "        return",
            "    raise NotImplementedError",
            "        return rules  # none",
            "            rules_to_add = rules_to_add.filter(rule_type__in=[\"group_rfc\", \"area_rfc\"])",
            "        rules |= SearchRule.objects.filter(",
            "    except AttributeError:",
            "        significant = False"
          ]
        ],
        "ietf/community/views.py": [
          165,
          0.9757575757575758,
          [
            51,
            86,
            137,
            159
          ],
          [
            "        permission_denied(request, \"You do not have permission to access this view\")",
            "                        clist.save()",
            "            permission_denied(request, \"You do not have permission to access this view\")",
            "        permission_denied(request, \"You do not have permission to access this view\")"
          ]
        ],
        "ietf/context_processors.py": [
          18,
          1,
          [],
          []
        ],
        "ietf/cookies/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/cookies/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/cookies/views.py": [
          39,
          0.9743589743589743,
          [
            22
          ],
          [
            "                    pass"
          ]
        ],
        "ietf/dbtemplate/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/dbtemplate/forms.py": [
          22,
          0.7727272727272727,
          [
            20,
            22,
            26,
            27,
            28
          ],
          [
            "                RSTTemplate(content).render(Context({}))",
            "                DjangoTemplate(content).render(Context({}))",
            "                raise ValidationError(\"Unexpected DBTemplate.type.slug: %s\" % self.type.slug)",
            "        except Exception as e:",
            "            raise ValidationError(e)"
          ]
        ],
        "ietf/dbtemplate/models.py": [
          28,
          0.8214285714285714,
          [
            36,
            38,
            42,
            43,
            44
          ],
          [
            "                RSTTemplate(self.content).render(Context({}))",
            "                DjangoTemplate(self.content).render(Context({}))",
            "                raise ValidationError(\"Unexpected DBTemplate.type.slug: %s\" % self.type.slug)",
            "        except Exception as e:",
            "            raise ValidationError(e)"
          ]
        ],
        "ietf/dbtemplate/resources.py": [
          18,
          1,
          [],
          []
        ],
        "ietf/dbtemplate/template.py": [
          59,
          0.7966101694915254,
          [
            29,
            56,
            57,
            58,
            59,
            60,
            78,
            79,
            84,
            85,
            86,
            95
          ],
          [
            "        raise NotImplementedError",
            "        except SystemMessage as e:",
            "            args = list(e.args)",
            "            args[0] = mark_safe('<div class=\"danger preformatted\">%s</div>' % args[0].replace('<string>:', 'line '))",
            "            e.args = tuple(args)",
            "            raise e",
            "                tried.append((origin, 'Skipped'))",
            "                continue",
            "            except DBTemplate.DoesNotExist:",
            "                tried.append((origin, 'Source does not exist'))",
            "                continue",
            "                    return Template(contents, origin, origin.template_name, self.engine)"
          ]
        ],
        "ietf/dbtemplate/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/dbtemplate/views.py": [
          40,
          0.8,
          [
            16,
            17,
            18,
            19,
            21,
            22,
            34,
            58
          ],
          [
            "    group = get_object_or_404(Group, acronym=acronym)",
            "    chairs = group.role_set.filter(name__slug='chair')",
            "    if not has_role(request.user, \"Secretariat\") and not (request.user.id and chairs.filter(person__user=request.user).count()):",
            "        permission_denied(request, \"You are not authorized to access this view.\")",
            "    template_list = DBTemplate.objects.filter(group=group)",
            "    return render(request, 'dbtemplate/template_list.html',",
            "        permission_denied(request, \"You are not authorized to access this view.\")",
            "        permission_denied(request, \"You are not authorized to access this view.\")"
          ]
        ],
        "ietf/doc/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/doc/expire.py": [
          128,
          0.953125,
          [
            118,
            143,
            144,
            145,
            147,
            202
          ],
          [
            "        return",
            "            except IOError as e:",
            "                if \"No such file or directory\" in str(e):",
            "                    pass",
            "                    raise",
            "            return fn, ''"
          ]
        ],
        "ietf/doc/feeds.py": [
          131,
          0.9923664122137404,
          [
            46
          ],
          [
            "            raise FeedDoesNotExist"
          ]
        ],
        "ietf/doc/fields.py": [
          32,
          1,
          [],
          []
        ],
        "ietf/doc/forms.py": [
          177,
          0.9548022598870056,
          [
            76,
            102,
            103,
            149,
            153,
            158,
            189,
            234
          ],
          [
            "            self.fields['ad'].choices = list(choices) + [(\"\", \"-------\"), (ad_pk, Person.objects.get(pk=ad_pk).plain_name())]",
            "                    bad_nameaddrs.append(nameaddr)",
            "                    continue",
            "            raise forms.ValidationError(\"Please provide a referenced RFC and a referencing Internet-Draft\")",
            "            raise forms.ValidationError(\"Cannot find the RFC: \" + rfc.name)",
            "            raise forms.ValidationError(\"Please provide a referenced RFC and a referencing Internet-Draft\")",
            "                        v_err_refnorm = v_err_refnorm + \" or \" + d.name",
            "                errors.append(\"Too few fields: Expected at least tag and value: '%s'\" % l)"
          ]
        ],
        "ietf/doc/lastcall.py": [
          58,
          0.9310344827586207,
          [
            49,
            50,
            51,
            53
          ],
          [
            "            new_state = State.objects.get(used=True, type=\"draft-iesg\", slug=\"goaheadw\")",
            "    elif doc.type_id == 'statchg':",
            "        new_state = State.objects.get(used=True, type=\"statchg\", slug=\"goahead\")",
            "        raise ValueError(\"Unexpected document type to expire_last_call(): %s\" % doc.type)"
          ]
        ],
        "ietf/doc/mails.py": [
          315,
          0.9619047619047619,
          [
            34,
            94,
            157,
            329,
            335,
            336,
            338,
            339,
            374,
            564,
            580,
            594
          ],
          [
            "        return",
            "        return",
            "        return",
            "            group_description += \" %s (%s)\" % (doc.group.type, doc.group.acronym)",
            "        approving_body = \"IRSG\"",
            "        consensus_body = doc.group.acronym.upper()",
            "        approving_body = \"RSAB\"",
            "        consensus_body = doc.group.acronym.upper()",
            "        e = by.role_email(\"secr\", group=\"secretariat\")",
            "        return",
            "        return",
            "        return"
          ]
        ],
        "ietf/doc/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/doc/models.py": [
          929,
          0.9020452099031216,
          [
            47,
            63,
            66,
            70,
            134,
            182,
            183,
            186,
            193,
            220,
            263,
            315,
            347,
            360,
            367,
            378,
            382,
            385,
            398,
            438,
            446,
            461,
            467,
            484,
            490,
            506,
            518,
            525,
            533,
            534,
            564,
            565,
            568,
            569,
            570,
            571,
            572,
            573,
            574,
            577,
            578,
            579,
            580,
            582,
            588,
            590,
            597,
            598,
            613,
            622,
            623,
            635,
            636,
            696,
            711,
            723,
            724,
            726,
            727,
            729,
            735,
            779,
            792,
            805,
            816,
            818,
            820,
            857,
            858,
            860,
            861,
            862,
            863,
            864,
            866,
            867,
            950,
            961,
            1031,
            1032,
            1067,
            1074,
            1076,
            1152,
            1160,
            1168,
            1184,
            1324,
            1396,
            1407,
            1492
          ],
          [
            "    from ietf.meeting.models import ProceedingsMaterial, Session",
            "    except django.db.ProgrammingError:",
            "        return []",
            "                errors.append(checks.Error(",
            "                self._cached_extension = \"txt\"",
            "                ext = 'pdf' if self.type_id == 'procmaterials' else 'txt'",
            "                self._cached_base_name = f'{self.name}-{self.rev}.{ext}'",
            "                self._cached_base_name = \"%s.txt\" % self.name",
            "                    self._cached_base_name = \"%s.txt\" % (self.name, )",
            "                revisions.append(doc.rev)",
            "                return None",
            "            return None",
            "            return f\"RFC {self.rfc_number} ({self.std_level})\"",
            "                return f\"Became RFC {rfc.rfc_number} ({rfc.std_level})\"",
            "                    return \"Replaced\"",
            "                            return iesg_state_summary + \" (ends %s)\" % e.expires.astimezone(DEADLINE_TZINFO).date().isoformat()",
            "                    return \"I-D Exists\"",
            "                    return state.name + \" (IESG: %s)\" % iesg_state_summary",
            "                    best_addresses.append(author.email.person.email_address())",
            "        raise NotImplementedError(f'Class {self.__class__} must define get_related_session()')",
            "        raise NotImplementedError(f'Class {self.__class__} must define get_related_proceedings_material()')",
            "            raise TypeError(\"Expected a string or tuple, received %s\" % type(relationship))",
            "            raise TypeError(\"Expected method called on Document or DocHistory\")",
            "            raise TypeError(\"Expected a string or tuple, received %s\" % type(relationship))",
            "            raise TypeError(\"Expected method called on Document or DocHistory\")",
            "        return list(set([x.source for x in self.all_relations_that(relationship)]))",
            "        return set([ r.document for r in self.related_that(\"replaces\") ])",
            "            path = txtpath",
            "        except UnicodeDecodeError:",
            "            text = raw.decode('latin-1')",
            "        if html.startswith(\"<pre>\"):",
            "            return None",
            "        etree_html = etree.HTML(html)",
            "        if etree_html is None:",
            "            return None",
            "        body = etree_html.xpath(\"//body\")[0]",
            "        body.tag = \"div\"",
            "        if classes:",
            "            body.attrib[\"class\"] = classes",
            "        for tag in [\"script\"]:",
            "            for t in body.xpath(f\"//{tag}\"):",
            "                t.getparent().remove(t)",
            "        html = etree.tostring(body, encoding=str, method=\"html\")",
            "        return html",
            "            return text",
            "            return None",
            "            except EOFError:",
            "                html = None",
            "            stylesheets.append(finders.find(\"ietf/css/document_html_txt.css\"))",
            "        except EOFError:",
            "            pdf = None",
            "            except AssertionError:",
            "                pdf = None",
            "        return self.relationship.name",
            "            source_lvl = self.source.type_id",
            "        elif self.target.type_id in [\"bcp\", \"std\"]:",
            "            target_lvl = self.target.type_id",
            "            if not self.target.intended_std_level:",
            "                target_lvl = 'unkn'",
            "                target_lvl = self.target.intended_std_level_id",
            "            return None",
            "            return \"\"",
            "        return u\"%s %s (%s)\" % (self.document.name, self.person, self.order)",
            "        return str(self.person)",
            "            roles.append('Author')",
            "            roles.append('Responsible AD')",
            "            roles.append('Shepherd')",
            "                name = self.name",
            "                url = urlreverse('ietf.doc.views_doc.document_main', kwargs={ 'name': name }, urlconf=\"ietf.urls\")",
            "                session = self.session_set.first()",
            "                if session:",
            "                    meeting = session.meeting",
            "                    if self.type_id == 'recording':",
            "                        url = self.external_url",
            "                        filename = self.uploaded_filename",
            "                        url = '%sproceedings/%s/%s/%s' % (settings.IETF_HOST_URL,meeting.number,self.type_id,filename)",
            "                return g.acronym",
            "            return \"none\"",
            "            mtg = sorted(list(candidate_meetings),key=lambda x:x.date,reverse=True)[0]",
            "            return self.sessionpresentation_set.filter(session__meeting=mtg)",
            "            return history.first()",
            "                time = new_rev_events.first().time",
            "                time = rev_events.first().time",
            "        return u\"%s %s %s\" % (self.source.doc.name, self.relationship.name.lower(), self.target.name)",
            "        return u\"%s %s (%s)\" % (self.document.doc.name, self.person, self.order)",
            "        return force_str(self.doc.name)",
            "        return self.doc.last_presented()",
            "        return u\"%s %s by %s at %s\" % (self.doc.name, self.get_type_display().lower(), self.by.plain_name(), self.time)",
            "                    prev = latest.old_positions[-1]",
            "                p.old_positions.pop()",
            "        return u\"%s by %s %s\" % (self.content_type, self.by, self.time)"
          ]
        ],
        "ietf/doc/redirect_drafts_urls.py": [
          7,
          1,
          [],
          []
        ],
        "ietf/doc/redirect_idtracker_urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/doc/resources.py": [
          435,
          1,
          [],
          []
        ],
        "ietf/doc/settings.py": [
          2,
          0,
          [
            1,
            43
          ],
          [
            "CHART_TYPE_COLUMN_OPTIONS = {",
            "CHART_TYPE_ACTIVITY_OPTIONS = {"
          ]
        ],
        "ietf/doc/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/doc/templatetags/active_groups_menu.py": [
          16,
          1,
          [],
          []
        ],
        "ietf/doc/templatetags/ballot_icon.py": [
          148,
          0.8513513513513513,
          [
            77,
            94,
            101,
            106,
            107,
            113,
            124,
            137,
            156,
            157,
            158,
            160,
            161,
            162,
            164,
            165,
            176,
            200,
            201,
            203,
            204,
            229
          ],
          [
            "        return \"\"",
            "            return (1, pos.pos.order)",
            "        right_click_string = 'oncontextmenu=\"window.location.href=\\'%s\\';return false;\"' %  urlreverse('ietf.doc.views_ballot.edit_position', kwargs=dict(name=doc.name, ballot_id=ballot.pk))",
            "            my_blocking = True",
            "            break",
            "        typename = \"RSAB\"",
            "        res.append(' class=\"is-blocking\" ')",
            "            c += \" my\"",
            "    ballot = doc.active_ballot()",
            "    if not ballot:",
            "        return None",
            "    changed_pos = doc.latest_event(BallotPositionDocEvent, type=\"changed_ballot_position\", balloter__user=user, ballot=ballot)",
            "    if changed_pos:",
            "        pos = changed_pos.pos",
            "        pos = BallotPositionName.objects.get(slug=\"norecord\")",
            "    return pos",
            "            return \"\"",
            "            goal1 = 4",
            "            goal2 = 7",
            "            goal1 = 14",
            "            goal2 = 28",
            "            title = \"\""
          ]
        ],
        "ietf/doc/templatetags/ietf_filters.py": [
          449,
          0.8752783964365256,
          [
            72,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            118,
            122,
            123,
            124,
            125,
            127,
            178,
            207,
            214,
            215,
            219,
            274,
            385,
            386,
            387,
            388,
            389,
            390,
            397,
            405,
            438,
            439,
            440,
            441,
            442,
            443,
            484,
            485,
            486,
            487,
            494,
            495,
            505,
            549,
            550,
            552,
            562,
            617,
            618,
            619,
            620,
            621,
            626,
            656,
            682
          ],
          [
            "        log.assertion('isinstance(value, str)')",
            "    if isinstance(value, str):",
            "        if value == \"\":",
            "             value = \" \"",
            "        return \"[ %s ]\" % value",
            "    elif isinstance(value, bytes):",
            "        log.assertion('isinstance(value, str)')",
            "    elif value > 0:",
            "        return \"[ X ]\"",
            "    elif value < 0:",
            "        return \"[ . ]\"",
            "        return \"[   ]\"",
            "    if pos.pos.slug==posslug:",
            "        return \"[ X ]\"",
            "    elif posslug in [x.slug for x in pos.old_positions]:",
            "        return \"[ . ]\"",
            "        return \"[   ]\"",
            "        return match[0]",
            "        return match[0]",
            "        except NoReverseMatch:",
            "            return match[0]",
            "    return match[0]",
            "            continue",
            "    text = text.replace(\"&gt;\", \">\")",
            "    text = text.replace(\"&lt;\", \"<\")",
            "    text = text.replace(\"&amp;\", \"&\")",
            "    text = text.replace(\"<br>\", \"\\n\")",
            "    text = text.replace(\"<br/>\", \"\\n\")",
            "    return text",
            "        days = int(value)",
            "        days = int(value)",
            "    if user and user.is_authenticated:",
            "        from ietf.group.models import Group",
            "        g = Group.objects.filter(role__name__in=(\"pre-ad\", \"ad\"), role__person__user=user)",
            "        if g:",
            "            return g[0].acronym",
            "    return None",
            "    from django.urls import reverse as urlreverse",
            "    tooltip = escape(strip_tags(state.desc))",
            "    url = urlreverse('ietf.doc.views_help.state_help', kwargs=dict(type=state.type_id)) + \"#\" + state.slug",
            "    return mark_safe('<a class=\"state-help-icon\" href=\"%s\" title=\"%s\">?</a>' % (url, tooltip))",
            "    import doctest",
            "    doctest.testmod()",
            "        return text",
            "        if event.consensus:",
            "            return \"Yes\"",
            "            return \"No\"",
            "            return \"obs\"",
            "    result = text",
            "    for token in re.split(r\"(\\W+)\", striptags(text)):",
            "        if not re.match(r\"^[A-Z]+$\", token):",
            "            result = result.replace(token, token.lower())",
            "    return result",
            "        return None",
            "    raise RuntimeError(\"Use linkify from textfilters instead of urlize\")",
            "    return utils_can_request_rfc_publication(user, doc)"
          ]
        ],
        "ietf/doc/templatetags/mail_filters.py": [
          18,
          0.9444444444444444,
          [
            34
          ],
          [
            "         article = \"an\""
          ]
        ],
        "ietf/doc/templatetags/managed_groups.py": [
          25,
          0.92,
          [
            17,
            39
          ],
          [
            "        return []",
            "        return []"
          ]
        ],
        "ietf/doc/templatetags/wg_menu.py": [
          24,
          0.7916666666666667,
          [
            70,
            78,
            79,
            80,
            81
          ],
          [
            "            p.short_name = p.short_name[: -len(\" Area\")]",
            "        elif p.acronym == \"ietfadminllc\":",
            "            p.menu_url = \"/adm/\"",
            "        elif p.acronym == \"rfceditor\":",
            "            p.menu_url = \"/rfcedtyp/\""
          ]
        ],
        "ietf/doc/urls.py": [
          7,
          1,
          [],
          []
        ],
        "ietf/doc/urls_bofreq.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/doc/urls_charter.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/doc/urls_conflict_review.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/doc/urls_material.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/doc/urls_review.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/doc/urls_statement.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/doc/urls_status_change.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/doc/utils.py": [
          780,
          0.8769230769230769,
          [
            91,
            93,
            94,
            96,
            98,
            99,
            100,
            102,
            103,
            104,
            105,
            107,
            210,
            220,
            233,
            238,
            257,
            261,
            265,
            267,
            272,
            273,
            274,
            275,
            278,
            281,
            282,
            283,
            284,
            291,
            314,
            315,
            316,
            365,
            366,
            368,
            369,
            377,
            378,
            379,
            409,
            490,
            626,
            627,
            628,
            642,
            666,
            771,
            780,
            781,
            793,
            799,
            809,
            836,
            867,
            888,
            890,
            892,
            895,
            953,
            954,
            955,
            957,
            958,
            966,
            967,
            968,
            970,
            971,
            972,
            986,
            987,
            988,
            1005,
            1010,
            1012,
            1014,
            1016,
            1017,
            1023,
            1024,
            1056,
            1098,
            1105,
            1106,
            1118,
            1153,
            1202,
            1203,
            1234,
            1235,
            1236,
            1237,
            1239,
            1256,
            1260
          ],
          [
            "    res = []",
            "    if not doc:",
            "        return res",
            "    res.append(doc.type_id)",
            "    if doc.type_id == \"draft\":",
            "        if doc.stream_id and doc.stream_id != \"legacy\":",
            "            res.append(\"draft-stream-%s\" % doc.stream_id)",
            "        res.append(\"draft-iesg\")",
            "        res.append(\"draft-iana-review\")",
            "        res.append(\"draft-iana-action\")",
            "        res.append(\"draft-rfceditor\")",
            "    return res",
            "                answer.append(\"Has %d %ss.\" % (len(blocking), blocking[0].pos.name.upper()))",
            "            related_set = RelatedDocHistory.objects.none()",
            "            answer.append(\"Needs one more YES or NO OBJECTION position to pass.\")",
            "            answer.append(\"Has enough positions to pass once %s positions are resolved.\" % blocking[0].pos.name.upper())",
            "        answer.append(\"Has a Not Ready position.\")",
            "            answer.append(\"Needs one more YES position to pass.\")",
            "        answer.append(\"Has enough positions to pass.\")",
            "        answer.append(\"Has a Need More Time position.\")",
            "    count = Counter([p.pos_id if p else 'none' for p in active_positions])",
            "    answer = []",
            "    if count[\"concern\"] > 0:",
            "        answer.append(\"Has a Concern position.\")",
            "    if count[\"yes\"] == 0:",
            "        answer.append(\"Needs a YES position.\")",
            "    if count[\"none\"] > 0:",
            "        answer.append(\"Some members have have not taken a position.\")",
            "    return \" \".join(answer)",
            "        e = BallotDocEvent(type=\"created_ballot\", by=by, doc=doc, rev=doc.rev, time=time)",
            "        if request:",
            "            messages.warning(request, \"There already exists an open '%s' ballot for %s.  No new ballot created.\" % (ballot_type, doc.name))",
            "        return None",
            "            if event_revisions:",
            "                cur_rev = event_revisions[-1][\"rev\"]",
            "                cur_rev = \"00\"",
            "            e.rev = cur_rev",
            "        e.message = e.addedmessageevent.message",
            "        e.msgtype = e.addedmessageevent.msgtype",
            "        e.in_reply_to = e.addedmessageevent.in_reply_to",
            "        return None",
            "        return None",
            "        if reminder:",
            "            reminder.active = False",
            "            reminder.save()",
            "        return e.consensus",
            "        datetime2 = datetime_from_date(date2, DEADLINE_TZINFO)",
            "        return None",
            "        except IOError as e:",
            "            return { 'errors': [\"%s :%s\" %  (e.strerror, filename)] }",
            "            refdoc = Document.objects.filter(name=ref[:-3])",
            "            errors.append(\"Too many Document objects found for %s\"%ref)",
            "        ret['errors']=errors",
            "        events.append(DocEvent.objects.create(doc=doc, rev=doc.rev, by=by, type=\"added_comment\", desc=comment))",
            "        email_desc += \"\\n\" + comment",
            "        errors.append(\"The name may only contain digits, lowercase letters and dashes.\")",
            "        errors.append(\"Please do not put more than one hyphen between any two words in the name.\")",
            "        errors.append(\"This name looks like ends in a version number. -00 will be added automatically. Please adjust the end of the name.\")",
            "        raise ValidationError(errors)",
            "                if document not in predecessors:",
            "                    predecessors.add(document)",
            "                    predecessors.update(get_predecessors(document, predecessors))",
            "            predecessors.add(doc.came_from_draft())",
            "            predecessors.update(get_predecessors(doc.came_from_draft(), predecessors))",
            "                if document not in ancestors:",
            "                    ancestors.add(document)",
            "                    ancestors.update(get_ancestors(document, ancestors))",
            "            if doc.became_rfc() not in ancestors:",
            "                ancestors.add(doc.became_rfc())",
            "                ancestors.update(get_ancestors(doc.became_rfc(), ancestors))",
            "                url = urlreverse(\"ietf.doc.views_doc.document_main\", kwargs=dict(name=d))",
            "                e = d.docevent_set.filter(type=\"published_rfc\").order_by(\"-time\").first()",
            "                history[url] = {",
            "                            history[url]['pages'] = d.history_set.filter(rev=e.newrevisiondocevent.rev).first().pages",
            "    elif doc.type_id == \"rfc\":",
            "        e = doc.latest_event(type='published_rfc')",
            "        e = doc.latest_event(type='iesg_approved')",
            "        url = urlreverse(\"ietf.doc.views_doc.document_main\", kwargs=dict(name=e.doc))",
            "        history[url] = {",
            "        if doc.type_id != \"rfc\" and hasattr(e, 'newrevisiondocevent') and doc.history_set.filter(rev=e.newrevisiondocevent.rev).exists():",
            "            history[url]['pages'] = doc.history_set.filter(rev=e.newrevisiondocevent.rev).first().pages",
            "                file_urls.append((\"with errata\", settings.RFC_EDITOR_INLINE_ERRATA_URL.format(rfc_number=doc.rfc_number)))",
            "            tracked.update(",
            "        except Person.DoesNotExist:",
            "            pass",
            "        return False  # no change",
            "            blob[offset] = 'O'",
            "        name = \"%s-%s\" % (name, rev)",
            "        rev = None",
            "        for h in doc.history_set.order_by(\"-time\"):",
            "            if rev == h.rev:",
            "                doc = h",
            "                break",
            "        raise Http404(\"Revision not found\")",
            "        doc.date = doc.time.astimezone(tzinfo).date()      # Even if this may be incorrect, what would be better?",
            "        raise Http404()"
          ]
        ],
        "ietf/doc/utils_bofreq.py": [
          8,
          1,
          [],
          []
        ],
        "ietf/doc/utils_charter.py": [
          156,
          0.9487179487179488,
          [
            46,
            49,
            55,
            61,
            117,
            126,
            136,
            165
          ],
          [
            "        return \"00-00\"",
            "        return \"%s-%#02d\" % (m.group('major'), int(m.group('minor')) + 1)",
            "        return \"\"",
            "        return \"01\"",
            "        need_state = \"charter\"",
            "        return []",
            "        just_before_next_rev = e[0].time - datetime.timedelta(seconds=5)",
            "        action = \"Rechartered\""
          ]
        ],
        "ietf/doc/utils_search.py": [
          191,
          0.8167539267015707,
          [
            21,
            29,
            51,
            52,
            96,
            105,
            106,
            108,
            109,
            167,
            168,
            169,
            170,
            171,
            181,
            182,
            199,
            230,
            234,
            235,
            237,
            239,
            241,
            242,
            243,
            244,
            245,
            247,
            273,
            274,
            275,
            276,
            278,
            279,
            358
          ],
          [
            "    return lambda: v",
            "        doc_ids = list(doc_dict.keys())",
            "        if i in doc_ids:",
            "            doc_dict[i].sessions.append(s)",
            "            d.latest_revision_date = d.latest_event_cache[\"published_rfc\"].time",
            "                d.search_heading = \"RFC\"",
            "                d.expirable = False",
            "                d.search_heading = \"Withdrawn Internet-Draft\"",
            "                d.expirable = False",
            "        d = doc_dict[rel.target.id]",
            "        if rel.relationship_id == \"obs\":",
            "            d.obsoleted_by_list.append(rel.source)",
            "        elif rel.relationship_id == \"updates\":",
            "            d.updated_by_list.append(rel.source)",
            "            originalDoc = d.related_that_doc('conflrev')[0]",
            "            d.pages = originalDoc.pages",
            "        docs = docs[:max_results]",
            "            res.append(d.title)",
            "            if rfc_num is not None:",
            "                res.append(rfc_num)",
            "                res.append(num(d.get_state().order) if d.get_state() else None)",
            "            res.append(len(d.ipr()))",
            "            if rfc_num is not None:",
            "                res.append(rfc_num)",
            "            elif d.get_state_slug() == \"active\":",
            "                if d.get_state(\"draft-iesg\"):",
            "                    res.append(d.get_state(\"draft-iesg\").order)",
            "                    res.append(0)",
            "                h['sorted'] = True",
            "                if sort_reversed:",
            "                    h['direction'] = 'desc'",
            "                    d[\"sort\"] = h[\"key\"]",
            "                    h['direction'] = 'asc'",
            "                    d[\"sort\"] = \"-\" + h[\"key\"]",
            "            return \"approved\""
          ]
        ],
        "ietf/doc/views_ballot.py": [
          854,
          0.9285714285714286,
          [
            107,
            188,
            196,
            216,
            218,
            225,
            226,
            227,
            252,
            257,
            260,
            261,
            265,
            267,
            270,
            275,
            276,
            277,
            279,
            335,
            340,
            345,
            353,
            358,
            406,
            418,
            472,
            474,
            508,
            530,
            531,
            619,
            620,
            664,
            770,
            792,
            793,
            821,
            839,
            843,
            848,
            878,
            925,
            945,
            952,
            1006,
            1013,
            1042,
            1043,
            1064,
            1065,
            1094,
            1097,
            1098,
            1114,
            1125,
            1152,
            1169,
            1210,
            1243,
            1259
          ],
          [
            "           raise forms.ValidationError(\"You must enter a non-empty discuss\")",
            "        return_to_url = request.session['ballot_edit_return_point']",
            "            raise Http404",
            "                return redirect('ietf.doc.views_ballot.defer_ballot', name=doc)",
            "                return redirect('ietf.doc.views_ballot.undefer_ballot', name=doc)",
            "            initial['position'] = old_pos.pos.slug",
            "            initial['discuss'] = old_pos.discuss",
            "            initial['comment'] = old_pos.comment",
            "        return HttpResponse(text, status=code, content_type='text/plain')",
            "            return err(400, \"Missing document name\")",
            "        except Document.DoesNotExist:",
            "            return err(400, \"Document not found\")",
            "            return err(400, \"Missing parameter: position, one of: %s \" % ','.join(position_names))",
            "            return err(400, \"Bad position name, must be one of: %s \" % ','.join(position_names))",
            "            return err(400, \"No open ballot found\")",
            "            errors = form.errors",
            "            summary = ','.join([ \"%s: %s\" % (f, striptags(errors[f])) for f in errors ])",
            "            return err(400, \"Form not valid: %s\" % summary)",
            "        return err(405, \"Method not allowed\")",
            "            raise Http404",
            "        return_to_url = request.session['ballot_edit_return_point']",
            "        back_url = request.META['HTTP_REFERER']",
            "            raise Http404",
            "        raise Http404",
            "            do_undefer_ballot(request,doc)",
            "        raise Http404",
            "        raise Http404",
            "        raise Http404",
            "        raise Http404",
            "                elif existing.pk == None:",
            "                    existing.save()",
            "            elif existing.pk == None:",
            "                existing.save()",
            "                        override['CC'] = addrs.cc",
            "        raise Http404",
            "                elif existing.pk == None:",
            "                    existing.save()",
            "        raise Http404",
            "            error_duplicate_rfc_editor_note = True",
            "        return render(request, 'doc/draft/rfceditor_note_duplicate_error.html', {'doc': doc})",
            "        action = \"to_rfc_editor\"",
            "                return render(request, 'doc/draft/rfceditor_post_approved_draft_failed.html',",
            "            return HttpResponseRedirect(doc.get_absolute_url()+'edit/approvedownrefs/')",
            "            raise forms.ValidationError(\"No RFCs were selected\")",
            "        raise Http404",
            "        raise Http404",
            "            raise Http404",
            "            elif doc.type.slug == 'statchg':",
            "                new_state = State.objects.get(used=True, type=\"statchg\", slug='in-lc')",
            "                lcsd = form.cleaned_data['last_call_sent_date']",
            "                e.time = e_production_time.replace(year=lcsd.year, month=lcsd.month, day=lcsd.day)  # preserves tzinfo",
            "                expire_days = 28",
            "            expire_days=28",
            "            templ = 'doc/status_change/make_last_call.html'",
            "        raise Http404",
            "                duedate = str(fillerdate)",
            "                events.append(e)",
            "        raise Http404",
            "        raise Http404",
            "                events.append(e)",
            "        raise Http404"
          ]
        ],
        "ietf/doc/views_bofreq.py": [
          232,
          0.9913793103448276,
          [
            71,
            72
          ],
          [
            "        except Exception as e:",
            "           raise forms.ValidationError(f'Markdown processing failed: {e}')"
          ]
        ],
        "ietf/doc/views_charter.py": [
          550,
          0.890909090909091,
          [
            77,
            97,
            104,
            172,
            187,
            188,
            189,
            190,
            206,
            207,
            268,
            294,
            317,
            335,
            383,
            398,
            445,
            448,
            453,
            465,
            466,
            471,
            472,
            473,
            527,
            530,
            531,
            532,
            533,
            534,
            535,
            560,
            561,
            562,
            573,
            574,
            575,
            581,
            658,
            675,
            676,
            679,
            695,
            698,
            706,
            733,
            760,
            765,
            766,
            767,
            768,
            769,
            770,
            806,
            855,
            856,
            857,
            858,
            907,
            914
          ],
          [
            "        permission_denied(request, \"You don't have permission to access this view.\")",
            "                    charter_state = clean['charter_state']",
            "                    charter_rev = prev_revs[0].rev",
            "                        create_ballot(request, charter, by, \"r-wo-ext\")",
            "                e = InitialReviewDocEvent(type=\"initial_review\", by=by, doc=charter, rev=charter.rev)",
            "                e.expires = timezone.now() + datetime.timedelta(weeks=clean[\"initial_time\"])",
            "                e.desc = \"Initial review time expires %s\" % e.expires.strftime(\"%Y-%m-%d\")",
            "                e.save()",
            "                hide = ['charter_state']",
            "                init = dict(initial_time=1, message='%s has initiated chartering of the proposed %s:\\n \"%s\" (%s).' % (by.plain_name(), group.type.name, group.name, group.acronym))",
            "        permission_denied(request, \"You don't have permission to access this view.\")",
            "                    email_admin_re_charter(request, group, \"Charter title changed to %s\" % new_title, message,'charter_state_edit_admin_needed')",
            "            self.fields['ad'].choices = list(choices) + [(\"\", \"-------\"), (ad_pk, Person.objects.get(pk=ad_pk).plain_name())]",
            "                   e.desc += \" from %s\" % charter.ad.plain_name()",
            "        permission_denied(request, \"You don't have permission to access this view.\")",
            "            next_rev = next_revision(next_rev)",
            "                    destination.write(form.cleaned_data[\"content\"])",
            "                charter.ad = getattr(group.ad_role(), \"person\", None)",
            "                return redirect(",
            "            last_approved = charter.rev.split(\"-\")[0]",
            "            h = (",
            "            if h:",
            "                assertion(\"h.name == charter_name_for_group(group)\")",
            "                charter_filename = charter_filename.with_name(",
            "        raise Http404",
            "        existing_new_work = WriteupDocEvent(doc=charter, rev=charter.rev)",
            "        existing_new_work.by = by",
            "        existing_new_work.type = \"changed_new_work_text\"",
            "        existing_new_work.desc = \"%s review text was changed\" % group.type.name",
            "        existing_new_work.text = derive_new_work_text(existing.text, group)",
            "        existing_new_work.time = timezone.now()",
            "            elif existing.pk is None:",
            "                existing.save()",
            "                events.append(existing)",
            "            elif existing_new_work.pk is None:",
            "                existing_new_work.save()",
            "                events.append(existing_new_work)",
            "                return redirect(",
            "        raise Http404",
            "            elif existing.pk == None:",
            "                existing.save()",
            "                return redirect(",
            "            parsed_msg = send_mail_preformatted(",
            "            messages.success(",
            "            return redirect(\"ietf.doc.views_doc.document_writeup\", name=charter.name)",
            "        raise Http404",
            "                existing.save()",
            "                    pos = BallotPositionDocEvent(doc=charter, rev=charter.rev, by=by)",
            "                    pos.type = \"changed_ballot_position\"",
            "                    pos.balloter = by",
            "                    pos.pos_id = \"yes\"",
            "                    pos.desc = \"[Ballot Position Update] New position, %s, has been recorded for %s\" % (pos.pos.name, pos.balloter.plain_name())",
            "                    pos.save()",
            "        announcement = e.text",
            "                    save_milestone_in_history(o)",
            "                    o.state_id = \"active\"",
            "                    o.save()",
            "                    MilestoneGroupEvent.objects.create(",
            "        return HttpResponseNotFound(\"Revision %s not found in database\" % rev)",
            "            charter_text = force_str(f.read(), errors=\"ignore\")"
          ]
        ],
        "ietf/doc/views_conflict_review.py": [
          304,
          0.9703947368421052,
          [
            164,
            234,
            251,
            252,
            302,
            306,
            332,
            449,
            497
          ],
          [
            "        override['Cc']=addrs.cc",
            "            form = None",
            "            except IOError:",
            "                pass",
            "         receiver = 'Independent Submissions Editor'",
            "         receiver = 'recipient'",
            "      raise Http404",
            "        review_name = 'conflict-review-'+doc_to_review.name",
            "                update_telechat(request, conflict_review, login, tc_date)"
          ]
        ],
        "ietf/doc/views_doc.py": [
          1138,
          0.8927943760984182,
          [
            181,
            197,
            238,
            244,
            246,
            274,
            275,
            307,
            308,
            309,
            310,
            317,
            319,
            417,
            422,
            426,
            434,
            441,
            465,
            466,
            467,
            482,
            493,
            494,
            495,
            496,
            497,
            499,
            524,
            527,
            575,
            625,
            626,
            630,
            631,
            632,
            633,
            634,
            719,
            720,
            721,
            723,
            783,
            819,
            868,
            941,
            949,
            953,
            974,
            985,
            1011,
            1012,
            1019,
            1021,
            1034,
            1048,
            1050,
            1053,
            1071,
            1085,
            1138,
            1151,
            1154,
            1155,
            1156,
            1175,
            1182,
            1184,
            1231,
            1255,
            1256,
            1257,
            1258,
            1260,
            1261,
            1276,
            1277,
            1278,
            1279,
            1287,
            1288,
            1289,
            1303,
            1305,
            1312,
            1321,
            1322,
            1339,
            1361,
            1362,
            1369,
            1376,
            1377,
            1385,
            1398,
            1435,
            1436,
            1457,
            1459,
            1461,
            1462,
            1466,
            1489,
            1490,
            1493,
            1528,
            1551,
            1561,
            1564,
            1677,
            1678,
            1702,
            1705,
            1739,
            1743,
            1744,
            1809,
            1970,
            2183,
            2194,
            2202,
            2203
          ],
          [
            "        raise TypeError(\"Expected this method to be called with a Document or DocHistory object\")",
            "        raise Http404()",
            "       telechat = None",
            "            split_content = True",
            "            split_content = False",
            "            content = \"This RFC is not available in plain text format.\"",
            "            split_content = False",
            "                js = Path(finders.find(\"ietf/js/document_html.js\")).read_text()",
            "                css = Path(finders.find(\"ietf/css/document_html_inline.css\")).read_text()",
            "                if html:",
            "                    css += Path(finders.find(\"ietf/css/document_html_txt.css\")).read_text()",
            "            submission = \"individual\"",
            "            submission = \"individual in %s area\" % group.acronym",
            "                    iesg_ballot_summary = needed_ballot_positions(doc, list(active_ballot.active_balloter_positions().values()))",
            "            submission = \"unknown\"",
            "            submission = \"individual in %s area\" % group.acronym",
            "                submission = \"candidate for %s\" % submission",
            "                resurrected_by = e.by",
            "                can_edit_consensus = can_edit",
            "                e = doc.latest_event(ConsensusDocEvent, type=\"changed_consensus\")",
            "                consensus = nice_consensus(e and e.consensus)",
            "            search_archive = group.list_archive",
            "            state_slug = r.source.get_state_slug()",
            "            if state_slug in ('appr-sent', 'appr-pend'):",
            "                status_changes.append(r)",
            "            elif state_slug in ('needshep','adrev','iesgeval','defer','appr-pr'):",
            "                proposed_status_changes.append(r)",
            "                pass",
            "            actions.append((\"Request Resurrect\", urlreverse('ietf.doc.views_draft.request_resurrect', kwargs=dict(name=doc.name))))",
            "            actions.append((\"Resurrect\", urlreverse('ietf.doc.views_draft.resurrect', kwargs=dict(name=doc.name))))",
            "                        label += \" (Warning: the IESG state indicates ongoing IESG processing)\"",
            "                snapshot = True",
            "                doc = doc.fake_history_obj(rev)",
            "                    js = Path(finders.find(\"ietf/js/document_html.js\")).read_text()",
            "                    js += Path(finders.find(\"ietf/js/theme.js\")).read_text()",
            "                    css = Path(finders.find(\"ietf/css/document_html_inline.css\")).read_text()",
            "                    if html:",
            "                        css += Path(finders.find(\"ietf/css/document_html_txt.css\")).read_text()",
            "            active_ballot = doc.active_ballot()",
            "            if active_ballot:",
            "                ballot_summary = needed_ballot_positions(doc, list(active_ballot.active_balloter_positions().values()))",
            "                ballot_summary = \"No active ballot found.\"",
            "            ballot_summary = needed_ballot_positions(doc, list(doc.active_ballot().active_balloter_positions().values()))",
            "            sorted_relations=None",
            "            can_upload = can_upload and (doc.type_id == 'procmaterials')",
            "            basename = f\"{doc.name}-{doc.rev}\"",
            "                pdf_url = urlreverse(",
            "                content += f\" - Download [pdf]({pdf_url})\"",
            "    raise Http404(\"Document not found: %s\" % (name + (\"-%s\"%rev if rev else \"\")))",
            "        raise Http404(\"Multiple documents matched: %s\" % name)",
            "    except:",
            "        raise Http404",
            "        raise Http404(\"Document not found: %s\" % name)",
            "        raise Http404(\"Multiple documents matched: %s\" % name)",
            "        raise Http404(\"File not found: %s\" % doc.get_file_name())",
            "        raise Http404(\"Document not found: %s\" % name)",
            "        raise Http404(\"Multiple documents matched: %s\" % name)",
            "         return redirect('ietf.doc.views_doc.document_pdfized', name=found.matched_name)",
            "        raise Http404",
            "    return False",
            "        return []",
            "        diff_documents.append(doc.came_from_draft())",
            "        rfc = doc.became_rfc()",
            "        e = rfc.latest_event(type=\"published_rfc\")",
            "        diff_revisions.append((rfc.name, \"\", e.time if e else rfc.time, rfc.name, False, False))",
            "            url = request.build_absolute_uri(",
            "            url = find_history_active_at(e.doc, e.time).get_href()",
            "            url = find_history_active_at(e.doc, e.time).get_href()",
            "        can_add_comment = has_role(",
            "        mo = re.search(r\"^(?P<m>[0-9]{1,2})-(?P<n>[0-9]{2})$\", rev)",
            "        if mo:",
            "            name = name+\"-\"+mo.group(1)",
            "            rev = mo.group(2)",
            "            name = name+\"-\"+rev",
            "            rev = None",
            "            for h in doc.history_set.order_by(\"-time\"):",
            "                if rev == h.rev:",
            "                    doc = h",
            "                    break",
            "        latest_event = doc.latest_event(type='new_revision', rev=rev)",
            "        if latest_event:",
            "            doc.pub_date = latest_event.time",
            "        raise Http404()",
            "        name = 'draft-'+name",
            "        raise Http404()",
            "            name = name+\"-\"+rev",
            "            rev = None",
            "            return \"\"",
            "    elif doc.type_id == \"charter\":",
            "        sections.append((\"WG Review Announcement\",",
            "        sections.append((\"WG Action Announcement\",",
            "        if doc.latest_event(BallotDocEvent, type=\"created_ballot\"):",
            "            sections.append((\"Ballot Announcement\",",
            "        raise Http404",
            "        writeup_text = lastwriteup.text",
            "        for rfc in doc.contains():",
            "            refs |= rfc.references()    ",
            "        refs |= doc.came_from_draft().referenced_by()",
            "        refs |= doc.became_rfc().referenced_by()",
            "        for rfc in doc.contains():",
            "            refs |= rfc.referenced_by()",
            "       refs=refs[:250]",
            "    elif all_ballots:",
            "        ballot = all_ballots[-1]",
            "        return \"<p>No ballots are available for this document at this time.</p>\"",
            "        editable = False",
            "            raise Http404(\"Ballot not found for: %s\" % name)",
            "        raise Http404(\"Ballot not found for: %s\" % name)",
            "        ballot_tab = \"irsgballot\"",
            "            e = doc.latest_event(ConsensusDocEvent, type=\"changed_consensus\")",
            "            data[\"consensus\"] = e.consensus if e else None",
            "        can_add_comment = has_role(request.user, (\"Area Director\", \"Secretariat\", \"IRTF Chair\"))",
            "        permission_denied(request, \"You need to be a chair or secretary of this group to add a comment.\")",
            "            warnings.append( \"This document is currently scheduled for today's telechat. \"",
            "            initial_returning_item = True",
            "            warnings.append(  \"This document appears to have been on a previous telechat with the same ballot, \"",
            "            form = NotifyForm(initial=init)",
            "                existing_list.append(role.person.pk)",
            "        raise Http404",
            "        doc.created = doc.docevent_set.order_by('-time').first().time",
            "            parsed_draft = PlaintextDraft(text=doc.text(), source=name, name_from_source=False)",
            "            doc.deststatus = parsed_draft.get_status()"
          ]
        ],
        "ietf/doc/views_downref.py": [
          34,
          1,
          [],
          []
        ],
        "ietf/doc/views_draft.py": [
          1057,
          0.9224219489120151,
          [
            84,
            87,
            98,
            164,
            165,
            175,
            176,
            194,
            283,
            290,
            303,
            304,
            305,
            306,
            354,
            356,
            364,
            408,
            415,
            440,
            463,
            511,
            529,
            554,
            591,
            592,
            595,
            596,
            601,
            604,
            605,
            606,
            607,
            608,
            641,
            683,
            684,
            685,
            686,
            687,
            688,
            689,
            690,
            722,
            723,
            725,
            726,
            727,
            729,
            730,
            786,
            809,
            850,
            851,
            852,
            879,
            906,
            933,
            945,
            993,
            994,
            1004,
            1092,
            1187,
            1229,
            1266,
            1428,
            1429,
            1431,
            1432,
            1439,
            1449,
            1474,
            1480,
            1494,
            1546,
            1632,
            1646,
            1659,
            1676,
            1681,
            1744
          ],
          [
            "            self._errors['comment'] = ErrorList(['State not changed. Comments entered will be lost with no state change. Please go back and use the Add Comment feature on the history tab to add comments without changing state.'])",
            "            self._errors['substate'] = ErrorList(['Clear substate before setting the document to the idexists state.'])",
            "        raise Http404",
            "                    if not doc.get_state_slug(\"draft-iana-review\"):",
            "                        doc.set_state(State.objects.get(used=True, type=\"draft-iana-review\", slug=\"need-rev\"))",
            "                    msg = \"Note that this document is still in the %s stream. Please ensure the stream state settings make sense, or consider removing the document from the stream.\" % doc.stream.name",
            "                    messages.info(request, msg)",
            "        prev_state = hists[0].get_state(\"draft-iesg\")",
            "        raise Http404",
            "        permission_denied(request, \"You do not have permission to view this page\")",
            "                    if not doc.notify:",
            "                        doc.notify = \"irsg@irtf.org\"",
            "                    elif \"irsg@irtf.org\" not in doc.notify:",
            "                        doc.notify += \", irsg@irtf.org\"",
            "                raise forms.ValidationError(\"An Internet-Draft can't replace itself\")",
            "                raise forms.ValidationError(\"An Internet-Draft can't replace an RFC\")",
            "        raise Http404",
            "        raise Http404",
            "        raise Http404",
            "                events.append(DocEvent.objects.create(doc=doc, rev=doc.rev, by=by, type=\"added_comment\", desc=comment))",
            "        raise Http404",
            "            self.fields['ad'].choices = list(choices) + [(\"\", \"-------\"), (ad_pk, Person.objects.get(pk=ad_pk).plain_name())]",
            "        raise Http404",
            "        warn['tags'] = True",
            "                doc.ad = ad",
            "                changes.append(\"Responsible AD changed to %s\" % doc.ad)",
            "                doc.notify = notify",
            "                changes.append(\"State Change Notice email list changed to %s\" % doc.notify)",
            "                changes.append(previous_writeup.text)",
            "                e = DocEvent(doc=doc, rev=doc.rev, by=by)",
            "                e.desc = c",
            "                e.type = \"changed_document\"",
            "                e.save()",
            "                events.append(e)",
            "        raise Http404",
            "                    e = DocEvent()",
            "                    e.type = \"added_comment\"",
            "                    e.by = Person.objects.get(name=\"(System)\")",
            "                    e.doc = doc",
            "                    e.rev = doc.rev",
            "                    e.desc = \"Earlier history may be found in the Comment Log for <a href=\\\"%s\\\">%s</a>\" % (replaces[0], replaces[0].get_absolute_url())",
            "                    e.save()",
            "                    events.append(e)",
            "                if not r[\"area\"]:",
            "                    r[\"area\"] = Group.objects.get(type=\"individ\")",
            "                if r[\"area\"] != doc.group:",
            "                    if r[\"area\"].type_id == \"area\":",
            "                        changes.append(\"Assigned to <b>%s</b>\" % r[\"area\"].name)",
            "                        changes.append(\"No longer assigned to any area\")",
            "                    doc.group = r[\"area\"]",
            "        raise Http404",
            "        raise Http404",
            "        except shutil.Error as ex:",
            "            messages.warning(request, 'There was an error restoring the Internet-Draft file: {} ({})'.format(file, ex))",
            "            log.log(\"  Exception %s when attempting to move %s\" % (ex, file))",
            "        permission_denied(",
            "                    e.desc = \"Changed document writeup\"",
            "            form = None",
            "            init[\"content\"] = previous_writeup.text",
            "                    doc.shepherd.origin = 'shepherd: %s' % doc.name",
            "                    doc.shepherd.save()",
            "                        addrs += ', '",
            "            self.fields['ad'].choices = list(choices) + [(\"\", \"-------\"), (ad_pk, Person.objects.get(pk=ad_pk).plain_name())]",
            "                messages.info(request,\"No change in Document resources.\")",
            "                return render(request, 'doc/draft/rfceditor_post_approved_draft_failed.html',",
            "            action = \"Protocol Action\"",
            "                ok = False",
            "                break",
            "            state_type_text = newstate.type_id.split(\"-\")[-1].upper()",
            "            group_type_text = {",
            "            raise forms.ValidationError(",
            "        permission_denied(request, \"You don't have permission to access this page.\")",
            "                    e.desc += \" from %s\" % doc.stream.name",
            "                    email_stream_changed(request, doc, old_stream, new_stream)",
            "                    e.desc += \" from %s (%s)\" % (doc.group.name, doc.group.acronym.upper())",
            "        raise Http404",
            "                f.help_text = \"Only select 'Submitted to IESG for Publication' to correct errors. Use the document's main page to request publication.\"",
            "            raise forms.ValidationError('You may not set the %s state using this form. Use the \"Submit to IESG for publication\" button on the document\\'s main page instead. If that button does not appear, the document may already have IESG state. Ask your Area Director or the Secretariat for help.'%new_state.name)",
            "                next_states = transitions[0].next_states.all()",
            "        raise Http404",
            "        permission_denied(request, \"You don't have permission to access this page.\")",
            "                form.add_error(None, \"No change in state or tags found, and no comment provided -- nothing to do.\")"
          ]
        ],
        "ietf/doc/views_help.py": [
          29,
          0.6551724137931035,
          [
            42,
            43,
            44,
            56,
            59,
            60,
            61,
            62,
            63,
            64
          ],
          [
            "    elif state_type.slug.startswith(\"draft-stream-\"):",
            "        possible = get_tags_for_stream_id(state_type.slug.replace(\"draft-stream-\", \"\"))",
            "        tags = DocTagName.objects.filter(slug__in=possible)",
            "    subsets = { \"reference\": ['refnorm','refinfo','refunk','refold'],",
            "    if subset and subset not in subsets:",
            "        raise Http404()",
            "    rels = DocRelationshipName.objects.filter(used=True)",
            "    if subset:",
            "       rels = rels.filter(slug__in=subsets[subset]) ",
            "    return render(request, \"doc/relationship_help.html\", { \"relations\": rels } )"
          ]
        ],
        "ietf/doc/views_material.py": [
          139,
          0.9208633093525179,
          [
            30,
            65,
            73,
            84,
            101,
            116,
            119,
            170,
            178,
            196,
            201
          ],
          [
            "        raise Http404",
            "                self.fields[\"state\"].help_text = \"Note: If you wish to revise this document, you may wish to change the state so it's not deleted.\"",
            "            del self.fields['abstract']",
            "            raise forms.ValidationError(\"The name must start with %s-%s- followed by descriptive dash-separated words.\" % (self.doc_type.slug, self.group.acronym))",
            "            raise Http404",
            "        raise Http404",
            "        permission_denied(request, \"You don't have permission to access this view\")",
            "                    e.desc += \" from %s\" % prev_title",
            "                    e.desc += \" from %s\" % prev_abstract",
            "        back_href = urlreverse('ietf.doc.views_doc.document_main', kwargs={'name': doc.name})",
            "        name_prefix = 'proceedings-'"
          ]
        ],
        "ietf/doc/views_review.py": [
          637,
          0.9513343799058085,
          [
            93,
            101,
            114,
            130,
            174,
            175,
            177,
            178,
            207,
            281,
            284,
            285,
            297,
            327,
            357,
            393,
            457,
            498,
            610,
            669,
            670,
            671,
            673,
            678,
            704,
            722,
            987,
            1001,
            1002,
            1040,
            1131
          ],
          [
            "            self.fields[\"requested_by\"] = SearchablePersonField()",
            "            raise forms.ValidationError(\"Select today or a date in the future.\")",
            "                    self.add_error(\"type\", \"{} does not use the review type {}.\".format(t.name, chosen_type.name))",
            "        lc_ends = e.expires",
            "            review_type = \"lc\"",
            "            deadline = lc_ends.date().isoformat()",
            "            review_type = \"telechat\"",
            "            deadline = doc.telechat_date()-datetime.timedelta(days=2)",
            "        raise Http404('The indicated ReviewRequest is not a request for the indicated document')",
            "            self.fields[\"close_reason\"].queryset = self.fields[\"close_reason\"].queryset.filter(slug__in=[\"withdrawn\"])",
            "            self.fields[\"close_reason\"].initial = self.fields[\"close_reason\"].queryset.first().pk",
            "            self.fields[\"close_reason\"].widget = forms.HiddenInput()",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "        return redirect(review_request, name=review_assignment.review_request.doc.name, request_id=review_assignment.review_request.pk)",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "                    reviewed_rev_class.append('reviewer-doc-ok')",
            "            except requests.Timeout as exc:",
            "                log.log(f'GET request timed out for [{url}]: {exc}')",
            "                raise forms.ValidationError(\"Trying to retrieve the URL resulted in a request timeout. Please provide a URL that can be retrieved.\") from exc",
            "                raise forms.ValidationError(\"Trying to retrieve the URL resulted in status code %s: %s.  Please provide a URL that can be retrieved.\" % (r.status_code, r.reason))",
            "            raise forms.ValidationError(\"Reviewer name must be filled in (the ASCII version is currently \\\"{}\\\" - since it contains an @ sign the name is probably still the original email address).\".format(self.review_req.reviewer.person.ascii))",
            "            permission_denied(request, \"You do not have permission to perform this action\")",
            "            permission_denied(request, \"You do not have permission to perform this action\")",
            "        return JsonResponse({ \"error\": \"Couldn't do lookup in mail archive - don't know where to look\"})",
            "    except Exception as e:",
            "        res[\"error\"] = \"Retrieval from mail archive failed: %s\" % str(e)",
            "            raise forms.ValidationError(\"Select today or a date in the future.\")",
            "        return HttpResponse("
          ]
        ],
        "ietf/doc/views_search.py": [
          444,
          0.8040540540540541,
          [
            128,
            130,
            132,
            134,
            149,
            156,
            169,
            184,
            197,
            201,
            202,
            203,
            207,
            208,
            209,
            245,
            247,
            249,
            258,
            260,
            262,
            266,
            271,
            318,
            350,
            351,
            352,
            353,
            355,
            377,
            423,
            424,
            425,
            426,
            433,
            480,
            481,
            482,
            483,
            484,
            486,
            487,
            489,
            491,
            496,
            498,
            499,
            502,
            503,
            504,
            507,
            508,
            509,
            511,
            512,
            513,
            514,
            516,
            518,
            520,
            522,
            524,
            525,
            526,
            528,
            530,
            532,
            533,
            534,
            535,
            536,
            537,
            538,
            541,
            542,
            543,
            544,
            589,
            641,
            647,
            678,
            681,
            682,
            747,
            827,
            836,
            850
          ],
          [
            "                    q['by'] = None",
            "                q['by'] = None",
            "                q['by'] = None",
            "            q['by'] = None",
            "        raise ValueError(\"SearchForm doesn't validate: %s\" % form.errors)",
            "        docs = Document.objects.all().order_by('-time')",
            "            return Document.objects.none()",
            "                queries.extend([",
            "            queries.extend([",
            "            spaceless = look_for.lower()[:3]+look_for[3:].strip()",
            "            if spaceless != look_for:",
            "                queries.extend([",
            "            singlespace = look_for.lower()[:3]+\" \"+look_for[3:].strip()",
            "            if singlespace != look_for:",
            "                queries.extend([",
            "            docs = docs.filter(tags=query[\"substate\"])",
            "        docs = docs.filter(states=query[\"irtfstate\"])",
            "        docs = docs.filter(stream=query[\"stream\"])",
            "            get_params['activedrafts'] = request.GET['activeDrafts']",
            "            get_params['olddrafts'] = request.GET['oldDrafts']",
            "            get_params['substate'] = request.GET['subState']",
            "            return HttpResponseBadRequest(\"form not valid: %s\" % form.errors)",
            "            [results, meta] = cached_val",
            "            return HttpResponseRedirect(url)",
            "        for t in doctypenames:",
            "            if t.prefix and n.startswith(t.prefix):",
            "                search_args += \"&doctypes=%s\" % t.slug",
            "                break",
            "            search_args += \"&rfcs=on&activedrafts=on&olddrafts=on\"",
            "        name = \"RFC\"",
            "    for dt in STATE_SLUGS:",
            "        if state in STATE_SLUGS[dt]:",
            "            return dt",
            "    return None",
            "    return num_buckets - int((now.date() - date.date()).total_seconds() / 60 / 60 / 24)",
            "                to_state = None",
            "                if dt == \"charter\":",
            "                    if e.type == \"closed_ballot\":",
            "                        to_state = state_name(dt, state, shorten=False)",
            "                    elif e.desc.endswith(\"has been replaced\"):",
            "                        last = e.time",
            "                        break",
            "                if not to_state:",
            "                    match = re.search(",
            "                    if not match:",
            "                        continue",
            "                    to_state = match.group(1) or match.group(2)",
            "                if dt == \"conflrev\" and to_state.startswith(\"Approved\"):",
            "                    to_state = \"Approved\"",
            "                elif dt == \"charter\" and to_state.startswith(",
            "                    to_state = \"Start Chartering/Rechartering (Internal Steering Group/IAB Review)\"",
            "                elif to_state == \"RFC Published\":",
            "                    to_state = \"RFC\"",
            "                if dt == \"rfc\":",
            "                    new_dt = state_to_doc_type(to_state)",
            "                    if new_dt is not None and new_dt != dt:",
            "                        dt = new_dt",
            "                if to_state not in STATE_SLUGS[dt].keys() or to_state == \"Replaced\":",
            "                    if to_state in IESG_STATES or to_state == \"Replaced\":",
            "                        last = e.time",
            "                    continue",
            "                sn = STATE_SLUGS[dt][to_state]",
            "                buckets_start = date_to_bucket(e.time, now, days)",
            "                buckets_end = date_to_bucket(last, now, days)",
            "                if dt == \"charter\" and to_state == \"Approved\" and buckets_start < 0:",
            "                    break",
            "                if buckets_start <= 0:",
            "                    if buckets_end >= 0:",
            "                        for b in range(0, buckets_end):",
            "                            ad.buckets[dt][sn][b].append(doc.name)",
            "                            sums[dt][sn][b].append(doc.name)",
            "                        last = e.time",
            "                    break",
            "                for b in range(buckets_start, buckets_end):",
            "                    ad.buckets[dt][sn][b].append(doc.name)",
            "                    sums[dt][sn][b].append(doc.name)",
            "                last = e.time",
            "        raise Http404",
            "                continue",
            "                continue",
            "            iesg_ballot_summary = needed_ballot_positions(",
            "            if re.search(r\"\\bNeeds\\s+\\d+\", iesg_ballot_summary):",
            "                not_balloted_docs.append(doc)",
            "        [docs, results, meta] = cached_val",
            "        objs = model.objects.none()",
            "            return HttpResponseBadRequest(\"Invalid document type\")",
            "        type = DocTypeName.objects.get(slug=type_id)"
          ]
        ],
        "ietf/doc/views_statement.py": [
          136,
          0.948529411764706,
          [
            73,
            92,
            98,
            99,
            131,
            177,
            248
          ],
          [
            "                    raise forms.ValidationError(",
            "                    markdown_content = get_cleaned_text_file_content(",
            "            except Exception as e:",
            "                raise forms.ValidationError(f\"Markdown processing failed: {e}\")",
            "                    markdown_content = get_cleaned_text_file_content(",
            "            title_slug = title_slug[len(f\"{group.acronym}-\") :]",
            "                    markdown_content = get_cleaned_text_file_content("
          ]
        ],
        "ietf/doc/views_stats.py": [
          126,
          0.746031746031746,
          [
            31,
            32,
            51,
            54,
            72,
            73,
            74,
            75,
            85,
            86,
            87,
            89,
            90,
            91,
            93,
            94,
            95,
            97,
            98,
            99,
            101,
            102,
            103,
            104,
            105,
            106,
            108,
            109,
            110,
            134,
            163,
            174
          ],
          [
            "    ys, ms, ds = s.split('-')",
            "    return datetime.date(int(ys), int(ms), int(ds))",
            "            obj_list += [ {'date': today, 'count': 0} ]",
            "        data = []",
            "            name = doctype.name",
            "            if pluralize and not name.endswith('s'):",
            "                name += 's'",
            "            doctypes.append(name)",
            "        author = queryargs.get('author')",
            "        if author:",
            "            title += ' with author %s' % author.title()",
            "        group = queryargs.get('group')",
            "        if group:",
            "            title += ' for %s' % group.capitalize()",
            "        area = queryargs.get('area')",
            "        if area:",
            "            title += ' in %s Area' % area.upper()",
            "        ad_id = queryargs.get('ad')",
            "        if ad_id:",
            "            title += ' with AD %s' % Person.objects.get(id=ad_id)",
            "        state = queryargs.get('state')",
            "        if state:",
            "            title += ' in state %s' % state",
            "            substate = queryargs.get('substate')",
            "            if substate:",
            "                title += '::%s' % substate",
            "        stream = queryargs.get('stream')",
            "        if stream:",
            "            title += ' in stream %s' % stream",
            "                return HttpResponseBadRequest(\"form not valid: %s\" % form.errors)",
            "        conf = {}",
            "        data = []"
          ]
        ],
        "ietf/doc/views_status_change.py": [
          426,
          0.9342723004694835,
          [
            207,
            224,
            225,
            356,
            430,
            439,
            447,
            499,
            501,
            503,
            505,
            507,
            511,
            520,
            522,
            531,
            532,
            533,
            534,
            544,
            545,
            546,
            576,
            582,
            583,
            584,
            585,
            586
          ],
          [
            "            form = None",
            "            except IOError:",
            "                pass",
            "      raise Http404",
            "                    v = 'rfc'+v",
            "                    new_relations[rfc_fields[key]]=None",
            "              errors.append(key+\" is not a valid RFC - please use the form RFCn\\n\")",
            "            errors.append(\"The name of the document may only contain digits, lowercase letters and dashes\")",
            "            errors.append(\"Please do not put more than one hyphen between any two words in the name\")",
            "            errors.append(\"status-change- will be added automatically as a prefix\")",
            "            errors.append(\"status-change- will be added automatically as a prefix, starting with a - will result in status-change-%s\"%name)",
            "            errors.append(\"This name looks like ends in a version number. -00 will be added automatically. Please adjust the end of the name.\")",
            "            errors.append(\"Please change CHANGETHIS to reflect the intent of this status change\")",
            "            errors.append(\"Please change CHANGETHIS to reflect the intent of this status change\")",
            "            raise forms.ValidationError(errors)",
            "    docs=Document.objects.filter(type__slug='statchg')",
            "    doclist=[x for x in docs]",
            "    doclist.sort(key=lambda obj: obj.get_state().order)",
            "    return render(request, 'doc/status_change/status_changes.html',",
            "       if not re.match(\"(?i)rfc[0-9]{1,4}\",name):",
            "           raise Http404",
            "       seed_rfc = get_object_or_404(Document, type=\"rfc\", name=name)",
            "                update_telechat(request, status_change, login, tc_date)",
            "           init['title'] = \"%s to CHANGETHIS\" % seed_rfc.title",
            "           init['document_name'] = \"%s-to-CHANGETHIS\" % seed_rfc.name",
            "           relations={}",
            "           relations[seed_rfc.name]=None",
            "           init['relations'] = relations"
          ]
        ],
        "ietf/feed_urls.py": [
          10,
          1,
          [],
          []
        ],
        "ietf/group/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/group/feeds.py": [
          38,
          0.9736842105263157,
          [
            26
          ],
          [
            "            raise FeedDoesNotExist"
          ]
        ],
        "ietf/group/forms.py": [
          270,
          0.9148148148148149,
          [
            50,
            52,
            54,
            93,
            94,
            95,
            96,
            102,
            207,
            212,
            213,
            215,
            223,
            224,
            226,
            258,
            259,
            261,
            274,
            333,
            360,
            381,
            396
          ],
          [
            "            raise forms.ValidationError(\"Cannot enter both text box and TXT file\")",
            "            raise forms.ValidationError(\"NULL input is not a valid option\")",
            "            raise forms.ValidationError(\"NULL TXT file input is not a valid option\")",
            "            self.used_roles = []",
            "            parent_types = GroupFeatures.objects.none()",
            "            need_parent = False",
            "            default_parent = None",
            "                field = field + \"_roles\"",
            "                    return acronym",
            "                if confirmed:",
            "                    return acronym",
            "                    raise forms.ValidationError(\"Warning: Acronym used for an existing %s (%s, %s).\" % (existing.type.name, existing.acronym, existing.state.name if existing.state else \"unknown state\"))",
            "            if confirmed:",
            "                return acronym",
            "                raise forms.ValidationError(\"Warning: Acronym used for a historic group.\")",
            "        if len(self.cleaned_data[\"delegates\"]) > MAX_GROUP_DELEGATES:",
            "            raise forms.ValidationError(\"At most %s delegates can be appointed at the same time, please remove %s delegates.\" % (",
            "        return self.cleaned_data[\"delegates\"]",
            "            raise forms.ValidationError(\"A group cannot be its own ancestor.  \"",
            "                self.fields[\"close\"].required = True",
            "            raise forms.ValidationError(\"Skip next must not be negative\")",
            "            self.add_error(\"start_date\", \"Start date must be before or equal to end date.\")",
            "            raise forms.ValidationError(\"End date must be equal to or come after start date.\")"
          ]
        ],
        "ietf/group/mails.py": [
          35,
          1,
          [],
          []
        ],
        "ietf/group/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/group/milestones.py": [
          285,
          0.863157894736842,
          [
            77,
            94,
            110,
            121,
            156,
            157,
            194,
            214,
            215,
            216,
            230,
            245,
            246,
            247,
            248,
            251,
            258,
            259,
            260,
            262,
            263,
            264,
            266,
            267,
            269,
            270,
            274,
            276,
            277,
            294,
            328,
            346,
            358,
            372,
            406,
            409,
            417,
            418,
            449
          ],
          [
            "            self.fields[\"desc\"].widget.attrs[\"readonly\"] = True",
            "                raise forms.ValidationError('Please provide explanation (like \"Done\") for why the milestone is no longer due.')",
            "        raise Http404",
            "        permission_denied(request, \"You are not authorized to edit the milestones of this group.\")",
            "        elif milestone_set == \"charter\":",
            "            m.state = GroupMilestoneStateName.objects.get(slug=\"charter\")",
            "                named_milestone = \"charter \" + named_milestone",
            "                elif c[\"review\"] == \"reject\":",
            "                    m.state_id = \"deleted\"",
            "                    changes.append(\"set state to deleted from review, rejecting new milestone\")",
            "                        history = save_milestone_in_history(m)",
            "                elif not resolved and m.resolved:",
            "                    changes.append(\"reverted to not being resolved\")",
            "                elif resolved and m.resolved:",
            "                    changes.append('set resolution to \"%s\"' % resolved)",
            "                    history = save_milestone_in_history(m)",
            "                added = new_docs - old_docs",
            "                if added:",
            "                    changes.append('added %s to milestone' % \", \".join(d.name for d in added))",
            "                removed = old_docs - new_docs",
            "                if removed:",
            "                    changes.append('removed %s from milestone' % \", \".join(d.name for d in removed))",
            "                if not history:",
            "                    history = save_milestone_in_history(m)",
            "                m.docs.clear()",
            "                m.docs.set(new_docs)",
            "                    messages.warning(request, \"Found conflicting form data: both delete action and milestone changes for '%s'. \"",
            "                    m.state_id = initial_state",
            "                    changes[0] = 'Changed %s' % named_milestone",
            "                named_milestone = \"charter \" + named_milestone",
            "                    continue",
            "                            f.milestone = GroupMilestone()",
            "                        DocEvent.objects.create(doc=group.charter, rev=group.charter.rev, type=\"changed_charter_milestone\",",
            "                    return redirect('ietf.doc.views_doc.document_main', name=group.charter.name)",
            "        raise Http404",
            "        permission_denied(request, \"You are not authorized to change the milestones for this group.\")",
            "        except ValueError as e:",
            "            return HttpResponseBadRequest(\"error in list of ids - %s\" % e)",
            "                desc='Added milestone \"%s\" from current group milestones' % ( new.desc, )"
          ]
        ],
        "ietf/group/models.py": [
          302,
          0.9205298013245033,
          [
            94,
            145,
            148,
            180,
            183,
            192,
            207,
            208,
            209,
            211,
            212,
            221,
            223,
            291,
            302,
            328,
            348,
            369,
            389,
            392,
            410,
            424,
            443,
            454
          ],
          [
            "            return self",
            "                return True",
            "        return False",
            "                    return self.parent.role_set.filter(**role_kwargs)",
            "        return self.role_set.none()",
            "            status_events = status_events.filter(",
            "            path = self.charter.get_file_name()",
            "            if os.path.exists(path):",
            "                text = self.charter.text()",
            "                if text:",
            "                    desc = [ p for p in re.split(r'\\r?\\n\\s*\\r?\\n\\s*', text) if p.strip() ][0]",
            "            return settings.CHAT_ARCHIVE_URL_PATTERN.format(chat_room_name=self.acronym)",
            "            return self.chat_room_url()",
            "        return self.group.role_set.filter(name='ad').first()",
            "        return u\"%s (%s)\" % (self.url, self.name)",
            "        return self.desc[:20] + \"...\"",
            "        return u'%s \"%s\" -> %s' % (self.group.acronym, self.state.name, [s.name for s in self.next_states.all()])",
            "        return u\"%s %s at %s\" % (self.by.plain_name(), self.get_type_display().lower(), self.time)",
            "        return u\"%s is %s in %s\" % (self.person.plain_name(), self.name.name, self.group.acronym or self.group.name)",
            "        return email.utils.formataddr((self.person.plain_ascii(), self.email.address))",
            "        return u\"%s is %s in %s\" % (self.person.plain_name(), self.name.name, self.group.acronym)",
            "        return f\"{self.date} - {self.name}\"",
            "            return self.title",
            "        return f\"{self.date} {self.display_title()} : {self.appeal.name}\""
          ]
        ],
        "ietf/group/resources.py": [
          197,
          1,
          [],
          []
        ],
        "ietf/group/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/group/templatetags/group_filters.py": [
          22,
          0.9090909090909091,
          [
            15,
            20
          ],
          [
            "    return queryset.filter(group__state_id__in=['active', 'bof']).exclude(group__acronym='secretariat')",
            "        return []"
          ]
        ],
        "ietf/group/urls.py": [
          11,
          1,
          [],
          []
        ],
        "ietf/group/utils.py": [
          223,
          0.9372197309417041,
          [
            52,
            53,
            54,
            55,
            62,
            63,
            87,
            89,
            124,
            241,
            242,
            262,
            270,
            271
          ],
          [
            "        h_appr = \"-\" not in h.rev",
            "        c_appr = \"-\" not in c.rev",
            "        if (h.rev > c.rev and not (c_appr and not h_appr)) or (h_appr and not c_appr):",
            "            c = h",
            "        except UnicodeDecodeError:",
            "            text = text.decode('latin1')",
            "        return set()",
            "        emails = get_group_role_emails(group, roles=('pre-ad', 'ad', 'chair'))",
            "        group_queryset = Group.objects.all()",
            "        if is_valid_url(group.list_archive):",
            "            entries.append((mark_safe(\"List archive &raquo;\"), group.list_archive))",
            "        actions.append((\"Upload material\", urlreverse(\"ietf.doc.views_material.choose_material_type\", kwargs=kwargs)))",
            "            actions.append((\"Secretary settings\", urlreverse(ietf.group.views.change_review_secretary_settings, kwargs=kwargs)))",
            "            actions.append((\"Email open assignments summary\", urlreverse(ietf.group.views.email_open_review_assignments, kwargs=dict(acronym=group.acronym, group_type=group.type_id))))"
          ]
        ],
        "ietf/group/views.py": [
          1223,
          0.9051512673753066,
          [
            141,
            142,
            143,
            163,
            193,
            194,
            208,
            215,
            230,
            243,
            258,
            296,
            376,
            454,
            457,
            473,
            474,
            475,
            494,
            519,
            529,
            534,
            552,
            648,
            707,
            727,
            785,
            860,
            861,
            862,
            863,
            865,
            866,
            950,
            963,
            975,
            976,
            977,
            1092,
            1095,
            1096,
            1097,
            1098,
            1099,
            1101,
            1102,
            1113,
            1114,
            1115,
            1146,
            1155,
            1164,
            1165,
            1166,
            1167,
            1187,
            1189,
            1193,
            1196,
            1197,
            1208,
            1209,
            1212,
            1223,
            1224,
            1242,
            1243,
            1246,
            1291,
            1390,
            1400,
            1404,
            1464,
            1481,
            1508,
            1544,
            1589,
            1614,
            1615,
            1632,
            1635,
            1656,
            1657,
            1658,
            1659,
            1660,
            1661,
            1662,
            1664,
            1665,
            1705,
            1739,
            1740,
            1742,
            1767,
            1770,
            1781,
            1782,
            1783,
            1785,
            1786,
            1836,
            1872,
            1879,
            1961,
            2032,
            2034,
            2097,
            2101,
            2115,
            2116,
            2117,
            2118,
            2126,
            2143,
            2185
          ],
          [
            "        ad_roles = list(Role.objects.filter(group=group.parent, name=\"ad\", person=group.ad_role().person))",
            "        if ad_roles:",
            "            personnel[\"ad\"] = ad_roles",
            "        group.milestones = group.milestones.order_by('resolved', 'order')",
            "        rfc.remote_field = RelatedDocument.objects.filter(source=rfc,relationship_id__in=['obs','updates']).distinct()",
            "        rfc.invrel = RelatedDocument.objects.filter(target=rfc,relationship_id__in=['obs','updates']).distinct()",
            "    return False",
            "        raise Http404",
            "        raise Http404",
            "        raise Http404",
            "        raise Http404",
            "        raise Http404",
            "                group.list_subscribe_url = group.list_subscribe",
            "            d[e.group_id].start_date = e.time",
            "            d[e.group_id].conclude_date = e.time",
            "            if (d.type_id == \"draft\" and d.get_state_slug() not in [\"expired\",\"rfc\"]) or d.type_id == \"rfc\":",
            "                d.search_heading = \"Related Internet-Drafts and RFCs\"",
            "                docs_related.append(d)",
            "        raise Http404",
            "        raise Http404",
            "        d.prefix = \"Related %s\" % d.get_state().name",
            "            name = str(d.rfc_number)",
            "        e = group.latest_event(type='closing_note')",
            "            form = None",
            "        raise Http404",
            "        raise Http404",
            "        links.add(x)",
            "        recent_past = []",
            "        for s in past:",
            "            if s.time >= four_years_ago:",
            "                recent_past.append(s)",
            "                far_past.append(s)",
            "        past = recent_past",
            "        raise Http404",
            "             permission_denied(request, \"You don't have permission to access this view\")",
            "                    save_group_in_history(group)",
            "                    group.time = timezone.now()",
            "                    group.save()",
            "                closing_note = e.desc",
            "                closing_note = clean.get(\"closing_note\", \"\")",
            "                e = GroupEvent(group=group, by=request.user.person)",
            "                e.type = \"closing_note\"",
            "                if closing_note == \"\":",
            "                    e.desc = \"(Closing note deleted)\" #Flag value so something shows up in history",
            "                    e.desc = closing_note",
            "                e.save()",
            "                closing_note = e.desc",
            "                if closing_note == \"(Closing note deleted)\":",
            "                    closing_note = \"\"",
            "        permission_denied(request, \"You don't have permission to access this view\")",
            "                instructions = instructions+\"\\n\\n=====\\nClosing note:\\n\\n\"+closing_note",
            "                e = GroupEvent(group=group, by=request.user.person)",
            "                e.type = \"closing_note\"",
            "                e.desc = closing_note",
            "                e.save()",
            "        group_type = group.type_id",
            "        raise Http404",
            "        permission_denied(request, \"You don't have permission to access this view\")",
            "        stream_id = \"irtf\"",
            "        MANDATORY_STATES = ('candidat', 'active', 'rfc-edit', 'pub', 'dead')",
            "            except State.DoesNotExist:",
            "                return HttpResponse(\"Invalid state %s\" % request.POST.get(\"state\"))",
            "                group.unused_states.remove(state)",
            "            except State.DoesNotExist:",
            "                return HttpResponse(\"Invalid state %s\" % request.POST.get(\"state\"))",
            "            except DocTagName.DoesNotExist:",
            "                return HttpResponse(\"Invalid tag %s\" % request.POST.get(\"tag\"))",
            "                group.unused_tags.remove(tag)",
            "        raise Http404(\"No such stream: %s\" % acronym)",
            "            continue",
            "                continue",
            "                continue",
            "        open_review_requests = list(open_review_requests.filter(state_id='assigned'))",
            "        raise Http404",
            "        since = None",
            "        raise Http404",
            "                kwargs[\"group_type\"] = group_type",
            "                        days = int(delta.days - d.assignment_to_closure_days)",
            "                        if days_since > days: days_since = days",
            "        raise Http404",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "            for a in r.reviewassignment_set.all():",
            "                if l and rev:",
            "                    if r.doc_id == l[0].doc_id and a.reviewed_rev:",
            "                        if int(a.reviewed_rev) > int(rev):",
            "                            l = [r]",
            "                        elif int(a.reviewed_rev) == int(rev):",
            "                            l.append(r)",
            "                    l = [r]",
            "                rev = l[0].reviewassignment_set.first().reviewed_rev",
            "                    close_review_request(request, review_req, review_req.form.cleaned_data[\"close\"],",
            "                if assignment_status:",
            "                    kwargs[\"assignment_status\"] = assignment_status",
            "                return redirect(manage_review_requests, **kwargs)",
            "        raise Http404",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "        elif r.review_request.type_id == 'early':",
            "            r.section = 'Early review requests:'",
            "            r.section_order='2'",
            "            r.section = 'Last calls:'",
            "            r.section_order='1'",
            "            template = templateqs.first()",
            "        raise Http404",
            "        permission_denied(request, \"You do not have permission to perform this action\")",
            "                        msg += \"{} does not have any assignments currently.\".format(reviewer_role.person)",
            "        raise Http404",
            "        raise Http404",
            "        permission_denied(request, \"You don't have permission to access this view\")",
            "        raise Http404",
            "    if not acronym in [\"iab\", \"iesg\"]:",
            "        raise Http404",
            "    group = get_group_or_404(acronym, group_type)",
            "    statements = group.document_set.filter(type_id=\"statement\").annotate(",
            "    return render(",
            "        raise Http404",
            "        raise Http404"
          ]
        ],
        "ietf/help/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/help/models.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/help/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/help/views.py": [
          21,
          0.6190476190476191,
          [
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30
          ],
          [
            "    if type:",
            "        streams = [ s.slug for s in StreamName.objects.all() ]",
            "        if type in streams:",
            "            type = \"stream-%s\" % type",
            "    slug = \"%s-%s\" % (doc,type) if type else doc",
            "    statetype = get_object_or_404(StateType, slug=slug)",
            "    states = State.objects.filter(used=True, type=statetype).order_by('order')",
            "    return render(request, 'help/states.html', {\"doc\": doc, \"type\": statetype, \"states\":states} )"
          ]
        ],
        "ietf/idindex/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/idindex/generate_all_id2_txt.py": [
          7,
          0,
          [
            38,
            39,
            41,
            43,
            44,
            46,
            48
          ],
          [
            "import os",
            "import sys",
            "os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ietf.settings\")",
            "import django",
            "django.setup()",
            "from ietf.idindex.index import all_id2_txt",
            "sys.stdout.write(all_id2_txt())"
          ]
        ],
        "ietf/idindex/generate_all_id_txt.py": [
          7,
          0,
          [
            37,
            38,
            39,
            41,
            42,
            44,
            46
          ],
          [
            "import os",
            "import sys",
            "os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ietf.settings\")",
            "import django",
            "django.setup()",
            "from ietf.idindex.index import all_id_txt",
            "sys.stdout.write(all_id_txt())"
          ]
        ],
        "ietf/idindex/generate_id_abstracts_txt.py": [
          7,
          0,
          [
            37,
            38,
            39,
            41,
            42,
            44,
            46
          ],
          [
            "import os",
            "import sys",
            "os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ietf.settings\")",
            "import django",
            "django.setup()",
            "from ietf.idindex.index import id_index_txt",
            "sys.stdout.write(id_index_txt(with_abstracts=True))"
          ]
        ],
        "ietf/idindex/generate_id_index_txt.py": [
          7,
          0,
          [
            37,
            38,
            39,
            41,
            42,
            44,
            46
          ],
          [
            "import os",
            "import sys",
            "os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ietf.settings\")",
            "import django",
            "django.setup()",
            "from ietf.idindex.index import id_index_txt",
            "sys.stdout.write(id_index_txt())"
          ]
        ],
        "ietf/idindex/index.py": [
          189,
          0.9523809523809524,
          [
            65,
            136,
            140,
            166,
            194,
            247,
            269,
            298,
            300
          ],
          [
            "            state += \"::\" + \"::\".join(tags)",
            "            l = authors[a.document.name]",
            "            l.append(a.person.plain_name())",
            "                    s += \"::\" + \"::\".join(tags)",
            "                area = d.group.acronym",
            "        docs_dict[d.name]['group_id'] = individual.id",
            "            continue",
            "                exts += \",.ps\"",
            "                exts += \",.pdf\""
          ]
        ],
        "ietf/iesg/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/iesg/agenda.py": [
          123,
          0.926829268292683,
          [
            25,
            26,
            31,
            32,
            174,
            177,
            178,
            179,
            185
          ],
          [
            "        except IndexError:",
            "            return date_today()",
            "        except (ValueError, TelechatDate.DoesNotExist):",
            "            raise Http404",
            "                doc.iana_review_state = str(s)",
            "                e = doc.latest_event(LastCallDocEvent, type=\"sent_last_call\")",
            "                if e:",
            "                    doc.lastcall_expires = e.expires",
            "                    doc.consensus = \"Yes\" if e.consensus else \"No\""
          ]
        ],
        "ietf/iesg/feeds.py": [
          30,
          0.8666666666666667,
          [
            39,
            40,
            41,
            42
          ],
          [
            "        e = doc.ad.role_email(\"ad\")",
            "        if not e:",
            "            return \"\"",
            "        return e.address"
          ]
        ],
        "ietf/iesg/models.py": [
          47,
          0.9148936170212765,
          [
            59,
            60,
            80,
            106
          ],
          [
            "        type_name = self.TYPE_CHOICES_DICT.get(self.type, str(self.type))",
            "        return \"%s: %s\" % (type_name, self.title or \"\")",
            "    return date_today(settings.TIME_ZONE)",
            "        return f\"{self.section.name} content\""
          ]
        ],
        "ietf/iesg/resources.py": [
          39,
          1,
          [],
          []
        ],
        "ietf/iesg/urls.py": [
          5,
          1,
          [],
          []
        ],
        "ietf/iesg/utils.py": [
          37,
          0.8108108108108109,
          [
            35,
            36,
            37,
            38,
            40,
            45,
            46
          ],
          [
            "                pages_for_action += rel.pages or 0",
            "        elif d.type_id == 'conflrev':",
            "            for rel in d.related_that_doc('conflrev'):",
            "                pages_for_action += rel.pages or 0",
            "            pass",
            "            for rel in d.related_that_doc(STATUSCHANGE_RELATIONS):",
            "                related_pages += rel.pages or 0"
          ]
        ],
        "ietf/iesg/views.py": [
          329,
          0.939209726443769,
          [
            78,
            79,
            147,
            148,
            153,
            157,
            160,
            161,
            162,
            167,
            333,
            421,
            463,
            464,
            492,
            497,
            563,
            564,
            565,
            566
          ],
          [
            "        year = int(year)",
            "        events = events.filter(time__year=year)",
            "                    docinfo['defer-by'] = defer.by.name",
            "                    docinfo['defer-at'] = str(defer.time)",
            "                        docinfo['rfc-number'] = doc.rfc_number",
            "                        docinfo['iana-review-state'] = str(iana_state)",
            "                        e = doc.latest_event(LastCallDocEvent, type=\"sent_last_call\")",
            "                        if e:",
            "                            docinfo['lastcall-expires'] = e.expires.strftime(\"%Y-%m-%d\")",
            "                        docinfo['consensus'] = e.consensus",
            "            dates.insert(0, init)",
            "                augment_events_with_revision(doc, blocking_positions)",
            "            except Exception as e:",
            "                manifest.write(b\"Failed (%s): %s\\n\" % (force_bytes(e), doc_path))",
            "            continue",
            "            continue",
            "            month = form.cleaned_data['month']",
            "            year = form.cleaned_data['year']",
            "            sdate = datetime.date(int(year), int(month), 1)",
            "            edate = sdate + relativedelta.relativedelta(months=1)"
          ]
        ],
        "ietf/ietfauth/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/ietfauth/backends.py": [
          14,
          0.9285714285714286,
          [
            11
          ],
          [
            "            username = kwargs.get(UserModel.USERNAME_FIELD)"
          ]
        ],
        "ietf/ietfauth/forms.py": [
          170,
          0.9529411764705883,
          [
            29,
            31,
            58,
            63,
            68,
            87,
            165,
            246
          ],
          [
            "            return email",
            "            raise forms.ValidationError('The supplied address contained uppercase letters.  Please use a lowercase email address.')",
            "        raise forms.ValidationError(\"Please fill in name - this looks like an email address (@ is not allowed in names).\")",
            "        raise forms.ValidationError(\"Please pick another name - this name is reserved.\")",
            "        raise forms.ValidationError(\"Please pick another name - this name is reserved.\")",
            "            raise forms.ValidationError(\"Ascii name contains non-ASCII characters.\")",
            "                raise ValidationError(\"This email address is not valid in a datatracker account\")",
            "            raise ValidationError(\"A login with that username already exists.  Please contact the secretariat to get this resolved.\")"
          ]
        ],
        "ietf/ietfauth/htpasswd.py": [
          23,
          0.7391304347826088,
          [
            21,
            22,
            23,
            24,
            29,
            30
          ],
          [
            "            if line.startswith(prefix):",
            "                break",
            "            pos=f.tell()",
            "            line = f.readline()",
            "        p = subprocess.Popen([settings.HTPASSWD_COMMAND, \"-b\", settings.HTPASSWD_FILE, username, password], stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
            "        stdout, stderr = p.communicate()"
          ]
        ],
        "ietf/ietfauth/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/ietfauth/urls.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/ietfauth/utils.py": [
          166,
          0.927710843373494,
          [
            33,
            55,
            56,
            153,
            171,
            173,
            191,
            193,
            203,
            209,
            221,
            230
          ],
          [
            "        return False",
            "        except Person.DoesNotExist:",
            "            return False",
            "        return False",
            "            docman_roles = GroupFeatures.objects.get(type_id=\"edappr\").docman_roles",
            "        group_req = Q()  # no group constraint for other cases",
            "            return True",
            "            return True",
            "        return False",
            "        return False",
            "    return user.person in bofreq_editors(doc)",
            "        photo_url = ''"
          ]
        ],
        "ietf/ietfauth/views.py": [
          494,
          0.9190283400809718,
          [
            135,
            137,
            141,
            143,
            154,
            161,
            176,
            221,
            222,
            225,
            245,
            260,
            261,
            262,
            313,
            352,
            354,
            447,
            549,
            550,
            585,
            586,
            594,
            596,
            597,
            598,
            599,
            601,
            603,
            608,
            609,
            611,
            710,
            711,
            814,
            815,
            825,
            826,
            827,
            874
          ],
          [
            "                except User.person.RelatedObjectDoesNotExist:",
            "                    pass  # leave person_to_contact as None",
            "                    email_is_known = True",
            "                    person_to_contact = email.person",
            "                form.add_error(",
            "                new_account_email = None  # Indicate to the template that we failed to create the requested account",
            "        form = RegistrationForm()",
            "    except django.core.signing.BadSignature:",
            "        raise Http404(\"Invalid or expired auth\")",
            "        return redirect(profile)",
            "                person = email_obj.person",
            "                if not email_obj.person:",
            "                    email_obj.person = person",
            "                    email_obj.save()",
            "                    continue",
            "                    email.active = True",
            "                    email.origin = person.user.username",
            "                messages.info(request,\"No change in Person resources.\")",
            "    except django.core.signing.BadSignature:",
            "        raise Http404(\"Invalid or expired auth\")",
            "    if settings.SERVER_MODE == \"production\":",
            "        raise Http404",
            "    cookie = None",
            "    if request.method == \"POST\":",
            "        form = TestEmailForm(request.POST)",
            "        if form.is_valid():",
            "            cookie = form.cleaned_data['email']",
            "        form = TestEmailForm(initial=dict(email=request.COOKIES.get('testmailcc')))",
            "    r = render(request, 'ietfauth/testemail.html', {",
            "    if cookie != None:",
            "        r.set_cookie(\"testmailcc\", cookie)",
            "    return r",
            "    except Person.DoesNotExist:",
            "        return render(request, 'registration/missing_person.html')",
            "            except ValueError:",
            "                extra_context = {\"alert\":",
            "        except Person.DoesNotExist:",
            "            logout(request)",
            "            response = render(request, 'registration/missing_person.html')",
            "                raise ValidationError(\"Bad key value\")"
          ]
        ],
        "ietf/ietfauth/widgets.py": [
          26,
          0.8461538461538461,
          [
            62,
            63,
            108,
            109
          ],
          [
            "        except KeyError:",
            "            self.attrs[\"class\"] = \"password_strength\"",
            "        except KeyError:",
            "            self.attrs[\"class\"] = \"password_confirmation\""
          ]
        ],
        "ietf/ipr/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/ipr/feeds.py": [
          30,
          0.9333333333333332,
          [
            38,
            44
          ],
          [
            "            return None",
            "            return None"
          ]
        ],
        "ietf/ipr/fields.py": [
          26,
          0.8846153846153847,
          [
            32,
            33,
            34
          ],
          [
            "        for pk in pks:",
            "            if not pk.isdigit():",
            "                raise forms.ValidationError(\"You must enter IPR ID(s) as integers (Unexpected value: %s)\" % pk)"
          ]
        ],
        "ietf/ipr/forms.py": [
          282,
          0.8794326241134752,
          [
            42,
            43,
            44,
            46,
            47,
            75,
            78,
            83,
            89,
            90,
            91,
            92,
            93,
            113,
            192,
            244,
            245,
            246,
            247,
            266,
            273,
            274,
            277,
            309,
            310,
            331,
            363,
            369,
            370,
            372,
            412,
            418,
            419,
            421
          ],
          [
            "        date = obj.time.strftime(\"%Y-%m-%d\")",
            "        if len(obj.subject) > 45:",
            "            subject = obj.subject[:43] + '....'",
            "            subject = obj.subject",
            "        return '{} - {}'.format(date,subject)",
            "                raise forms.ValidationError('Error parsing email: {} field not found.'.format(field))",
            "            raise forms.ValidationError('Error parsing email date field')",
            "            return self.cleaned_data",
            "            if direction != 'incoming':",
            "                raise forms.ValidationError('Only incoming messages can have In Reply To selected')",
            "            date = utc_from_string(message['date'])",
            "            if date < in_reply_to.time:",
            "                raise forms.ValidationError('The incoming message must have a date later than the message it is replying to')",
            "            self.add_error(\"document\", \"Identifying the Internet-Draft or RFC for this disclosure is required.\")",
            "        raise forms.ValidationError(message)",
            "            for k in patent_fields:",
            "                if not cleaned_data.get(k):",
            "                    self.add_error(k, \"This field is required if you are filing a patent-specific disclosure.\")",
            "            raise forms.ValidationError(\"A general IPR disclosure cannot have any patent-specific information, \"",
            "            obj = NonDocSpecificIprDisclosure(**nargs)",
            "            obj.submitter_name = obj.holder_contact_name",
            "            obj.submitter_email = obj.holder_contact_email",
            "            obj.save()",
            "            for f in patent_fields:",
            "                del self.fields[f]",
            "                    raise forms.ValidationError('Submitter information must be provided in section VII')",
            "            raise forms.ValidationError('You need to specify a contribution in Section IV')",
            "            obj.submitter_name = obj.holder_contact_name",
            "            obj.submitter_email = obj.holder_contact_email",
            "            obj.save()",
            "            raise forms.ValidationError('You need to specify a contribution in Section III')",
            "            obj.submitter_name = obj.ietfer_name",
            "            obj.submitter_email = obj.ietfer_contact_email",
            "            obj.save()"
          ]
        ],
        "ietf/ipr/mail.py": [
          121,
          0.8347107438016529,
          [
            42,
            45,
            56,
            59,
            61,
            62,
            67,
            71,
            92,
            93,
            119,
            123,
            124,
            139,
            190,
            191,
            192,
            196,
            197,
            198
          ],
          [
            "        return False",
            "    return False",
            "            return None",
            "            return datetime.datetime(*tuple[:6])",
            "    except ValueError:",
            "        return None",
            "        return None",
            "        return date.replace(tzinfo=datetime.timezone.utc)",
            "        name = ipr.ietfer_name",
            "        email = ipr.ietfer_contact_email",
            "        return ''",
            "        elif hasattr(rel.target,'ietfer_email') and rel.target.ietfer_email:",
            "            emails.append(rel.target.ietfer_email)",
            "            email_to_iprs[email].append(related.target)",
            "    except Message.DoesNotExist:",
            "        log('Error finding matching message ({})'.format(to))",
            "        return None",
            "    except:",
            "        log('Error processing message ({})'.format(to))",
            "        return None"
          ]
        ],
        "ietf/ipr/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/ipr/models.py": [
          170,
          0.8882352941176471,
          [
            67,
            82,
            83,
            84,
            85,
            86,
            87,
            105,
            122,
            123,
            171,
            174,
            175,
            180,
            187,
            188,
            190,
            198,
            211
          ],
          [
            "            return True",
            "        try:",
            "            statename = IprDisclosureStateName.objects.get(slug=state)",
            "        except IprDisclosureStateName.DoesNotExist:",
            "            return",
            "        self.state = statename",
            "        self.save()",
            "            return e.time",
            "        ipr = self.get_child() if self.__class__ is IprDisclosureBase else self",
            "        return ipr.__class__ is ThirdPartyIprDisclosure",
            "            return \"RFC\"",
            "        if name.startswith(\"slide\"):",
            "            return \"Meeting Slide\"",
            "            return name.upper()",
            "        if self.revisions:",
            "            return \"%s which applies to %s-%s\" % (self.disclosure, self.document.name, self.revisions)",
            "            return \"%s which applies to %s\" % (self.disclosure, self.document.name)",
            "        return \"%s %s %s\" % (self.source.title, self.relationship.name.lower(), self.target.title)",
            "        return \"%s %s by %s at %s\" % (self.disclosure.title, self.type.name.lower(), self.by.plain_name(), self.time)"
          ]
        ],
        "ietf/ipr/resources.py": [
          138,
          1,
          [],
          []
        ],
        "ietf/ipr/sitemaps.py": [
          6,
          1,
          [],
          []
        ],
        "ietf/ipr/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/ipr/templatetags/ipr_filters.py": [
          41,
          0.8536585365853658,
          [
            19,
            20,
            21,
            22,
            25,
            28
          ],
          [
            "    from ietf.message.models import Message",
            "    if isinstance(msg, Message):",
            "        if msg.to.startswith('ietf-ipr+'):",
            "            return format_html('Date: {}<br>From: {}<br>Subject: {}<br>Cc: {}<br><br>{}',",
            "            return format_html('Date: {}<br>From: {}<br>To: {}<br>Subject: {}<br>Cc: {}<br><br>{}',",
            "        return msg"
          ]
        ],
        "ietf/ipr/urls.py": [
          5,
          1,
          [],
          []
        ],
        "ietf/ipr/utils.py": [
          59,
          0.576271186440678,
          [
            22,
            25,
            30,
            31,
            51,
            52,
            65,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            79,
            80,
            81,
            83,
            84,
            85,
            86
          ],
          [
            "        names.append(disclosure.other_designations)",
            "        summary = ''",
            "    elif len(names) > 2:",
            "        summary = \", \".join(names[:-1]) + \", and \" + names[-1]",
            "        rel.target.related = rel",
            "        rel.target.relation = rel.relationship.revname",
            "    docipr = {}",
            "    for o in IprDocRel.objects.filter(disclosure__state='posted').select_related('document'):",
            "        doc = o.document",
            "        name = doc.name",
            "        related_set = set(doc) | set(doc.all_related_that_doc(('obs', 'replaces')))",
            "        for related in related_set:",
            "            name = related.name",
            "            if name.startswith(\"rfc\"):",
            "                name = name.upper()",
            "            if not name in docipr:",
            "                docipr[name] = []",
            "            docipr[name].append(o.disclosure_id)",
            "    lines = [ \"# Machine-readable list of IPR disclosures by Internet-Draft name\" ]",
            "    for name, iprs in docipr.items():",
            "        lines.append(name + \"\\t\" + \"\\t\".join(str(ipr_id) for ipr_id in sorted(iprs)))",
            "    data = '\\n'.join(lines)",
            "    filename = '/a/ietfdata/derived/ipr_draft_recursive.txt'",
            "    with open(filename, 'w') as f:",
            "        f.write(data)"
          ]
        ],
        "ietf/ipr/views.py": [
          459,
          0.8758169934640523,
          [
            76,
            77,
            80,
            144,
            165,
            167,
            169,
            171,
            173,
            175,
            181,
            191,
            244,
            257,
            277,
            309,
            312,
            320,
            338,
            339,
            357,
            360,
            361,
            381,
            413,
            414,
            415,
            422,
            424,
            435,
            454,
            473,
            474,
            475,
            486,
            507,
            561,
            565,
            604,
            636,
            645,
            646,
            647,
            648,
            649,
            650,
            665,
            703,
            753,
            758,
            762,
            763,
            777,
            851,
            852,
            854,
            856
          ],
          [
            "        elif doc.type_id==\"rfc\":",
            "            doc_info = 'RFC entitled \"{}\" (RFC{})'.format(doc.title, doc.rfc_number)",
            "            return \"\"",
            "        title = title[:252] + \"...\"",
            "        rfcnum = \"Error!\"",
            "        rfcnum = \"RFC 1310\"",
            "        rfcnum = \"RFC 1802\"",
            "        rfcnum = \"RFC 2026\"",
            "        rfcnum = \"RFC 3668\"",
            "        rfcnum = \"RFC 3979\"",
            "        rfcnum = rfcnum + \" as updated by RFC 4879\"",
            "        objs = IprDisclosureBase.objects.none()",
            "            return redirect(\"ietf.ipr.views.history\", id=ipr.id)",
            "                type_id = 'msgout'",
            "        raise Http404",
            "            draft_formset = None",
            "            person = Person.objects.get(name=\"(System)\")",
            "            valid_formsets = True",
            "                for target in updates:",
            "                    RelatedIpr.objects.create(source=disclosure,target=target,relationship_id='updates')",
            "            patent_dict = {'patent_notes': initial.get('patent_info', '')}",
            "            initial.update({'updates':[ x.target for x in ipr.updates ]})",
            "            form = ipr_form_mapping[ipr.__class__.__name__](instance=ipr, initial=initial)",
            "            return redirect(\"ietf.ipr.views.show\", id=ipr.id)",
            "        reply_to = get_reply_to()",
            "        addrs = gather_address_lists('ipr_disclosure_followup',ipr=ipr).as_strings(compact=False)",
            "        initial = { ",
            "        form = MessageModelForm(initial=initial)",
            "    return render(request, \"ipr/email.html\",  {",
            "            raise Http404",
            "            name = name.upper()",
            "    with open('/a/ietfdata/derived/ipr_draft_recursive.txt') as f:",
            "        content = f.read()",
            "    return HttpResponse(content, content_type=\"text/plain; charset=%s\"%settings.DEFAULT_CHARSET)",
            "        pass",
            "            person = request.user.person",
            "                patent_dict = {'patent_notes': initial.get('patent_info', '')}",
            "            form = ipr_form_mapping[type]()",
            "            initial = [ {'type':'update_notify','text':escape(m)} for m in get_update_submitter_emails(ipr) ]",
            "        return HttpResponseBadRequest(\"Null characters are not allowed\")",
            "        if docname.startswith(\"draft-\"):",
            "            search_type = \"draft\"",
            "            q = docname",
            "        if docname.startswith(\"rfc\"):",
            "            search_type = \"rfc\"",
            "            q = docname",
            "            states = IprDisclosureStateName.objects.values_list('slug',flat=True)",
            "                    template = \"ipr/search_doc_result.html\"",
            "                raise Http404(\"Unexpected search type in IPR query: %s\" % search_type)",
            "                iprs = [ x.disclosure for x in iprs ]",
            "                iprs = sorted(iprs, key=lambda x: (x.time, x.id), reverse=True)",
            "                iprs = sorted(iprs, key=lambda x: x.state.order)",
            "        return HttpResponseRedirect(request.path)",
            "                if form.cleaned_data.get('private'):",
            "                    type_id = 'private_comment'",
            "                    type_id = 'comment'",
            "                IprEvent.objects.create("
          ]
        ],
        "ietf/liaisons/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/liaisons/feeds.py": [
          72,
          0.8194444444444444,
          [
            33,
            40,
            44,
            45,
            46,
            47,
            49,
            50,
            51,
            52,
            56,
            65,
            71
          ],
          [
            "                raise FeedDoesNotExist",
            "            except Group.DoesNotExist:",
            "                search_string = re.sub(r\"[^a-zA-Z1-9]\", \".\", search)",
            "                statement = LiaisonStatement.objects.filter(from_groups__name__iregex=search_string).first()",
            "                if not statement:",
            "                    raise FeedDoesNotExist",
            "                name = statement.from_groups.first().name",
            "                obj['filter'] = { 'from_name': name }",
            "                obj['title'] = 'Liaison Statements from %s' % name",
            "                return obj",
            "                raise FeedDoesNotExist",
            "                raise FeedDoesNotExist",
            "        raise FeedDoesNotExist"
          ]
        ],
        "ietf/liaisons/fields.py": [
          25,
          0.8,
          [
            25,
            35,
            36,
            37,
            46
          ],
          [
            "    return json.dumps([{ \"id\": o.pk, \"text\": escape(o.acronym) } for o in objs])",
            "        for pk in pks:",
            "            if not pk.isdigit():",
            "                raise forms.ValidationError(\"Unexpected value: %s\" % pk)",
            "        return \"Could not recognize the following groups: {pks}.\".format(pks=\", \".join(failed_pks))"
          ]
        ],
        "ietf/liaisons/forms.py": [
          346,
          0.9132947976878613,
          [
            52,
            103,
            109,
            120,
            121,
            172,
            178,
            179,
            180,
            182,
            193,
            195,
            211,
            264,
            270,
            279,
            280,
            320,
            321,
            325,
            361,
            409,
            422,
            537,
            542,
            543,
            552,
            553,
            556,
            557
          ],
          [
            "    return Group.objects.filter(type=\"sdo\", state=\"active\", role__person=person, role__name=\"liaiman\").distinct()",
            "    return None",
            "        value = value.replace('\\r\\n',',')",
            "        except UnicodeEncodeError as e:",
            "            raise forms.ValidationError('Invalid email address: %s (check character %d)' % (addr,e.start))",
            "                    results = results.filter(Q(from_groups__acronym__in=source_list))",
            "                destination_list = destination.split(',')",
            "                if len(destination_list) > 1:",
            "                    results = results.filter(Q(to_groups__acronym__in=destination_list))",
            "                    results = results.filter(Q(to_groups__name__icontains=destination) | Q(to_groups__acronym__iexact=destination))",
            "                    events = events.filter(time__lte=datetime_from_date(end_date, DEADLINE_TZINFO))",
            "                events = LiaisonStatementEvent.objects.filter(type='posted', time__lte=end_date)",
            "            return [super(CustomModelMultipleChoiceField, self).prepare_value(v) for v in value]",
            "            raise forms.ValidationError('You must specify a From Group')",
            "            raise forms.ValidationError('You must specify a To Group')",
            "                email.origin = \"liaison: %s\" % (','.join([ g.acronym for g in from_groups.all() ]))",
            "                email.save()",
            "            if key.startswith('attach_file_') and key.replace('file', 'title') in list(self.data.keys()):",
            "                return True",
            "        assert NotImplemented",
            "                continue",
            "        assert NotImplemented",
            "        assert NotImplemented",
            "            self.fields['from_groups'].choices = get_internal_choices(self.user)",
            "                queryset = Group.objects.filter(type=\"sdo\", role__person=self.person, role__name__in=(\"liaiman\", \"auth\")).distinct().order_by('name')",
            "                self.fields['from_contact'].widget.attrs['disabled'] = True",
            "            if has_role(self.user, \"Liaison Manager\") and not self.person.role_set.filter(name__in=('ad','chair'),group__state='active'):",
            "                queryset = Group.objects.filter(type=\"sdo\", role__person=self.person, role__name=\"liaiman\").distinct().order_by('name')",
            "                queryset = Group.objects.filter(type=\"sdo\").order_by('name')",
            "            self.fields['to_groups'].queryset = queryset"
          ]
        ],
        "ietf/liaisons/mails.py": [
          47,
          0.9361702127659575,
          [
            36,
            69,
            70
          ],
          [
            "        return None",
            "        subject = '[Liaison OUT OF DATE] %s' % liaison.title",
            "        days_msg = 'is out of date for %s days' % (-days_to_go)"
          ]
        ],
        "ietf/liaisons/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/liaisons/models.py": [
          151,
          0.8940397350993378,
          [
            88,
            92,
            125,
            135,
            145,
            146,
            147,
            178,
            179,
            185,
            186,
            198,
            199,
            208,
            217,
            228
          ],
          [
            "            frm = self.from_contact.person.name",
            "            to = self.to_contacts",
            "            return event.time",
            "            return bool(self.prefetched_tags)",
            "        if getattr(self, '_awaiting_action', None) != None:",
            "            return bool(self._awaiting_action)",
            "        return self.tags.filter(slug='awaiting').exists()",
            "        groups = self.to_groups.order_by('acronym').values_list('acronym',flat=True)",
            "        return ', '.join(groups)",
            "        except LiaisonStatementState.DoesNotExist:",
            "            return",
            "            for group in self.from_groups.all():",
            "                approval_set.intersection_update(group.liaison_approvers())",
            "        return self.document.name",
            "        return \"%s %s %s\" % (self.source.title, self.relationship.name.lower(), self.target.title)",
            "        return \"%s %s by %s at %s\" % (self.statement.title, self.type.slug, self.by.plain_name(), self.time)"
          ]
        ],
        "ietf/liaisons/resources.py": [
          62,
          1,
          [],
          []
        ],
        "ietf/liaisons/sitemaps.py": [
          10,
          1,
          [],
          []
        ],
        "ietf/liaisons/urls.py": [
          6,
          1,
          [],
          []
        ],
        "ietf/liaisons/utils.py": [
          47,
          0.8936170212765957,
          [
            17,
            43,
            49,
            53,
            76
          ],
          [
            "        return liaisons",
            "        return True",
            "                return False",
            "    return False",
            "    return True"
          ]
        ],
        "ietf/liaisons/views.py": [
          340,
          0.8647058823529412,
          [
            49,
            63,
            69,
            70,
            72,
            74,
            75,
            76,
            77,
            78,
            79,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            180,
            199,
            200,
            202,
            231,
            232,
            233,
            234,
            242,
            243,
            245,
            263,
            286,
            344,
            414,
            415,
            492,
            493,
            494,
            513,
            514,
            516,
            517,
            519,
            521,
            554
          ],
          [
            "            return True",
            "            return _find_person_in_emails(liaison, get_person_for_user(user))",
            "    if not person:",
            "        return False",
            "    emails = ','.join(e for e in [liaison.response_contacts, liaison.cc_contacts,",
            "    for email in emails.split(','):",
            "        name, addr = parseaddr(email)",
            "        try:",
            "            validate_email(addr)",
            "        except ValidationError:",
            "            continue",
            "        if person.email_set.filter(address=addr):",
            "            return True",
            "        elif addr in ('chair@ietf.org', 'iesg@ietf.org') and has_role(person.user, \"IETF Chair\"):",
            "            return True",
            "        elif addr in ('iab@iab.org', 'iab-chair@iab.org') and has_role(person.user, \"IAB Chair\"):",
            "            return True",
            "        elif addr in ('execd@iab.org', ) and has_role(person.user, \"IAB Executive Director\"):",
            "            return True",
            "    return False",
            "    return True",
            "    if group.type_id == 'sdo' and ( not(has_role(person.user,\"Secretariat\") or group.role_set.filter(name='auth',person=person)) ):",
            "        return True",
            "        return False",
            "        cc.extend(get_cc(group))",
            "        does_need_approval.append(needs_approval(group,person))",
            "        can_post_only.append(post_only(group,person))",
            "        response_contacts.append(get_contacts_for_group(group))",
            "        if  any(does_need_approval):",
            "            does_need_approval = True",
            "            does_need_approval = False",
            "        objs = LiaisonStatement.objects.none()",
            "        return redirect('ietf.liaisons.views.liaison_add', type='incoming')",
            "                messages.success(request, 'The statement has been updated')",
            "            liaison.change_state(state_id='pending',person=person)",
            "            messages.success(request,'Liaison Statement Resurrected')",
            "        value = request.GET.get('tags')",
            "        liaisons = liaisons.filter(tags__slug=value)",
            "        selected_menu_entry = 'action needed'",
            "        liaisons = sorted(liaisons, key=lambda a: a.sort_date, reverse=True)",
            "        liaisons = sorted(liaisons, key=lambda a: a.from_groups_display.lower())",
            "        liaisons = sorted(liaisons, key=lambda a: a.sort_date, reverse=True)",
            "        liaisons = sorted(liaisons, key=lambda a: a.to_groups_display.lower())",
            "        liaisons = liaisons.order_by('-deadline')",
            "        liaisons = liaisons.order_by('title')",
            "        reply_type = 'incoming'"
          ]
        ],
        "ietf/liaisons/widgets.py": [
          36,
          0.8611111111111112,
          [
            39,
            40,
            41,
            42,
            43
          ],
          [
            "            for attachment in value:",
            "                html += '<a class=\"initialAttach\" href=\"%s\">%s</a>&nbsp' % (conditional_escape(attachment.document.get_href()), conditional_escape(attachment.document.title))",
            "                html += '<a class=\"btn btn-primary btn-sm\" href=\"{}\">Edit</a>&nbsp'.format(urlreverse(\"ietf.liaisons.views.liaison_edit_attachment\", kwargs={'object_id':attachment.statement.pk,'doc_id':attachment.document.pk}))",
            "                html += '<a class=\"btn btn-primary btn-sm\" href=\"{}\">Delete</a>&nbsp'.format(urlreverse(\"ietf.liaisons.views.liaison_delete_attachment\", kwargs={'object_id':attachment.statement.pk,'attach_id':attachment.pk}))",
            "                html += '<br>'"
          ]
        ],
        "ietf/mailinglists/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/mailinglists/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/mailinglists/models.py": [
          29,
          0.896551724137931,
          [
            18,
            27,
            36
          ],
          [
            "        return \"<List: %s>\" % self.name",
            "        return \"<Subscribed: %s at %s>\" % (self.email, self.time)",
            "        return \"<Allowlisted: %s at %s>\" % (self.email, self.time)"
          ]
        ],
        "ietf/mailinglists/resources.py": [
          34,
          1,
          [],
          []
        ],
        "ietf/mailinglists/urls.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/mailinglists/views.py": [
          18,
          0.9444444444444444,
          [
            27
          ],
          [
            "            wg_lists.add(match.group('name').lower())"
          ]
        ],
        "ietf/mailtrigger/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/mailtrigger/forms.py": [
          21,
          0.9523809523809524,
          [
            37
          ],
          [
            "            raise forms.ValidationError('Cannot get selected addresses from an invalid form.')"
          ]
        ],
        "ietf/mailtrigger/models.py": [
          334,
          0.9550898203592815,
          [
            29,
            46,
            57,
            176,
            203,
            236,
            237,
            322,
            343,
            344,
            364,
            365,
            367,
            426,
            428
          ],
          [
            "            addresses.append(a)",
            "        return self.slug",
            "        return self.slug",
            "                addrs.extend(Recipient.objects.get(slug='iab').gather(**{}))",
            "        return []",
            "                    if submitter and submitter.email():",
            "                        addrs.extend([\"%s <%s>\" % (submitter.name, submitter.email().address)])",
            "                addrs.extend(Recipient.objects.get(slug='rfc_editor').gather(**{}))",
            "                elif hasattr(rel.target,'ietfer_email') and rel.target.ietfer_email:",
            "                    addrs.append(rel.target.ietfer_email)",
            "                if doc.ad and doc.get_state_slug('draft')=='active':",
            "                    addrs.extend(Recipient.objects.get(slug='doc_ad').gather(**kwargs))",
            "                    pass",
            "            previous_responsible = kwargs['previous_responsible']",
            "            addrs = [p.email_address() for p in previous_responsible]"
          ]
        ],
        "ietf/mailtrigger/resources.py": [
          21,
          1,
          [],
          []
        ],
        "ietf/mailtrigger/test_utils.py": [
          28,
          1,
          [],
          []
        ],
        "ietf/mailtrigger/urls.py": [
          5,
          1,
          [],
          []
        ],
        "ietf/mailtrigger/utils.py": [
          88,
          0.9204545454545454,
          [
            91,
            111,
            118,
            121,
            123,
            126,
            142
          ],
          [
            "            relevant.update(",
            "                relevant.update([\"pubreq_rfced\"])",
            "                kwargs[\"submission\"] = last_submission",
            "            relevant.update([\"conflrev_requested\", \"ballot_approved_conflrev\"])",
            "            relevant.update([\"charter_external_review\", \"ballot_approved_charter\"])",
            "            relevant.update(starts_with(\"bofreq\"))",
            "        relevant.update(starts_with(\"sub_\"))"
          ]
        ],
        "ietf/mailtrigger/views.py": [
          19,
          1,
          [],
          []
        ],
        "ietf/meeting/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/meeting/feeds.py": [
          31,
          1,
          [],
          []
        ],
        "ietf/meeting/fields.py": [
          63,
          0.8253968253968255,
          [
            39,
            47,
            60,
            61,
            63,
            85,
            87,
            97,
            106,
            118,
            123
          ],
          [
            "        return self.widgets[0].choices",
            "        return self.widgets[1].choices",
            "        if value:",
            "            return [getattr(val, 'pk', val) for val in value]",
            "            return [None, None]",
            "            purpose_queryset = SessionPurposeName.objects.none()",
            "            type_queryset = TimeSlotTypeName.objects.none()",
            "        return self.fields[0].queryset",
            "        return self.fields[1].queryset",
            "        return None",
            "            raise forms.ValidationError("
          ]
        ],
        "ietf/meeting/forms.py": [
          475,
          0.9705263157894737,
          [
            96,
            164,
            175,
            181,
            284,
            292,
            297,
            299,
            307,
            355,
            437,
            494,
            641,
            802
          ],
          [
            "                return",
            "                self.fields['in_person'].initial = True",
            "            raise forms.ValidationError(\"You must select a group\")",
            "            return False",
            "            raise forms.ValidationError('Required field')",
            "            raise forms.ValidationError('Provide a duration, %s-%smin.' % (min_minutes, max_minutes))",
            "            self.cleaned_data['remote_instructions'] = ''  # blank this out if we're creating a Meetecho conference",
            "            self.add_error('remote_instructions', 'This field is required')",
            "            data.remove('remote_participation')",
            "            os.makedirs(directory)",
            "                    raise ValidationError('Upload Content-Type (%s) does not match the extension (%s)' % (file.content_type, ext))",
            "                raise forms.ValidationError(\"Interim slides currently may not have a title that ends with something that looks like a revision number (-nn)\")",
            "            raise ValidationError('Enter a valid date or leave field blank.')",
            "            queryset = queryset.none()"
          ]
        ],
        "ietf/meeting/helpers.py": [
          629,
          0.8982511923688395,
          [
            73,
            144,
            174,
            195,
            382,
            497,
            541,
            542,
            543,
            545,
            546,
            629,
            647,
            661,
            662,
            663,
            665,
            666,
            667,
            668,
            669,
            670,
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680,
            681,
            682,
            683,
            684,
            685,
            686,
            687,
            688,
            690,
            691,
            692,
            693,
            694,
            695,
            696,
            697,
            712,
            731,
            737,
            743,
            745,
            746,
            753,
            758,
            763,
            777,
            817,
            826,
            916,
            1013,
            1062,
            1194
          ],
          [
            "        schedule = get_object_or_404(meeting.schedule_set, name=name)",
            "            a.session.rescheduled_to = timeslot_by_session_pk.get(a.session.tombstone_for_id)",
            "            raise RuntimeError('Exactly one of assignments or sessions must be specified')",
            "            return s.group_parent_at_the_time()",
            "            sessions = [a.session for a in self.assignments]",
            "            return self.special_group_labels[label]",
            "        if self.assignments is not None:",
            "            for a in self.assignments:",
            "                a.session_keyword = self.filter_keyword_for_specific_session(a.session)",
            "            for s in self.sessions:",
            "                s.session_keyword = self.filter_keyword_for_specific_session(s)",
            "            return None",
            "        return None, path",
            "    t,tempname = mkstemp()",
            "    os.close(t)",
            "    tempfile = io.open(tempname, \"w\")",
            "    pageend = 0;",
            "    newpage = 0;",
            "    formfeed = 0;",
            "    for line in infile:",
            "        line = re.sub(\"\\r\",\"\",line)",
            "        line = re.sub(\"[ \\t]+$\",\"\",line)",
            "        if re.search(r\"\\[?[Pp]age [0-9ivx]+\\]?[ \\t]*$\",line):",
            "            pageend=1",
            "            tempfile.write(line)",
            "            continue",
            "        if re.search(\"^[ \\t]*\\f\",line):",
            "            formfeed=1",
            "            tempfile.write(line)",
            "            continue",
            "        if re.search(\"^ *INTERNET.DRAFT.+[0-9]+ *$\",line) or re.search(\"^ *Internet.Draft.+[0-9]+ *$\",line) or re.search(\"^draft-[-a-z0-9_.]+.*[0-9][0-9][0-9][0-9]$\",line) or re.search(\"^RFC.+[0-9]+$\",line):",
            "            newpage=1",
            "        if re.search(\"^[ \\t]*$\",line) and pageend and not newpage:",
            "            continue",
            "        if pageend and newpage and not formfeed:",
            "            tempfile.write(\"\\f\")",
            "        pageend=0",
            "        formfeed=0",
            "        newpage=0",
            "        tempfile.write(line)",
            "    infile.close()",
            "    tempfile.close()",
            "    t,psname = mkstemp()",
            "    os.close(t)",
            "    pipe(\"enscript --margins 76::76: -B -q -p \"+psname + \" \" +tempname)",
            "    os.unlink(tempname)",
            "    pipe(\"ps2pdf \"+psname+\" \"+outpath)",
            "    os.unlink(psname)",
            "        cansee = True",
            "        return False",
            "        return False",
            "        return True",
            "        if person.role_set.filter(group__acronym='iab', name='member'):",
            "            return True",
            "        return False",
            "        return False",
            "        return True",
            "        return False",
            "        desc = 'Interim'",
            "        type = 'BOF'",
            "        is_series = True",
            "        description = '\"%s\" session' % session.name",
            "            continue",
            "            ImportantDate.objects.create(meeting=meeting, name=datename, date=date)"
          ]
        ],
        "ietf/meeting/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/meeting/models.py": [
          828,
          0.8816425120772946,
          [
            179,
            199,
            220,
            317,
            370,
            371,
            372,
            436,
            461,
            462,
            463,
            466,
            467,
            468,
            469,
            478,
            484,
            488,
            492,
            494,
            496,
            498,
            500,
            501,
            502,
            503,
            504,
            505,
            506,
            509,
            510,
            512,
            513,
            515,
            516,
            547,
            605,
            618,
            620,
            741,
            774,
            779,
            783,
            794,
            795,
            817,
            851,
            854,
            923,
            927,
            929,
            931,
            932,
            935,
            936,
            937,
            938,
            953,
            1138,
            1147,
            1150,
            1151,
            1152,
            1153,
            1154,
            1157,
            1158,
            1159,
            1160,
            1161,
            1164,
            1165,
            1166,
            1167,
            1168,
            1217,
            1230,
            1233,
            1237,
            1238,
            1240,
            1254,
            1262,
            1277,
            1278,
            1279,
            1280,
            1282,
            1287,
            1288,
            1290,
            1291,
            1292,
            1295,
            1297,
            1376,
            1386,
            1487
          ],
          [
            "        return self.get_00_cutoff()",
            "            return importantdate.date",
            "        return self.schedule_set.filter(name=name).first()",
            "                continue",
            "        if self.schedule != schedule:",
            "            self.schedule = schedule",
            "            self.save()",
            "        return self.desc",
            "        for ts in self.timeslot_set.all():",
            "            ts.sessionassignments.all().delete()",
            "            ts.delete()",
            "        days, time_slices, slots  = self.meeting.build_timeslices()",
            "        for day in days:",
            "            for ts in slots[day]:",
            "                TimeSlot.objects.create(type_id=ts.type_id,",
            "        return \"room%u\" % (self.pk)",
            "            return None",
            "            return None",
            "        return min(self.x1, self.x2) if (self.x1 and self.x2) else 0",
            "        return min(self.y1, self.y2) if (self.y1 and self.y2) else 0",
            "        return max(self.x1, self.x2) if (self.x1 and self.x2) else 0",
            "        return max(self.y1, self.y2) if (self.y1 and self.y2) else 0",
            "        if not self.functional_name:",
            "            return \"\"",
            "        if 'breakout' in self.functional_name.lower():",
            "            return \"\"",
            "        if self.functional_name[0].isdigit():",
            "            return \"\"",
            "        return self.functional_name",
            "        urlresources = [ur for ur in self.urlresource_set.all() if ur.name_id == 'audiostream']",
            "        return urlresources[0].url if urlresources else None",
            "        urlresources = [ur for ur in self.urlresource_set.all() if ur.name_id in ['meetecho']]",
            "        return urlresources[0].url if urlresources else None",
            "        urlresources = [ur for ur in self.urlresource_set.all() if ur.name_id in ['meetecho_onsite']]",
            "        return urlresources[0].url if urlresources else None",
            "        return u'floorplan-%s-%s' % (self.meeting.number, xslugify(self.name))",
            "            location = u\"(no location)\"",
            "                location = self.meeting.reg_area",
            "                location = self.meeting.break_area",
            "        return \"/meeting/%s/agenda/%s/%s\" % (self.meeting.number, self.owner_email(), self.name)",
            "            return \"official\"",
            "        self.assignments.all().delete()",
            "        return self.assignments.filter(session__isnull=False)",
            "        self.assignments.all().delete()",
            "        self.delete()",
            "        return u\"%s [%s<->%s]\" % (self.schedule, self.session, self.timeslot)",
            "            components.append(\"unknown\")",
            "            components.append(\"unknown\")",
            "        return u\"%s %s target=%s person=%s\" % (self.source, self.name.name.lower(), self.target, self.person)",
            "            return \"Adjacent with %s\" % self.target.acronym",
            "            return self.get_time_relation_display()",
            "            timeranges_str = \", \".join([t.desc for t in self.timeranges.all()])",
            "            return \"Can't meet %s\" % timeranges_str",
            "        elif self.target and not self.person:",
            "            return \"%s \" % (self.target.acronym)",
            "        elif not self.target and self.person:",
            "            return \"%s \" % (self.person)",
            "        return u\"%s -> %s-%s\" % (self.session, self.document.name, self.rev)",
            "            return [self]",
            "        return set(s.current_status for s in self.all_meeting_sessions_for_group()) == {'canceled'}",
            "        recordings = [] # These are not sets because we need to preserve relative ordering or redo the ordering work later",
            "        sessions = self.all_meeting_sessions_for_group()",
            "        for session in sessions:",
            "            recordings.extend([r for r in session.recordings() if r not in recordings])",
            "        return recordings",
            "        bluesheets = []",
            "        sessions = self.all_meeting_sessions_for_group()",
            "        for session in sessions:",
            "            bluesheets.extend([b for b in session.bluesheets() if b not in bluesheets])",
            "        return bluesheets",
            "        drafts = []",
            "        sessions = self.all_meeting_sessions_for_group()",
            "        for session in sessions:",
            "            drafts.extend([d for d in session.drafts() if d not in drafts])",
            "        return drafts",
            "            ss0name = \"(%s)\" % SessionStatusName.objects.get(slug=status_id).name",
            "            return self.short",
            "        return \"req#%u\" % (id)",
            "        if self.comments is not None and len(self.comments)>0:",
            "            return \"*\"",
            "            return \"\"",
            "                token = 'sess%s%s' % (string.ascii_lowercase[index//26],string.ascii_lowercase[index%26])",
            "        return Constraint.objects.filter(target=self.group, meeting=self.meeting).order_by('name__name')",
            "            path = os.path.join(settings.AGENDA_PATH, self.meeting.number, \"agenda\", doc.uploaded_filename)",
            "            if os.path.exists(path):",
            "                with io.open(path) as f:",
            "                    return f.read()",
            "                return \"No agenda file found\"",
            "        if not hasattr(self, '_agenda_file'):",
            "            self._agenda_file = \"\"",
            "            agenda = self.agenda()",
            "            if not agenda:",
            "                return \"\"",
            "            self._agenda_file = \"%s/agenda/%s\" % (self.meeting.number, agenda.uploaded_filename)",
            "        return self._agenda_file",
            "        return u'%s : %s : %s : %s' % (self.session, self.status, self.time, self.by)",
            "        return u'%s : %s : %s' % ( self.meeting, self.name, self.date )",
            "        return f'{self.person} at {self.session}'"
          ]
        ],
        "ietf/meeting/resources.py": [
          225,
          1,
          [],
          []
        ],
        "ietf/meeting/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/meeting/templatetags/agenda_custom_tags.py": [
          92,
          0.6086956521739131,
          [
            17,
            25,
            32,
            33,
            34,
            35,
            36,
            41,
            48,
            50,
            51,
            52,
            53,
            54,
            58,
            59,
            61,
            62,
            67,
            76,
            92,
            105,
            106,
            110,
            111,
            112,
            113,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            149,
            150
          ],
          [
            "    return ''",
            "    return 0",
            "    invalid = [\"!\",\"\\\"\", \"#\",\"$\",\"%\",\"&\",\"'\",\"(\",\")\",\"*\",\"+\",\",\",\".\",\"/\",\":\",\";\",\"<\",\"=\",\">\",\"?\",\"@\",\"[\",\"\\\\\",\"]\",\"^\",\"`\",\"{\",\"|\",\"}\",\"~\",\" \"]",
            "    out = str(inp)",
            "    for i in invalid:",
            "        out = out.replace(i,'_')",
            "    return out",
            "    return \"%.1f\" % (float(inp)/3600)",
            "    method = getattr(obj, methodName)",
            "    if \"__callArg\" in obj.__dict__:",
            "        ret = method(*obj.__callArg)",
            "        del obj.__callArg",
            "        return ret",
            "    return method()",
            "    if \"__callArg\" not in obj.__dict__:",
            "        obj.__callArg = []",
            "    obj.__callArg += [arg]",
            "    return obj",
            "    return 'webcal://{}{}'.format(",
            "        return assignment.session.group_at_the_time().name",
            "        raise NotImplementedError('Subclasses must define this method')",
            "        super().__init__(*args, **kwargs)",
            "        self.session = template.Variable(session)",
            "        agenda = sess.agenda()",
            "        if agenda:",
            "            return agenda.get_href()",
            "        return None",
            "    try:",
            "        tag_name, sess_var = token.split_contents()",
            "    except ValueError:",
            "        raise template.TemplateSyntaxError('agenda_anchor requires a single argument')",
            "    nodelist = parser.parse(('end_agenda_anchor',))",
            "    parser.delete_first_token()  # delete the end tag",
            "    return AgendaAnchorNode(sess_var, nodelist)",
            "    except ValueError:",
            "        raise template.TemplateSyntaxError('location_anchor requires a single argument')"
          ]
        ],
        "ietf/meeting/templatetags/editor_tags.py": [
          14,
          1,
          [],
          []
        ],
        "ietf/meeting/templatetags/meetings_filters.py": [
          8,
          1,
          [],
          []
        ],
        "ietf/meeting/templatetags/proceedings_filters.py": [
          16,
          0.875,
          [
            14,
            21
          ],
          [
            "           hacked_title += ' '+recording.sessionpresentation_set.first().session.official_timeslotassignment().timeslot.time.strftime(\"%a %H:%M\")",
            "    return group.status_for_meeting(meeting)"
          ]
        ],
        "ietf/meeting/templatetags/session_filters.py": [
          32,
          0.875,
          [
            13,
            30,
            34,
            41
          ],
          [
            "        return \"Document not in session\"",
            "        return \"\"",
            "        status_id = session.current_status",
            "        ss0name = \"(%s)\" % SessionStatusName.objects.get(slug=status_id).name"
          ]
        ],
        "ietf/meeting/test_data.py": [
          133,
          1,
          [],
          []
        ],
        "ietf/meeting/urls.py": [
          15,
          0.8666666666666667,
          [
            13,
            14
          ],
          [
            "        kwargs = {k: v for k, v in kwargs.items() if v is not None and k not in self.ignore_kwargs}",
            "        return super().get_redirect_url(*args, **kwargs)"
          ]
        ],
        "ietf/meeting/utils.py": [
          486,
          0.8950617283950618,
          [
            39,
            49,
            56,
            63,
            154,
            172,
            173,
            174,
            175,
            176,
            177,
            318,
            369,
            371,
            377,
            389,
            535,
            589,
            590,
            601,
            602,
            603,
            649,
            655,
            656,
            657,
            658,
            674,
            675,
            676,
            677,
            698,
            706,
            712,
            713,
            745,
            775,
            776,
            777,
            863,
            864,
            865,
            866,
            867,
            868,
            869,
            870,
            872,
            873,
            875,
            882
          ],
          [
            "        return session.meeting.tz().localize(",
            "            return pytz.utc.localize(datetime.datetime.min)",
            "    return None",
            "    return None",
            "                sp.rev = rev_before_end[-1].newrevisiondocevent.rev",
            "                qlist = keys[1].split('=', 1)",
            "                if len(qlist) == 2:",
            "                    try:",
            "                        q = float(qlist[1])",
            "                    except ValueError:",
            "                        q = 0.0",
            "        responsible_ad_for_group[group_id] = pk",
            "            return c.get_time_relation_display()",
            "            return \", \".join(t.desc for t in c.timeranges.all())",
            "            return \"UNKNOWN\"",
            "            formatted_constraints_for_sessions[s.pk][joint_with_groups_constraint_name] = [g.acronym for g in joint_groups]",
            "        sessions = Session.objects.filter(",
            "            doc = Document.objects.get(name=name)",
            "            doc.rev = '%02d' % (int(doc.rev)+1)",
            "            sp = session.sessionpresentation_set.get(document=doc)",
            "            sp.rev = doc.rev",
            "            sp.save()",
            "        path = path / filename.stem",
            "            try:",
            "                f.unlink()",
            "            except FileNotFoundError:",
            "                pass  # if the file is already gone, so be it",
            "                try:",
            "                    text = smart_str(text)",
            "                except UnicodeDecodeError as e:",
            "                    return \"Failure trying to save '%s'. Hint: Try to upload as UTF-8: %s...\" % (filename, str(e)[:120])",
            "        subprocess.call(['unzip', filename], cwd=path)",
            "        return None",
            "        name = f\"{typename.prefix}-{session.meeting.number}-{sess_time.strftime('%Y%m%d%H%M')}\"",
            "        title = f\"{typename.name} {session.meeting.number}: {sess_time.strftime('%a %H:%M')}\"",
            "            title = 'Video recording for {}'.format(time)",
            "    docs = docs.order_by('name')",
            "    sequence = int(docs.last().name.split('-')[-1]) + 1",
            "    return sequence",
            "        try:",
            "            cmd = list(settings.SECR_PPT2PDF_COMMAND)   # Don't operate on the list actually in settings",
            "            cmd.append(doc.get_file_path())                                 # outdir",
            "            cmd.append(os.path.join(doc.get_file_path(), doc.uploaded_filename))  # filename",
            "            subprocess.check_call(cmd)",
            "        except (subprocess.CalledProcessError, OSError) as error:",
            "            log(\"Error converting PPT: %s\" % (error))",
            "            return",
            "        base, ext = os.path.splitext(doc.uploaded_filename)",
            "        doc.uploaded_filename = base + '.pdf'",
            "        e = DocEvent.objects.create(",
            "        doc.save_with_history([e])"
          ]
        ],
        "ietf/meeting/views.py": [
          2693,
          0.90976606015596,
          [
            138,
            140,
            141,
            143,
            144,
            261,
            262,
            263,
            270,
            398,
            399,
            419,
            489,
            500,
            509,
            520,
            536,
            582,
            583,
            666,
            859,
            880,
            908,
            914,
            1100,
            1104,
            1107,
            1109,
            1112,
            1120,
            1127,
            1134,
            1139,
            1152,
            1199,
            1229,
            1265,
            1284,
            1343,
            1400,
            1407,
            1415,
            1452,
            1457,
            1461,
            1488,
            1535,
            1558,
            1566,
            1568,
            1576,
            1577,
            1627,
            1650,
            1652,
            1701,
            1792,
            1793,
            1794,
            1795,
            1797,
            1808,
            1820,
            1885,
            1886,
            1887,
            1888,
            1889,
            1890,
            1891,
            1938,
            1939,
            1952,
            1959,
            1960,
            1986,
            1987,
            1988,
            1989,
            1990,
            2001,
            2002,
            2003,
            2004,
            2005,
            2006,
            2008,
            2009,
            2010,
            2011,
            2013,
            2014,
            2015,
            2016,
            2017,
            2019,
            2020,
            2021,
            2022,
            2023,
            2024,
            2026,
            2027,
            2028,
            2030,
            2031,
            2032,
            2038,
            2039,
            2040,
            2041,
            2042,
            2046,
            2104,
            2115,
            2116,
            2175,
            2185,
            2187,
            2281,
            2311,
            2312,
            2406,
            2415,
            2420,
            2421,
            2422,
            2423,
            2425,
            2426,
            2427,
            2529,
            2544,
            2549,
            2614,
            2672,
            2715,
            2716,
            2765,
            2778,
            2803,
            2806,
            2807,
            2808,
            2837,
            2861,
            2867,
            2877,
            2886,
            2928,
            3019,
            3025,
            3026,
            3033,
            3034,
            3061,
            3065,
            3066,
            3067,
            3069,
            3070,
            3071,
            3077,
            3079,
            3081,
            3082,
            3083,
            3084,
            3106,
            3109,
            3270,
            3283,
            3287,
            3339,
            3341,
            3388,
            3389,
            3391,
            3600,
            3601,
            3740,
            3750,
            3833,
            3844,
            3847,
            3855,
            3858,
            3873,
            3874,
            3875,
            3876,
            3877,
            3888,
            3891,
            3895,
            3896,
            3905,
            3908,
            3918,
            3965,
            3966,
            3967,
            3969,
            3970,
            4036,
            4055,
            4056,
            4085,
            4086,
            4097,
            4098,
            4099,
            4100,
            4104,
            4125,
            4126,
            4137,
            4138,
            4139,
            4140,
            4144,
            4193,
            4194,
            4208,
            4265,
            4267,
            4278,
            4290,
            4314,
            4333,
            4515,
            4517,
            4536,
            4598,
            4599,
            4605,
            4646,
            4648,
            4653,
            4663,
            4664,
            4668,
            4669
          ],
          [
            "        pass",
            "        if meeting.number.isdigit() and int(meeting.number) > 96:",
            "            return redirect('ietf.meeting.views.proceedings', num=meeting.number)",
            "            with timezone.override(meeting.tz()):",
            "                return render(request, \"meeting/materials_upload_closed.html\", {",
            "        if not filename.endswith(ext):",
            "            name, _ = os.path.splitext(filename)",
            "            filename = name + ext",
            "        raise Http404(\"File not found: %s\" % filename)",
            "            name_suggestion = username + str(counter)",
            "            counter += 1",
            "            raise forms.ValidationError(\"Schedule with this name already exists.\")",
            "            permission_denied(request, \"Can't view this schedule.\")",
            "        include_timeslot_types = request.GET.getlist('type')",
            "        assignments = assignments.filter(session__type__in=include_timeslot_types)",
            "        sessions = sessions.filter(type__in=include_timeslot_types)",
            "        timeslots_qs = timeslots_qs.filter(type__in=include_timeslot_types)",
            "                s.scheduling_label = s.name if s.name else '???'",
            "                s.purpose_label = s.purpose.name",
            "                continue",
            "                return HttpResponseBadRequest(\"Invalid swap: {}\".format(swap_days_form.errors))",
            "                return HttpResponseBadRequest(\"Invalid swap: {}\".format(swap_timeslots_form.errors))",
            "        return _json_response(False, error=\"Invalid parameters\")",
            "        rooms = meeting.room_set.filter(session_types__slug__in=include_timeslot_types)",
            "            self.cleaned_data['purpose'] = SessionPurposeName.objects.get(slug='open_meeting')",
            "                    self.cleaned_data['group'] = self.fields['group'].queryset.get(acronym='secretariat')",
            "                    self.add_error('group', 'When scheduling this type of timeslot, a group must be associated')",
            "                    self.add_error('short', 'When scheduling this type of timeslot, a short name is required')",
            "                self.add_error('type', \"Can't change type on timeslots for regular sessions when a session has been assigned\")",
            "                self.add_error('type', f'{ts_type} has no allowed purposes')",
            "            self.add_error('group', \"Can't change group after materials have been uploaded\")",
            "        schedule = meeting.schedule",
            "        raise Http404(\"No meeting information for meeting %s owner %s schedule %s available\" % (num, owner, name))",
            "                raise Http404",
            "                        Session.objects.filter(timeslotassignments__timeslot=timeslot).delete()",
            "                raise Http404",
            "                raise Http404",
            "                raise Http404",
            "                        continue",
            "        raise Http404(\"No agenda information for meeting %s owner %s schedule %s available\" % (num, owner, name))",
            "        permission_denied(request, \"You may not edit this schedule.\")",
            "                return HttpResponseRedirect(request.GET.get('next'))",
            "            s.changes_from_origin = len(diff_meeting_schedules(s.origin, s))",
            "            own_schedules.append(s)",
            "            other_private_schedules.append(s)",
            "            qs = qs.filter(Q(visible=True) | Q(owner__user=user))",
            "        raise Http404('No such scheduled session')",
            "        raise Http404('Extension not allowed')",
            "        raise Http404(\"No such full IETF meeting\")",
            "        return HttpResponseRedirect(f'{settings.PROCEEDINGS_V1_BASE_URL.format(meeting=meeting)}')",
            "        person   = get_person_by_email(owner)",
            "        schedule = get_schedule_by_name(meeting, person, name)",
            "        num = get_current_ietf_meeting_num()",
            "        raise Http404(\"No such full IETF meeting\")",
            "        return Http404(\"Pre-IETF 64 meetings are not available through this API\")",
            "        slides_actions.append({",
            "    try:",
            "        item.image.width",
            "    except FileNotFoundError:",
            "        return {}",
            "    return {",
            "    return {",
            "    return {",
            "            row.append(\"None\")",
            "            row.append(item.timeslot.location.name if item.timeslot.location else \"\")",
            "            row.append(\"\")",
            "            row.append(item.session.group_at_the_time().acronym)",
            "            row.append(item.session.group_parent_at_the_time().acronym.upper() if item.session.group_parent_at_the_time() else \"\")",
            "            row.append(item.session.name)",
            "            row.append(item.session.pk)",
            "    except Document.DoesNotExist:",
            "        raise Http404",
            "                doc_name = draft",
            "        except Document.DoesNotExist:",
            "            pass",
            "            try:",
            "                tarstream.add(pdf_path, str(doc_name + \".pdf\"))",
            "                manifest.write(\"Included:  \"+pdf_path+\"\\n\")",
            "            except Exception as e:",
            "                manifest.write((\"Failed (%s): \"%e)+pdf_path+\"\\n\")",
            "    drafts = session_draft_list(num, acronym);",
            "    curr_page = 1",
            "    pmh, pmn = mkstemp()",
            "    os.close(pmh)",
            "    pdfmarks = io.open(pmn, \"w\")",
            "    pdf_list = \"\"",
            "    for draft in drafts:",
            "        pdf_path = os.path.join(settings.INTERNET_DRAFT_PDF_PATH, draft + \".pdf\")",
            "        if not os.path.exists(pdf_path):",
            "            convert_draft_to_pdf(draft)",
            "        if os.path.exists(pdf_path):",
            "            pages = pdf_pages(pdf_path)",
            "            pdfmarks.write(\"[/Page \"+str(curr_page)+\" /View [/XYZ 0 792 1.0] /Title (\" + draft + \") /OUT pdfmark\\n\")",
            "            pdf_list = pdf_list + \" \" + pdf_path",
            "            curr_page = curr_page + pages",
            "    pdfmarks.close()",
            "    pdfh, pdfn = mkstemp()",
            "    os.close(pdfh)",
            "    gs = settings.GHOSTSCRIPT_COMMAND",
            "    code, out, err = pipe(gs + \" -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOutputFile=\" + pdfn + \" \" + pdf_list + \" \" + pmn)",
            "    assertion('code == 0')",
            "    pdf = io.open(pdfn,\"rb\")",
            "    pdf_contents = pdf.read()",
            "    pdf.close()",
            "    os.unlink(pmn)",
            "    os.unlink(pdfn)",
            "    return HttpResponse(pdf_contents, content_type=\"application/pdf\")",
            "        t = \"RESCHEDULED\"",
            "        if assignment.session.tombstone_for_id is not None:",
            "            other_assignment = SchedTimeSessAssignment.objects.filter(schedule=assignment.schedule_id, session=assignment.session.tombstone_for_id).first()",
            "            if other_assignment:",
            "                t = \"RESCHEDULED TO {}-{}\".format(",
            "        return t",
            "        raise Http404",
            "    except ValueError as e:",
            "        return HttpResponseBadRequest(str(e))",
            "                sessdict['is_bof'] = True",
            "            sessdict['short'] = asgn.session.short",
            "            sessdict['agenda_note'] = asgn.session.agenda_note",
            "        name = 'OTHER'",
            "        sorted_areas.remove('OTHER')",
            "        sorted_areas.append('OTHER')",
            "        raise Http404",
            "                session.times = [ x.timeslot.utc_start_time() for x in ss ]                ",
            "        elif meeting.type_id=='interim':",
            "            session.times = [ meeting.date ]",
            "            session.cancelled = session.current_status in Session.CANCELED_STATUSES",
            "            session.status = ''",
            "            session.times = []",
            "            session.cancelled = session.current_status in Session.CANCELED_STATUSES",
            "            session.status = status_names.get(session.current_status, session.current_status)",
            "        permission_denied(request, 'Restricted to role Secretariat')",
            "                return HttpResponseGone(\"Cannot receive uploads for an unscheduled session.  Please check the session ID.\", content_type=\"text/plain\")",
            "                form.add_error(None, save_error)",
            "        permission_denied(request, \"The materials cutoff for this session has passed. Contact the secretariat for further action.\")",
            "        permission_denied(request, \"The materials cutoff for this session has passed. Contact the secretariat for further action.\")",
            "                    doc = Document.objects.get(name=name)",
            "                    doc.rev = '%02d' % (int(doc.rev)+1)",
            "        permission_denied(request, \"The materials cutoff for this session has passed. Contact the secretariat for further action.\")",
            "            raise Http404",
            "                    name = 'slides-%s-%s' % (session.meeting.number, session.docname_token())",
            "                   doc = Document.objects.get(name=name)",
            "                   doc.rev = '%02d' % (int(doc.rev)+1)",
            "                   doc.title = form.cleaned_data['title']",
            "                form.add_error(None, save_error)",
            "        permission_denied(request, \"The materials cutoff for this session has passed. Contact the secretariat for further action.\")",
            "       session_number = 1 + sessions.index(session)",
            "                apply_to_all = form.cleaned_data['apply_to_all']",
            "                    name += '-%s' % (session.docname_token(),)",
            "        permission_denied(request, \"The materials cutoff for this session has passed. Contact the secretariat for further action.\")",
            "        return HttpResponse(json.dumps({ 'success' : False, 'error' : 'No data submitted or not POST' }),content_type='application/json')  ",
            "    except (ValueError, TypeError):",
            "        return HttpResponse(json.dumps({ 'success' : False, 'error' : 'Supplied index is not valid' }),content_type='application/json')",
            "    except (ValueError, TypeError):",
            "        return HttpResponse(json.dumps({ 'success' : False, 'error' : 'Supplied index is not valid' }),content_type='application/json')",
            "        raise Http404",
            "            schedule.public = True",
            "            schedule.visible = True",
            "            schedule.save()",
            "            schedule.base.public = True",
            "            schedule.base.visible = True",
            "            schedule.base.save()",
            "        messages.warning(request,\"This schedule will be made public as it is made official.\")",
            "        messages.warning(request,\"This schedule will be made visible as it is made official.\")",
            "        if not schedule.base.public:",
            "            messages.warning(request,\"The base schedule will be made public as it is made official.\")",
            "        if not schedule.base.visible:",
            "            messages.warning(request,\"The base schedule will be made visible as it is made official.\")",
            "        return HttpResponseForbidden('You may not delete a schedule serving as the base for other schedules')",
            "        permission_denied(request, \"You may not delete other user's schedules\")",
            "                        continue",
            "                    send_interim_approval_request(meetings=series)",
            "                        send_interim_announcement_request(meeting=meeting)",
            "        form = InterimCancelForm(initial={'group': group.acronym, 'date': meeting.date})",
            "    return render(request, \"meeting/interim_request_cancel.html\", {",
            "        session_time = session.official_timeslotassignment().timeslot.time",
            "        form = InterimCancelForm(initial={'group': group.acronym, 'date': session_time.date()})",
            "    return render(request, \"meeting/interim_request_cancel.html\", {",
            "    except ValueError as e:",
            "        return HttpResponseBadRequest(str(e))",
            "                not_meeting_groups.append(entry)",
            "        return HttpResponseRedirect(settings.PROCEEDINGS_V1_BASE_URL.format(meeting=meeting))",
            "        raise Http404",
            "        raise Http404",
            "        return HttpResponseRedirect( f'{settings.PROCEEDINGS_V1_BASE_URL.format(meeting=meeting)}/acknowledgement.html')",
            "        raise Http404",
            "        return HttpResponseRedirect(f'{settings.PROCEEDINGS_V1_BASE_URL.format(meeting=meeting)}/attendee.html')",
            "        overview_template = \"/meeting/proceedings/%s/attendees.html\" % meeting.number",
            "        try:",
            "            template = render_to_string(overview_template, {})",
            "        except TemplateDoesNotExist:",
            "            raise Http404",
            "        raise Http404",
            "        return HttpResponseRedirect(f'{settings.PROCEEDINGS_V1_BASE_URL.format(meeting=meeting)}/overview.html')",
            "    except TemplateDoesNotExist:",
            "        raise Http404",
            "        raise Http404",
            "        return HttpResponseRedirect(f'{settings.PROCEEDINGS_V1_BASE_URL.format(meeting=meeting)}/progress-report.html')",
            "        return reverse_lazy('ietf.meeting.views.session_details',kwargs=self.kwargs)",
            "        r = recordings[-1][-1]",
            "        if r.external_url != incoming_url:",
            "            e = DocEvent.objects.create(doc=r, rev=r.rev, type=\"added_comment\", by=request.user.person,",
            "            r.external_url = incoming_url",
            "            r.save_with_history([e])",
            "        return err(405, \"Method not allowed\")",
            "    except json.decoder.JSONDecodeError:",
            "        return err(400, \"Malformed post\") ",
            "    except json.decoder.JSONDecodeError:",
            "        return err(400, \"Malformed post\")",
            "        doc = chatlog_sp.document",
            "        doc.rev = f\"{(int(doc.rev)+1):02d}\"",
            "        chatlog_sp.rev = doc.rev",
            "        chatlog_sp.save()",
            "            return err(400, \"Could not find official timeslot for session\")",
            "    except json.decoder.JSONDecodeError:",
            "        return err(400, \"Malformed post\")",
            "        doc = polls_sp.document",
            "        doc.rev = f\"{(int(doc.rev)+1):02d}\"",
            "        polls_sp.rev = doc.rev",
            "        polls_sp.save()",
            "            return err(400, \"Could not find official timeslot for session\")",
            "    except json.decoder.JSONDecodeError:",
            "        return err(400, f\"Invalid json value: '{bjson}'\")",
            "        return err(400, save_err)",
            "            return err(400, save_err)",
            "        return err(405, \"Method not allowed\")",
            "        raise Http404",
            "            meetings.append(future_meeting)",
            "        raise Http404()",
            "        raise Http404()",
            "        permission_denied(request, \"You don't have permission to manage slides for this session.\")",
            "        permission_denied(request, \"The materials cutoff for this session has passed. Contact the secretariat for further action.\")   ",
            "                    return HttpResponseNotFound(\"The slides you attempted to approve could not be found.  Please disapprove and delete them instead.\")",
            "                except (FileNotFoundError, IsADirectoryError):",
            "                    pass",
            "                pass",
            "        permission_denied(request, \"You don't have permission to import minutes for this session.\")",
            "        permission_denied(request, \"The materials cutoff for this session has passed. Contact the secretariat for further action.\")",
            "            import_contents = form.data['markdown_text']",
            "            except SessionNotScheduledError:",
            "                return HttpResponseGone(",
            "            except SaveMaterialsError as err:",
            "                form.add_error(None, str(err))"
          ]
        ],
        "ietf/meeting/views_proceedings.py": [
          163,
          0.9202453987730062,
          [
            78,
            93,
            107,
            147,
            148,
            183,
            184,
            185,
            186,
            218,
            247,
            251,
            308
          ],
          [
            "        raise ValueError('One of file or external_url must be None')",
            "            raise ValueError('Cannot create a new document without a file or external URL')",
            "            raise RuntimeError(save_error)",
            "            e = add_state_change_event(doc, by, prev_state, new_state)",
            "            events.append(e)",
            "            ext_url = material.document.external_url",
            "            if ext_url != '':",
            "                initial['use_url'] = True",
            "                initial['external_url'] = ext_url",
            "        raise Http404('No such material for this meeting')",
            "        return HttpResponseBadRequest('Unsupported action')",
            "        raise Http404('No such material for this meeting')",
            "        raise Http404()"
          ]
        ],
        "ietf/message/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/message/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/message/models.py": [
          65,
          0.9384615384615383,
          [
            53,
            69,
            90,
            99
          ],
          [
            "        return \"'%s' %s -> %s\" % (self.subject, self.frm, self.to)",
            "        return self.filename",
            "        return \"'%s' %s -> %s (sent at %s)\" % (self.message.subject, self.message.frm, self.message.to, self.sent_at or \"<not yet>\")",
            "        return self.address"
          ]
        ],
        "ietf/message/resources.py": [
          53,
          1,
          [],
          []
        ],
        "ietf/message/utils.py": [
          27,
          0.9629629629629629,
          [
            39
          ],
          [
            "        extra['Reply-To'] = message.get('reply_to')"
          ]
        ],
        "ietf/message/views.py": [
          6,
          1,
          [],
          []
        ],
        "ietf/middleware.py": [
          53,
          0.7547169811320755,
          [
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            32,
            33,
            44,
            45,
            46,
            47
          ],
          [
            "    def sql_log(request):",
            "        response = get_response(request)",
            "        for q in connection.queries:",
            "            if re.match('(update|insert)', q['sql'], re.IGNORECASE):",
            "                log(q['sql'])",
            "        return response",
            "    return sql_log",
            "            (extype, value, tb) = log_smtp_exception(exception)",
            "            return render(request, 'email_failed.html',",
            "            extype, e, tb = exc_parts()",
            "            if e.args[0] == 1366:",
            "                log(\"Database 4-byte utf8 exception: %s: %s\" % (extype, e))",
            "                return render(request, 'utf8_4byte_failed.html',"
          ]
        ],
        "ietf/name/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/name/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/name/models.py": [
          79,
          1,
          [],
          []
        ],
        "ietf/name/resources.py": [
          331,
          1,
          [],
          []
        ],
        "ietf/nomcom/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/nomcom/decorators.py": [
          13,
          0.8461538461538461,
          [
            17,
            19
          ],
          [
            "            raise Exception('View decorated with nomcom_private_key_required must receive a year argument')",
            "            return HttpResponseRedirect('%s?back_to=%s' % (reverse('ietf.nomcom.views.private_key', None, args=(year, )), urlquote(request.get_full_path())))"
          ]
        ],
        "ietf/nomcom/fields.py": [
          25,
          0.36,
          [
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            33,
            35
          ],
          [
            "        if add:",
            "            comments = smart_str(getattr(instance, 'comments'))",
            "            nomcom = getattr(instance, 'nomcom')",
            "            try:",
            "                cert_file = nomcom.public_key.path",
            "            except ValueError as e:",
            "                raise ValueError(\"Trying to read the NomCom public key: \" + str(e))",
            "            command = \"%s smime -encrypt -in /dev/stdin %s\" % (settings.OPENSSL_COMMAND, cert_file)",
            "            code, out, error = pipe(command, comments.encode('utf-8'))",
            "            if code != 0:",
            "                log(\"openssl error: %s:\\n  Error %s: %s\" %(command, code, error))",
            "            if not error:",
            "                instance.comments = out",
            "                return out",
            "                raise EncryptedException(error)",
            "            return instance.comments"
          ]
        ],
        "ietf/nomcom/forms.py": [
          585,
          0.9538461538461539,
          [
            55,
            59,
            60,
            63,
            64,
            75,
            79,
            80,
            83,
            84,
            117,
            129,
            133,
            178,
            179,
            188,
            215,
            216,
            521,
            522,
            546,
            547,
            647,
            651,
            746,
            823,
            833
          ],
          [
            "            return nominee",
            "        except Position.DoesNotExist:",
            "            raise forms.ValidationError('Invalid nominee')",
            "        except Nominee.DoesNotExist:",
            "            raise forms.ValidationError('Invalid nominee')",
            "                return nominee",
            "            except Position.DoesNotExist:",
            "                raise forms.ValidationError('Invalid nominee')",
            "            except Nominee.DoesNotExist:",
            "                raise forms.ValidationError('Invalid nominee')",
            "                help_text = \"The nomcom does not have a public key yet\"",
            "            return",
            "        raise forms.ValidationError('Invalid public key. Error was: %s' % error)",
            "                msg = \"Primary and secondary email address must be different\"",
            "                self._errors[\"primary_email\"] = self.error_class([msg])",
            "            primary_nominee = primary_nominee.duplicated",
            "                    nominee_position.nominee = primary_nominee",
            "                    nominee_position.save()",
            "                emails = Email.objects.filter(address=nominator_email)",
            "                author = emails and emails[0] or None",
            "                elif self.topic:",
            "                    about = self.topic.subject",
            "            return",
            "        raise forms.ValidationError('Invalid private key. Error was: %s' % error)",
            "                raise forms.ValidationError(\"You must identify either an existing person (by searching with the candidate field) and leave the name and email fields blank, or leave the search field blank and provide both a name and email address.\")",
            "            msg = ( \"Changing email address for %s (#%s): There already exists a nominee \"",
            "            raise forms.ValidationError(mark_safe(msg))"
          ]
        ],
        "ietf/nomcom/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/nomcom/managers.py": [
          59,
          0.9830508474576272,
          [
            35
          ],
          [
            "        return self.by_state('declined')"
          ]
        ],
        "ietf/nomcom/models.py": [
          232,
          0.9181034482758621,
          [
            93,
            94,
            99,
            103,
            112,
            116,
            117,
            118,
            119,
            144,
            166,
            172,
            196,
            241,
            252,
            259,
            290,
            308,
            335
          ],
          [
            "        except ValueError as e:",
            "            raise ValueError(\"Trying to read the NomCom public key: \" + str(e))",
            "            log(\"openssl error: %s:\\n  Error %s: %s\" %(command, code, error))",
            "            raise EncryptedException(error)",
            "                self._cached_chair_emails = []",
            "    nomcom = kwargs.get('instance', None)",
            "    delete_nomcom_templates(nomcom)",
            "    storage, path = nomcom.public_key.storage, nomcom.public_key.path",
            "    storage.delete(path)",
            "        return \"%s (%s)\" % (self.candidate_name, self.candidate_email)",
            "            return \"%s %s\" % (self.email.address, self.nomcom.year())",
            "            return self.email.address",
            "        return \"%s - %s - %s\" % (self.nominee, self.state, self.position)",
            "            return self._templates      # pylint: disable=access-member-before-definition",
            "            specific_reqs = linebreaks(specific_reqs)",
            "                generic_iesg_reqs = linebreaks(generic_iesg_reqs)",
            "            rendered = linebreaks(rendered)",
            "        return \"from %s\" % self.author",
            "        return f'{self.person} for {self.nomcom}'"
          ]
        ],
        "ietf/nomcom/redirect_ann_urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/nomcom/resources.py": [
          137,
          1,
          [],
          []
        ],
        "ietf/nomcom/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/nomcom/templatetags/nomcom_tags.py": [
          71,
          0.704225352112676,
          [
            28,
            46,
            62,
            63,
            67,
            68,
            69,
            71,
            72,
            74,
            75,
            76,
            77,
            78,
            79,
            81,
            83,
            84,
            86,
            87,
            88
          ],
          [
            "        return False",
            "        addr = addrmatch.group(1)",
            "    except UnicodeError:",
            "        return f\"-*- Encrypted text [Error retrieving private key, contact the secretariat ({settings.SECRETARIAT_SUPPORT_EMAIL})]\"",
            "    encrypted_file = tempfile.NamedTemporaryFile(delete=False)",
            "    encrypted_file.write(string)",
            "    encrypted_file.close()",
            "    command = \"%s smime -decrypt -in %s -inkey /dev/stdin\"",
            "    code, out, error = pipe(command % (settings.OPENSSL_COMMAND,",
            "    try:",
            "        out = force_str(out)",
            "    except DjangoUnicodeDecodeError:",
            "        pass",
            "    if code != 0:",
            "        log(\"openssl error: %s:\\n  Error %s: %s\" %(command, code, error))",
            "    os.unlink(encrypted_file.name)",
            "    if error:",
            "        return '-*- Encrypted text [Your private key is invalid] -*-'",
            "    if not plain:",
            "        return force_escape(linebreaksbr(out))",
            "    return mark_safe(force_escape(out))"
          ]
        ],
        "ietf/nomcom/test_data.py": [
          68,
          1,
          [],
          []
        ],
        "ietf/nomcom/urls.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/nomcom/utils.py": [
          418,
          0.9138755980861244,
          [
            106,
            107,
            108,
            109,
            173,
            174,
            189,
            213,
            224,
            226,
            240,
            256,
            346,
            462,
            463,
            465,
            466,
            468,
            476,
            479,
            480,
            481,
            482,
            484,
            498,
            544,
            567,
            573,
            585,
            593,
            594,
            627,
            636,
            669,
            679,
            689
          ],
          [
            "            try: ",
            "                user._email_cache = Email.objects.get(address=user.username)",
            "            except ObjectDoesNotExist:",
            "                pass",
            "    nomcom_template_path = '/nomcom/' + nomcom.group.acronym",
            "    DBTemplate.objects.filter(path__contains=nomcom_template_path).delete()",
            "        return private_key",
            "        request.session['NOMCOM_PRIVATE_KEY_%s' % year] = ''",
            "            log(\"openssl error: %s:\\n  Error %s: %s\" %(command, code, error))        ",
            "            out = b''",
            "        log(\"openssl error: %s:\\n  Error %s: %s\" %(command, code, error))        ",
            "        log(\"openssl error: %s:\\n  Error %s: %s\" %(command, code, error))        ",
            "        nominee = nominee.duplicated",
            "    if message.get_content_charset():",
            "        return message.get_content_charset()",
            "    if message.get_charset():",
            "        return message.get_charset()",
            "    return default",
            "        text_parts = [part for part in typed_subpart_iterator(message,",
            "        body = []",
            "        for part in text_parts:",
            "            charset = get_charset(part)",
            "            body.append(get_payload_text(part, default_charset=charset))",
            "        return \"\\n\".join(body).strip()",
            "        raise ValueError(\"Expected email message text to be str or bytes\")",
            "        return Person.objects.none()",
            "        base_qs = Person.objects.all()",
            "        base_qs = Person.objects.all()",
            "        base_qs = Person.objects.all()",
            "        three_years_ago = datetime.datetime(date.year - 3, 2, 28, tzinfo=DEADLINE_TZINFO)",
            "        five_years_ago = datetime.datetime(date.year - 5, 2, 28, tzinfo=DEADLINE_TZINFO)",
            "        base_qs = Person.objects.all()",
            "        base_qs = Person.objects.all()",
            "        date = date_today()",
            "        queryset = Person.objects.all()",
            "        queryset = Person.objects.all()"
          ]
        ],
        "ietf/nomcom/views.py": [
          885,
          0.9299435028248588,
          [
            105,
            138,
            139,
            141,
            176,
            210,
            211,
            213,
            225,
            315,
            338,
            340,
            381,
            382,
            842,
            843,
            933,
            934,
            940,
            1023,
            1024,
            1025,
            1031,
            1156,
            1157,
            1159,
            1160,
            1161,
            1162,
            1163,
            1164,
            1165,
            1166,
            1167,
            1168,
            1169,
            1170,
            1171,
            1172,
            1173,
            1174,
            1175,
            1176,
            1177,
            1178,
            1179,
            1180,
            1181,
            1182,
            1183,
            1184,
            1185,
            1186,
            1187,
            1189,
            1269,
            1272,
            1273,
            1291,
            1296,
            1297,
            1327
          ],
          [
            "            continue",
            "                    if label.endswith(\"y\"):",
            "                        label = label[:-1] + \"ies\"",
            "                        label += \"s\"",
            "        messages.warning(request, 'You already have a private decryption key set for this session.')",
            "                elif action == 'email':",
            "                    mailto = ','.join([np.nominee.email.email_address() for np in nominations])",
            "                messages.warning(request, \"Please, select some nominations to work with\")",
            "        filters['position__id'] = selected_position",
            "        raise Http404",
            "                messages.warning(request, 'No messages were sent.')",
            "            messages.warning(request, \"Please, select at least one nominee\")",
            "        messages.warning(request, \"This Nomcom is not active.\")",
            "        form = None",
            "    except EmptyPage:",
            "        feedback_page = paginator.page(paginator.num_pages)",
            "                feedback.type = None",
            "                messages.success(request, 'The selected feedback has been de-classified. Please reclassify it in the Pending emails tab.')",
            "            return render(request, 'nomcom/view_feedback_unrelated.html',",
            "                    feedback.type = None",
            "                    feedback.nominees.clear()",
            "                    messages.success(request, 'The selected feedback has been de-classified. Please reclassify it in the Pending emails tab.')",
            "                return render(request, 'nomcom/view_feedback_nominee.html',",
            "        if nomcom.group.state_id != 'active':",
            "            messages.warning(request, \"This nomcom is not active. Request administrative assistance if Position state needs to change.\")",
            "            action = request.POST.get('action')",
            "            positions_to_modify = request.POST.getlist('selected')",
            "            if positions_to_modify:",
            "                positions = positions.filter(id__in=positions_to_modify)",
            "                if action == \"set_iesg\":",
            "                    positions.update(is_iesg_position=True)",
            "                    messages.success(request,'The selected positions have been set as IESG Positions')",
            "                elif action == \"unset_iesg\":",
            "                    positions.update(is_iesg_position=False)",
            "                    messages.success(request,'The selected positions have been set as NOT IESG Positions')",
            "                elif action == \"set_open\":",
            "                    positions.update(is_open=True)",
            "                    messages.success(request,'The selected positions have been set as Open')",
            "                elif action == \"unset_open\":",
            "                    positions.update(is_open=False)",
            "                    messages.success(request,'The selected positions have been set as NOT Open')",
            "                elif action == \"set_accept_nom\":",
            "                    positions.update(accepting_nominations=True)",
            "                    messages.success(request,'The selected positions have been set as Accepting Nominations')",
            "                elif action == \"unset_accept_nom\":",
            "                    positions.update(accepting_nominations=False)",
            "                    messages.success(request,'The selected positions have been set as NOT Accepting Nominations')",
            "                elif action == \"set_accept_fb\":",
            "                    positions.update(accepting_feedback=True)",
            "                    messages.success(request,'The selected positions have been set as Accepting Feedback')",
            "                elif action == \"unset_accept_fb\":",
            "                    positions.update(accepting_feedback=False)",
            "                    messages.success(request,'The selected positions have been set as NOT Accepting Feedback')",
            "                positions = nomcom.position_set.order_by('-is_open')",
            "                messages.warning(request, \"Please select some positions to work with\")",
            "        permission_denied(request, 'This nomcom is closed.')",
            "    except Topic.DoesNotExist:",
            "        raise Http404",
            "        permission_denied(request, 'This nomcom is closed.')",
            "        except Topic.DoesNotExist:",
            "            raise Http404",
            "        permission_denied(request, 'This nomcom is closed.')"
          ]
        ],
        "ietf/person/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/person/ajax.py": [
          10,
          1,
          [],
          []
        ],
        "ietf/person/fields.py": [
          83,
          0.8674698795180723,
          [
            30,
            87,
            88,
            89,
            130,
            131,
            155,
            156,
            157,
            158,
            160
          ],
          [
            "            return escape('%s (%s)' % (p.name,p.email().address if p.email() else 'no email address'))",
            "        for pk in pks:",
            "            if not pk.isdigit():",
            "                raise forms.ValidationError(\"Unexpected value: %s\" % pk)",
            "        for pk in pks:",
            "            validate_email(pk)",
            "        if self.label_with == \"person\":",
            "            return str(email.person)",
            "        elif self.label_with == \"email\":",
            "            return email.address",
            "            return \"{} <{}>\".format(email.person, email.address)"
          ]
        ],
        "ietf/person/forms.py": [
          14,
          1,
          [],
          []
        ],
        "ietf/person/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/person/models.py": [
          305,
          0.9180327868852458,
          [
            72,
            73,
            75,
            76,
            91,
            95,
            101,
            105,
            130,
            140,
            152,
            161,
            169,
            177,
            247,
            258,
            267,
            326,
            337,
            347,
            354,
            355,
            356,
            361,
            442
          ],
          [
            "        if self.ascii_short:",
            "            return self.ascii_short",
            "            prefix, first, middle, last, suffix = self.ascii_parts()",
            "            return (first and first[0]+\".\" or \"\")+(middle or \"\")+\" \"+last+(suffix and \" \"+suffix or \"\")",
            "                    self._cached_ascii_name = unidecode_name(self.ascii)",
            "                self._cached_ascii_name = unidecode_name(self.plain_name())",
            "                    ascii = unidecode_name(self.ascii.decode('utf-8'))",
            "                ascii = unidecode_name(self.name)",
            "                group = Group.objects.get(acronym=group)",
            "        return None",
            "                e = self.email_set.order_by(\"-time\").first()",
            "            return \"\"",
            "            return \"\"",
            "            return \"\"",
            "        return urljoin(self.default_hostscheme,self.json_url())",
            "                    source_url = source_url[len(settings.IETF_HOST_URL):]",
            "            return ''",
            "            return self.address",
            "            return \"<%s>\" % self.address",
            "            return self.address",
            "            if self.person:",
            "                return self.person.email_address()",
            "            return",
            "            log.assertion('self.origin')",
            "        return \"%s %s at %s\" % (self.person.plain_name(), self.get_type_display().lower(), self.time)"
          ]
        ],
        "ietf/person/name.py": [
          87,
          0.9425287356321839,
          [
            18,
            28,
            29,
            66,
            67
          ],
          [
            "        return prefix, first, middle, last, suffix",
            "        prefix = parts[0];",
            "        parts = parts[1:]",
            "        first = 'RFC'",
            "        last = 'Editor'"
          ]
        ],
        "ietf/person/resources.py": [
          98,
          1,
          [],
          []
        ],
        "ietf/person/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/person/templatetags/person_filters.py": [
          38,
          0.7894736842105263,
          [
            25,
            75,
            76,
            77,
            78,
            79,
            84,
            85
          ],
          [
            "        return None",
            "    title = kwargs.get(\"title\", \"\")",
            "    cls = kwargs.get(\"class\", \"\")",
            "    with_email = kwargs.get(\"with_email\", True)",
            "    plain_name = email.person.plain_name()",
            "    name = (",
            "    email = email.address",
            "    return {"
          ]
        ],
        "ietf/person/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/person/utils.py": [
          176,
          0.875,
          [
            30,
            31,
            32,
            45,
            46,
            53,
            54,
            55,
            56,
            69,
            125,
            162,
            163,
            165,
            166,
            167,
            168,
            169,
            170,
            172,
            173,
            243
          ],
          [
            "        email.primary = False",
            "        email.save()",
            "        changes.append('EMAIL ACTION: {} no longer marked as primary'.format(email.address))",
            "            setattr(target,field,getattr(source,field))",
            "            target.save()",
            "        print(\"Not Deleting Person: {}({})\".format(source.ascii,source.pk), file=file)",
            "        print(\"Related objects remain:\", file=file)",
            "        pprint.pprint(deletable_objects[1], stream=file)",
            "        success = False",
            "        return source.email_set.filter(primary=True)",
            "            print(\"Merging {}:{}\".format(accessor,queryset.count()), file=file)",
            "            fb.nominees.remove(nominee)",
            "            fb.nominees.add(target_nominee)",
            "            existing_target_np = target_nominee.nomineeposition_set.filter(position=np.position).first()",
            "            if existing_target_np:",
            "                if existing_target_np.state.slug=='pending':",
            "                    existing_target_np.state = np.state",
            "                    existing_target_np.save()",
            "                np.delete()",
            "                np.nominee=target_nominee",
            "                np.save()",
            "            dots.append('irsg')"
          ]
        ],
        "ietf/person/views.py": [
          116,
          0.7758620689655173,
          [
            27,
            32,
            38,
            39,
            40,
            42,
            55,
            56,
            57,
            58,
            59,
            63,
            64,
            90,
            91,
            92,
            93,
            95,
            98,
            101,
            109,
            110,
            130,
            131,
            132,
            151
          ],
          [
            "        model = Person",
            "        objs = model.objects.none()",
            "            elif model == Person:",
            "                if \"@\" in t: # allow searching email address if there's a @ in the search term",
            "                    query &= Q(alias__name__icontains=t) | Q(email__address__icontains=t)",
            "                    query &= Q(alias__name__icontains=t)",
            "            objs = objs.exclude(person__user=None)",
            "    elif model == Person:",
            "        objs = objs.order_by(\"name\")",
            "        if only_users:",
            "            objs = objs.exclude(user=None)",
            "    except ValueError:",
            "        page = 0",
            "        aliases = Alias.objects.filter(name=email_or_name)",
            "        persons = list(set([ a.person for a in aliases ]))",
            "        if not persons:",
            "            raise Http404(\"No such person\")",
            "        return HttpResponse(r\"\\r\\n\".join([p.email() for p in persons]), status=300)",
            "        raise Http404(\"No photo found\")",
            "        return HttpResponse(\"Size must be integer\", status=400)",
            "        except OSError:",
            "            raise Http404",
            "                    warn_messages.append('WARNING: Both Person records have logins.  Be sure to specify the record to keep in the Target field.')",
            "                    if source.user.last_login and target.user.last_login and source.user.last_login > target.user.last_login:",
            "                        warn_messages.append('WARNING: The most recently used login is being deleted!')",
            "                messages.error(request, output)"
          ]
        ],
        "ietf/redirects/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/redirects/models.py": [
          28,
          0.7857142857142857,
          [
            27,
            36,
            52,
            53,
            54,
            55
          ],
          [
            "        return \"%s -> %s/%s\" % (self.cgi, self.url, self.rest)",
            "        return \"-> %s - %s\" % (self.rest, self.remove)",
            "        ret = \"%s?command=%s\" % (self.script.cgi, self.command)",
            "        if self.suffix_id:",
            "            ret += \" %s\" % (self.suffix)",
            "        return ret"
          ]
        ],
        "ietf/redirects/resources.py": [
          32,
          1,
          [],
          []
        ],
        "ietf/redirects/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/redirects/views.py": [
          65,
          0.8923076923076922,
          [
            25,
            49,
            50,
            56,
            63,
            95,
            96
          ],
          [
            "        rparam = request.POST",
            "        except:",
            "            pass\t# strange exception like the one described in",
            "            rest = cmd.url + \"/\"",
            "            remove = \"\"",
            "    except BadHeaderError:",
            "        raise Http404"
          ]
        ],
        "ietf/release/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/release/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/review/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/review/mailarch.py": [
          71,
          0.9577464788732394,
          [
            33,
            49,
            125
          ],
          [
            "        return None",
            "        return None",
            "            raise Exception(\"Export failed - this usually means no matches were found\")"
          ]
        ],
        "ietf/review/models.py": [
          139,
          0.9280575539568345,
          [
            45,
            61,
            89,
            91,
            104,
            115,
            170,
            189,
            192,
            211
          ],
          [
            "        return \"{} in {}\".format(self.person, self.team)",
            "        return \"{} in {}\".format(self.person, self.team)",
            "                return \"past\"",
            "            return \"future\"",
            "        return \"{} wishes to review {} in {}\".format(self.person, self.doc.name, self.team.acronym)",
            "        return \"{} next in {}\".format(self.next_reviewer, self.team)",
            "        return \"Assignment for %s (%s) : %s %s of %s\" % (self.reviewer.person, self.state, self.review_request.team.acronym, self.review_request.type, self.review_request.doc)",
            "    return ReviewTypeName.objects.filter(slug__in=['early','lc','telechat'])",
            "    return ReviewResultName.objects.filter(slug__in=['not-ready', 'right-track', 'almost-ready', 'ready-issues', 'ready-nits', 'ready'])",
            "        return \"%s\" % (self.group.acronym,)"
          ]
        ],
        "ietf/review/policies.py": [
          275,
          0.9745454545454545,
          [
            74,
            75,
            76,
            77,
            119,
            144,
            348
          ],
          [
            "            assignment.state = ReviewAssignmentStateName.objects.get(slug='assigned', used=True)",
            "            assignment.assigned_on = timezone.now()",
            "            assignment.save()",
            "            return assignment",
            "            return",
            "            return False  # picking from off the list is not in order",
            "                res = \"unavailable until {}\".format(p.end_date.isoformat())"
          ]
        ],
        "ietf/review/resources.py": [
          164,
          1,
          [],
          []
        ],
        "ietf/review/utils.py": [
          457,
          0.9212253829321664,
          [
            92,
            234,
            241,
            244,
            245,
            246,
            247,
            274,
            275,
            276,
            277,
            278,
            280,
            281,
            282,
            283,
            284,
            285,
            286,
            287,
            289,
            290,
            292,
            396,
            498,
            525,
            568,
            593,
            646,
            686,
            701,
            707,
            716,
            731,
            772,
            806
          ],
          [
            "        setattr(req_dict[e.review_request_id], e.type + \"_event\", e)",
            "            c = doc_pages",
            "            late_state_dict[state] += c",
            "            result_dict[result] += c",
            "            if assignment_to_closure_days is not None:",
            "                assignment_to_closure_days_list.append(assignment_to_closure_days)",
            "                assignment_to_closure_days_count += c",
            "    state_dict = defaultdict(int)",
            "    late_state_dict = defaultdict(int)",
            "    result_dict = defaultdict(int)",
            "    assignment_to_closure_days_list = []",
            "    assignment_to_closure_days_count = 0",
            "    for raw_aggr in raw_aggregations:",
            "        i_state_dict, i_late_state_dict, i_result_dict, i_assignment_to_closure_days_list, i_assignment_to_closure_days_count = raw_aggr",
            "        for s, v in i_state_dict.items():",
            "            state_dict[s] += v",
            "        for s, v in i_late_state_dict.items():",
            "            late_state_dict[s] += v",
            "        for r, v in i_result_dict.items():",
            "            result_dict[r] += v",
            "        assignment_to_closure_days_list.extend(i_assignment_to_closure_days_list)",
            "        assignment_to_closure_days_count += i_assignment_to_closure_days_count",
            "    return state_dict, late_state_dict, result_dict, assignment_to_closure_days_list, assignment_to_closure_days_count",
            "            return",
            "        return []",
            "                continue",
            "                continue",
            "            return False",
            "                    continue",
            "        requests_for_each_doc[r.doc.name].append(r)",
            "                    continue",
            "                    replaces_reqs.append(reqs)",
            "                res[name].extend(reqs)",
            "        return '^draft-(%s|%s)-.*$' % ( person.last_name().lower(), '|'.join(['ietf-%s' % g.acronym for g in groups_to_avoid]))",
            "            continue",
            "            continue"
          ]
        ],
        "ietf/secr/__init__.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/secr/announcement/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/announcement/forms.py": [
          77,
          0.9350649350649352,
          [
            44,
            60,
            61,
            100,
            114
          ],
          [
            "        addresses = list(addresses) + nomcom_choices",
            "        year = nomcom.group.acronym[-4:]",
            "        addresses.append('NomCom Chair %s <nomcom-chair-%s@ietf.org>' % (year,year))",
            "            self.initial['nomcom'] = nomcom_roles[0].group.pk",
            "            raise forms.ValidationError('You must enter a \"To\" email address')"
          ]
        ],
        "ietf/secr/announcement/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/secr/announcement/views.py": [
          47,
          0.9361702127659575,
          [
            39,
            66,
            81
          ],
          [
            "            return True",
            "            to = form.data['to']",
            "        permission_denied(request, 'Restricted to: Secretariat, IAD, or chair of IETF, IAB, RSOC, RSE, IAOC, ISOC, NomCom.')"
          ]
        ],
        "ietf/secr/context_processors.py": [
          6,
          0.8333333333333333,
          [
            7
          ],
          [
            "    return {'server_mode': settings.SERVER_MODE}"
          ]
        ],
        "ietf/secr/lib/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/lib/template.py": [
          16,
          0,
          [
            1,
            3,
            5,
            6,
            7,
            8,
            9,
            11,
            14,
            15,
            16,
            18,
            19,
            20,
            21,
            23
          ],
          [
            "import json",
            "from django.http import HttpResponse",
            "def template(template):",
            "    def decorator(fn):",
            "        def render(request, *args, **kwargs):",
            "            context_data = fn(request, *args, **kwargs)",
            "            if isinstance(context_data, HttpResponse):",
            "                return context_data",
            "                return render(request, template, context_data)",
            "        return render",
            "    return decorator",
            "def jsonapi(fn):",
            "    def to_json(request, *args, **kwargs):",
            "        context_data = fn(request, *args, **kwargs)",
            "        return HttpResponse(json.dumps(context_data),",
            "    return to_json"
          ]
        ],
        "ietf/secr/meetings/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/meetings/forms.py": [
          149,
          0.8926174496644295,
          [
            34,
            35,
            36,
            37,
            38,
            39,
            52,
            68,
            76,
            84,
            116,
            175,
            177,
            227,
            229,
            238
          ],
          [
            "    same_day_slots = TimeSlot.objects.filter(meeting=slot.meeting,location=slot.location,time__day=slot.time.day).order_by('time')",
            "    try:",
            "        i = list(same_day_slots).index(slot)",
            "        return same_day_slots[i+1]",
            "    except IndexError:",
            "        return None",
            "        room = None",
            "                raise forms.ValidationError('Cannot delete meeting room %s.  Already assigned to some session.' % room.name)",
            "        return \"%s %s - %s\" % (obj.time.strftime('%a %H:%M'),obj.name,obj.location)",
            "        return True",
            "            raise forms.ValidationError('Meeting number must be an integer')",
            "                choices.insert(0, (day, datestr))",
            "                choices.append((day, datestr))",
            "            raise forms.ValidationError('ERROR: a group selection is required')",
            "            raise forms.ValidationError('ERROR: a short name is required')",
            "            raise forms.ValidationError(\"ERROR: can't change group after materials have been uploaded\")"
          ]
        ],
        "ietf/secr/meetings/models.py": [
          1,
          1,
          [],
          []
        ],
        "ietf/secr/meetings/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/secr/meetings/views.py": [
          419,
          0.8353221957040573,
          [
            46,
            49,
            50,
            52,
            53,
            55,
            56,
            59,
            60,
            62,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            72,
            73,
            74,
            81,
            82,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            109,
            110,
            111,
            112,
            113,
            119,
            120,
            121,
            122,
            124,
            139,
            203,
            275,
            284,
            285,
            375,
            430,
            431,
            456,
            528,
            568,
            578,
            579,
            584,
            585,
            586,
            613,
            614,
            615,
            616,
            617,
            622,
            624,
            710,
            711,
            764,
            787,
            789,
            814
          ],
          [
            "    slots = meeting.timeslot_set.filter(type='regular')",
            "    if room and not room.session_types.filter(slug='regular'):",
            "        return",
            "    if room:",
            "        rooms = [room]",
            "        rooms = meeting.room_set.filter(session_types__slug='regular')",
            "    if not slots or room:",
            "        if room:",
            "            source_meeting = meeting",
            "            source_meeting = get_last_meeting(meeting)",
            "        timeslots = []",
            "        time_seen = set()  # time of source_meeting timeslot",
            "        for t in source_meeting.timeslot_set.filter(type='regular'):",
            "            if not t.time in time_seen:",
            "                time_seen.add(t.time)",
            "                timeslots.append(t)",
            "        for t in timeslots:",
            "            day_offset = t.local_start_time().date() - source_meeting.date",
            "            new_date = meeting.date + day_offset",
            "            new_time = make_aware(",
            "            for room in rooms:",
            "                TimeSlot.objects.create(type_id='regular',",
            "    slots = TimeSlot.objects.filter(meeting=meeting,type__in=('break','reg','other','plenary','lead','offagenda'))",
            "    plenary = slots.filter(type='plenary').first()",
            "    if plenary:",
            "        assignments = plenary.sessionassignments.all()",
            "        if not assignments.filter(schedule=schedule):",
            "            source = assignments.first().schedule",
            "            for ss in SchedTimeSessAssignment.objects.filter(schedule=source,timeslot__in=slots):",
            "                SchedTimeSessAssignment.objects.create(schedule=schedule,session=ss.session,timeslot=ss.timeslot)",
            "    last_number = int(meeting.number) - 1",
            "    try:",
            "        return Meeting.objects.get(number=last_number)",
            "    except Meeting.DoesNotExist:",
            "        return None",
            "    if schedule == None:",
            "        schedule = meeting.schedule",
            "    if session.timeslotassignments.filter(schedule=schedule).count() > 1:",
            "        return True",
            "        return False",
            "            subject = '%s - Requested sessions have been scheduled for IETF %s' % (group.acronym, meeting.number)",
            "            return redirect('ietf.secr.meetings.views.main')",
            "            return redirect('ietf.secr.meetings.views.view', meeting_id=meeting_id)",
            "        form = MeetingModelForm(instance=meeting)",
            "    return render(request, 'meetings/edit_meeting.html', {",
            "        messages.warning(request, 'There are misc. session timeslots which do not have a room assigned')",
            "                messages.error(request, 'Materials have already been uploaded for \"%s\".  You must delete those before deleting the timeslot.' % slot.name)",
            "                return redirect('ietf.secr.meetings.views.misc_sessions', meeting_id=meeting_id, schedule_name=schedule_name)",
            "            return redirect('ietf.secr.meetings.views.misc_sessions', meeting_id=meeting_id, schedule_name=schedule_name)",
            "            groups.add(ss.session.group)",
            "            return redirect('ietf.secr.meetings.views.main', meeting_id=meeting_id,schedule_name=schedule_name)",
            "                if first_time:",
            "                    build_timeslots(meeting)",
            "                    for form in formset.forms[formset.initial_form_count():]:",
            "                        if form.instance.pk:",
            "                            build_timeslots(meeting,room=form.instance)",
            "        if 'cancel' in request.POST:",
            "            pk = request.POST.get('pk')",
            "            session = get_object_or_404(sessions, pk=pk)",
            "            if session.current_status not in ['canceled', 'resched']:",
            "                SchedulingEvent.objects.create(",
            "                messages.success(request, 'Session cancelled')",
            "        return redirect('ietf.secr.meetings.views.regular_sessions', meeting_id=meeting_id, schedule_name=schedule_name)",
            "                messages.error(request, 'There is already a timeslot for %s.  To change you must delete the old one first.' % time.strftime('%a %H:%M'))",
            "                return redirect('ietf.secr.meetings.views.times', meeting_id=meeting_id,schedule_name=schedule_name)",
            "            return redirect('ietf.secr.meetings.views.times', meeting_id=meeting_id,schedule_name=schedule_name)",
            "        form = TimeSlotForm(initial=initial, meeting=meeting)",
            "    return render(request, 'meetings/times_edit.html', {",
            "                        SchedulingEvent.objects.create("
          ]
        ],
        "ietf/secr/middleware/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/middleware/secauth.py": [
          23,
          0,
          [
            1,
            3,
            4,
            5,
            8,
            26,
            27,
            30,
            31,
            32,
            33,
            34,
            36,
            37,
            39,
            40,
            42,
            44,
            45,
            46,
            47,
            50,
            52
          ],
          [
            "import re",
            "from django.conf import settings",
            "from django.contrib.auth.decorators import login_required",
            "from ietf.ietfauth.utils import has_role, role_required",
            "class SecAuthMiddleware(object):",
            "    def __init__(self):",
            "        self.unrestricted = [re.compile(pattern) for pattern in",
            "    def is_unrestricted_url(self,path):",
            "        for pattern in self.unrestricted:",
            "            if pattern.match(path):",
            "                return True",
            "        return False",
            "    def process_view(self, request, view_func, view_args, view_kwargs):",
            "        if request.path.startswith('/secr/'):",
            "            if has_role(request.user, 'Secretariat'):",
            "                request.user_is_secretariat = True",
            "                request.user_is_secretariat = False",
            "            if request.path.startswith('/secr/announcement/'):",
            "                return login_required(view_func)(request,*view_args,**view_kwargs)",
            "            elif self.is_unrestricted_url(request.path):",
            "                return role_required('WG Chair','WG Secretary','RG Chair','IAB Group Chair',",
            "                return role_required('Secretariat')(view_func)(request,*view_args,**view_kwargs)",
            "            return None"
          ]
        ],
        "ietf/secr/rolodex/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/rolodex/forms.py": [
          104,
          0.701923076923077,
          [
            27,
            28,
            29,
            30,
            31,
            32,
            34,
            48,
            54,
            56,
            57,
            60,
            63,
            65,
            66,
            89,
            90,
            94,
            111,
            116,
            117,
            119,
            120,
            122,
            123,
            124,
            126,
            141,
            142,
            143,
            149
          ],
          [
            "        super(SearchForm, self).clean()",
            "        if any(self.errors):",
            "            return",
            "        data = self.cleaned_data",
            "        if not data['name'] and not data['email'] and not data['id']:",
            "            raise forms.ValidationError(\"You must fill out at least one field\")",
            "        return data",
            "            raise forms.ValidationError(\"You may not change existing origin fields, only set the value when empty\")",
            "                raise forms.ValidationError(\"Invalid tag.  Valid tags are: %s\" % ','.join(valid_tags))",
            "                if not Document.objects.filter(name=value).exists():",
            "                    raise forms.ValidationError(\"Invalid document: %s. A valid document is required with 'author:'\" % value)",
            "                    raise forms.ValidationError(\"Invalid role spec: %s.  Please indicate 'group role'.\" % value)",
            "                    raise forms.ValidationError(\"Invalid group: %s. A valid 'group role' string is required with 'role:'\" % acronym)",
            "                    roles = RoleName.objects.values_list('slug', flat=True)",
            "                    raise forms.ValidationError(\"Invalid role: %s. A valid 'group role' string is required with 'role:'.\\n  Valid roles are: %s\" % (slug, ', '.join(roles)))",
            "            except User.DoesNotExist:",
            "                user_obj = User.objects.create_user(username=user, email=user)",
            "            return None",
            "            raise forms.ValidationError(\"Enter a valid name. (only letters,period,hyphen,paren,numerals 2 and 3 allowed)\") ",
            "        cleaned_data = self.cleaned_data",
            "        address = cleaned_data.get(\"address\")",
            "        if address:",
            "            validate_email(address)",
            "            for pat in settings.EXCLUDED_PERSONAL_EMAIL_REGEX_PATTERNS:",
            "                if re.search(pat, address):",
            "                    raise ValidationError(\"This email address is not valid in a datatracker account\")",
            "        return address",
            "            person = Person.objects.get(user=user)",
            "            if user and person:",
            "                raise forms.ValidationError(\"This account already exists. [name=%s, id=%s, email=%s]\" % (person.name,person.id,email))",
            "            raise forms.ValidationError(\"This email address already exists in the database\")"
          ]
        ],
        "ietf/secr/rolodex/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/secr/rolodex/views.py": [
          122,
          0.7049180327868853,
          [
            74,
            75,
            77,
            126,
            128,
            129,
            137,
            138,
            140,
            163,
            171,
            172,
            173,
            174,
            185,
            186,
            196,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            233,
            234,
            236,
            237,
            238,
            240,
            241,
            243,
            246,
            247,
            249,
            250
          ],
          [
            "    elif 'name' in request.POST:",
            "        name = request.POST.get('name')",
            "        name = ''",
            "    person = get_object_or_404(Person, id=id)",
            "    if request.method == 'POST':",
            "        if request.POST.get('post', '') == \"yes\":",
            "            messages.warning(request, 'This feature is disabled')",
            "            return redirect('ietf.secr.rolodex.views.search')",
            "    return render(request, 'rolodex/delete.html', { 'person': person}, )",
            "            return redirect('ietf.secr.rolodex.views.view', id=id)",
            "                    person.alias_set.filter(name=getattr(person,field)).delete()",
            "                    alias = person_form.cleaned_data[field]",
            "                    if alias:",
            "                        Alias.objects.get_or_create(person=person,name=alias)",
            "                except User.DoesNotExist:",
            "                    pass",
            "            EmailFormset.extra = 1",
            "        form = SearchForm(request.POST)",
            "        if form.is_valid():",
            "            kwargs = {}",
            "            name = form.cleaned_data['name']",
            "            email = form.cleaned_data['email']",
            "            id = form.cleaned_data['id']",
            "            if name:",
            "                kwargs['name__icontains'] = name",
            "            if email:",
            "                kwargs['person__email__address__istartswith'] = email",
            "            if id:",
            "                kwargs['person__id'] = id",
            "            if kwargs:",
            "                qs = Alias.objects.filter(**kwargs).distinct()",
            "            results = qs.order_by('name')",
            "            if len(results) == 1:",
            "                return redirect('ietf.secr.rolodex.views.view', id=results[0].person.id)",
            "            if not results:",
            "                not_found = 'No record found' "
          ]
        ],
        "ietf/secr/sreq/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/sreq/forms.py": [
          186,
          0.956989247311828,
          [
            55,
            56,
            57,
            99,
            249,
            250,
            290,
            291
          ],
          [
            "        choices = kwargs.pop('choices')",
            "        super(GroupSelectForm, self).__init__(*args,**kwargs)",
            "        self.fields['group'].widget.choices = choices",
            "            self.fields['num_session'].choices = ((n, str(n)) for n in range(1, 51))",
            "                extras = \", \".join(e.name for e in extra)",
            "                raise forms.ValidationError(",
            "        except ValueError:",
            "            self.add_error('num_session', 'Invalid value for number of sessions')"
          ]
        ],
        "ietf/secr/sreq/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/sreq/templatetags/ams_filters.py": [
          28,
          0.6785714285714286,
          [
            12,
            21,
            29,
            43,
            50,
            51,
            53,
            61,
            65
          ],
          [
            "    d = {'Proposed Standard':'PS',",
            "    return d.get(value,value)",
            "        return 'unspecified'",
            "        return \"%d Hours %d Minutes %d Seconds\"%(value//3600,(value%3600)//60,value%60)",
            "    if value.endswith('ppt') or value.endswith('pptx'):",
            "        return True",
            "        return False",
            "        return user",
            "        return '%s, a chair of the' % user"
          ]
        ],
        "ietf/secr/sreq/urls.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/secr/sreq/views.py": [
          454,
          0.9118942731277534,
          [
            55,
            68,
            69,
            125,
            215,
            229,
            230,
            300,
            328,
            329,
            348,
            423,
            452,
            497,
            515,
            516,
            518,
            570,
            627,
            639,
            656,
            669,
            683,
            684,
            688,
            689,
            771,
            782,
            783,
            784,
            785,
            786,
            790,
            791,
            792,
            817,
            818,
            820,
            847,
            848
          ],
          [
            "        return initial",
            "        initial['num_session'] = sessions.count()",
            "        initial['third_session'] = False",
            "        return \"%s, on behalf of the %s %s\" % (",
            "        raise Http404",
            "        messages.error(request, 'Not authorized to approve the third session')",
            "        return redirect('ietf.secr.sreq.views.view', acronym=acronym)",
            "        raise Http404(f'Cannot request sessions for group \"{acronym}\"')",
            "        messages.success(request, 'Session Request has been cancelled')",
            "        return redirect('ietf.secr.sreq.views.main')",
            "                jfs = '-1'",
            "        raise Http404(f'Cannot request sessions for group \"{acronym}\"')",
            "            return redirect('ietf.secr.sreq.views.view', acronym=acronym)",
            "                    sessions.update(comments=form.cleaned_data['comments'])",
            "                    new_resource_ids = form.cleaned_data['resources']",
            "                    new_resources = [ ResourceAssociation.objects.get(pk=a)",
            "                    first_session.resources = new_resources",
            "            return redirect('ietf.secr.sreq.views.new', acronym=acronym)",
            "        messages.warning(request, 'The account %s is not associated with any groups.  If you have multiple Datatracker accounts you may try another or report a problem to %s' % (request.user, settings.SECRETARIAT_ACTION_EMAIL))",
            "            group.not_meeting = True",
            "        raise Http404(f'Cannot request sessions for group \"{acronym}\"')",
            "            return redirect('ietf.secr.sreq.views.main')",
            "                messages.warning(request, 'This group did not meet at %s' % previous_meeting)",
            "                return redirect('ietf.secr.sreq.views.new', acronym=acronym)",
            "            messages.warning(request, 'Did not find any previous meeting')",
            "            return redirect('ietf.secr.sreq.views.new', acronym=acronym)",
            "            return redirect('ietf.secr.sreq.views.main')",
            "        elif button_text == 'Unlock':",
            "            meeting.session_request_lock_message = ''",
            "            meeting.save()",
            "            messages.success(request, 'Session Request Tool is now Unlocked')",
            "            return redirect('ietf.secr.sreq.views.main')",
            "            message = get_lock_message()",
            "            initial = {'message': message}",
            "            form = ToolStatusForm(initial=initial)",
            "        if is_locked:",
            "            return redirect('ietf.secr.sreq.views.main')",
            "            return redirect('ietf.secr.sreq.views.new', acronym=acronym)",
            "        if has_role(request.user,'Secretariat') or group.parent.role_set.filter(name='ad',person=request.user.person):",
            "            show_approve_button = True"
          ]
        ],
        "ietf/secr/telechat/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/telechat/forms.py": [
          30,
          1,
          [],
          []
        ],
        "ietf/secr/telechat/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/secr/telechat/views.py": [
          228,
          0.7982456140350876,
          [
            69,
            70,
            71,
            72,
            76,
            86,
            128,
            164,
            205,
            261,
            306,
            345,
            346,
            347,
            349,
            350,
            351,
            353,
            355,
            356,
            357,
            358,
            360,
            368,
            369,
            386,
            387,
            389,
            401,
            402,
            404,
            405,
            406,
            407,
            408,
            410,
            414,
            427,
            428,
            430,
            432,
            433,
            437,
            438,
            439,
            441
          ],
          [
            "            writeup = latest.text",
            "            if doc.has_rfc_editor_note():",
            "                rfced_note = doc.latest_event(WriteupDocEvent, type=\"changed_rfc_editor_note_text\")",
            "                writeup = writeup + \"\\n\\n\" + rfced_note.text",
            "            writeup = latest.text",
            "    return TelechatDate.objects.filter(date__lt=date_today()).order_by('-date')[0].date",
            "            return section[\"docs\"][0]",
            "        return redirect('ietf.secr.telechat.views.doc_detail', date=date, name=doc.name)",
            "            open_positions += 1",
            "                        pos.desc = '[Ballot Position Update] Position for %s has been changed to %s by %s' % (balloter.name, pos.pos.name, login.name)",
            "                        request_last_call(request, doc)",
            "    doc = get_object_or_404(Document, name=name)",
            "    agenda = agenda_data(date=date)",
            "    target = name",
            "    docs = get_doc_list(agenda)",
            "    if doc in docs:",
            "        index = docs.index(doc)",
            "        return redirect('ietf.secr.telechat.views.doc_detail', date=date, name=name)",
            "    if nav == 'next' and index < len(docs) - 1:",
            "        target = docs[index + 1].name",
            "    elif nav == 'previous' and index != 0:",
            "        target = docs[index - 1].name",
            "    return redirect('ietf.secr.telechat.views.doc_detail', date=date, name=target)",
            "        date = request.POST['date']",
            "        return redirect('ietf.secr.telechat.views.doc', date=date)",
            "    agenda = agenda_data(date=date)",
            "    issues = TelechatAgendaItem.objects.filter(type=3).order_by('id')",
            "    return render(request, 'telechat/management.html', {",
            "    y,m,d = date.split('-')",
            "    current = datetime.date(int(y),int(m),int(d))",
            "    previous = TelechatDate.objects.filter(date__lt=current).order_by(\"-date\")[0].date",
            "    events = DocEvent.objects.filter(type='iesg_approved',time__gte=previous,time__lt=current,doc__type='draft')",
            "    docs = [ e.doc for e in events ]",
            "    pa_docs = [ doc for doc in docs if doc.intended_std_level.slug not in ('inf','exp','hist') ]",
            "    da_docs = [ doc for doc in docs if doc.intended_std_level.slug in ('inf','exp','hist') ]",
            "    agenda = agenda_data(date=date)",
            "    return render(request, 'telechat/minutes.html', {",
            "    if request.method == 'POST':",
            "        date = request.POST['date']",
            "        Telechat.objects.create(telechat_date=date)",
            "        messages.success(request,'New Telechat Agenda created')",
            "        return redirect('ietf.secr.telechat.views.doc', date=date)",
            "    agenda = agenda_data(date=date)",
            "    ads = Person.objects.filter(role__name='ad', role__group__state=\"active\",role__group__type=\"area\")",
            "    sorted_ads = sorted(ads, key = lambda a: a.name_parts()[3])",
            "    return render(request, 'telechat/roll_call.html', {"
          ]
        ],
        "ietf/secr/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/secr/utils/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/secr/utils/ams_utils.py": [
          37,
          0,
          [
            5,
            7,
            9,
            10,
            11,
            13,
            19,
            20,
            22,
            27,
            28,
            30,
            37,
            38,
            39,
            40,
            42,
            44,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73
          ],
          [
            "from django.conf import settings",
            "from ietf.person.models import Person",
            "import glob",
            "import os",
            "import re",
            "def get_base(name):",
            "    m = re.match(r'(.*)(-\\d{2})(.*)$',name)",
            "    return m.group(1) ",
            "def get_revision(name):",
            "    base,ext = os.path.splitext(name)",
            "    return base[-2:]",
            "def get_last_revision(filename):",
            "    files = glob.glob(os.path.join(settings.INTERNET_DRAFT_ARCHIVE_DIR,filename) + '-??.txt')",
            "    if files:",
            "        sorted_files = sorted(files)",
            "        return get_revision(sorted_files[-1])",
            "        raise Exception('last revision not found in archive')",
            "def get_person(name):",
            "    match = re.search(r'\\((\\d+)\\)', name)",
            "    if not match:",
            "        return None",
            "    tag = match.group(1)",
            "    try:",
            "       person = Person.objects.get(pk=tag)",
            "    except (Person.ObjectDoesNoExist, Person.MultipleObjectsReturned):",
            "        return None",
            "    return person",
            "def get_email(name):",
            "    match = re.search(r'\\((\\d+)\\)', name)",
            "    if not match:",
            "        return None",
            "    tag = match.group(1)",
            "    try:",
            "       person = Person.objects.get(pk=tag)",
            "    except (Person.ObjectDoesNoExist, Person.MultipleObjectsReturned):",
            "        return None",
            "    return person.email_address()"
          ]
        ],
        "ietf/secr/utils/decorators.py": [
          60,
          0.6333333333333333,
          [
            28,
            45,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            65,
            66,
            74,
            75,
            76,
            77,
            78,
            81,
            89,
            91,
            92,
            94,
            96
          ],
          [
            "                return HttpResponseRedirect(redirect_url)",
            "            return HttpResponseRedirect('%s?%s=%s' % (settings.LOGIN_URL, REDIRECT_FIELD_NAME, urlquote(request.get_full_path())))",
            "        elif 'session_id' in kwargs:",
            "            session = get_object_or_404(Session, id=kwargs['session_id'])",
            "            group = session.group",
            "        elif 'slide_id' in kwargs:",
            "            slide = get_object_or_404(Document, name=kwargs['slide_id'])",
            "            session = slide.session_set.all()[0]",
            "            group = session.group",
            "        except ObjectDoesNotExist:",
            "            permission_denied(request, \"User not authorized to access group: %s\" % group.acronym)",
            "        if session and get_timeslot(session).type.slug=='plenary':",
            "            chair = login.role_set.filter(name='chair',group__acronym__in=('iesg','iab','ietf-trust','iaoc'))",
            "            admdir = login.role_set.filter(name='admdir',group__acronym='ietf')",
            "            if chair or admdir:",
            "                return func(request, *args, **kwargs)",
            "        permission_denied(request, \"User not authorized to access group: %s\" % group.acronym)",
            "    def wrapper(request, *args, **kwargs):",
            "        if has_role(request.user, \"Secretariat\"):",
            "            return func(request, *args, **kwargs)",
            "        return render(request, 'unauthorized.html',{ 'user_name':request.user.person } )",
            "    return wraps(func)(wrapper)"
          ]
        ],
        "ietf/secr/utils/document.py": [
          8,
          0,
          [
            5,
            10,
            12,
            13,
            14,
            17,
            23,
            24
          ],
          [
            "def get_full_path(doc):",
            "    import os",
            "    if doc.type_id not in ('slides','agenda','minutes') or not doc.uploaded_filename:",
            "        return None",
            "    return os.path.join(doc.get_file_path(), doc.uploaded_filename)",
            "def get_start_date(doc):",
            "    event = doc.docevent_set.filter(type='new_revision').order_by('time')",
            "    return event[0].time.date() if event else None"
          ]
        ],
        "ietf/secr/utils/group.py": [
          23,
          0.9130434782608695,
          [
            39,
            40
          ],
          [
            "    except ObjectDoesNotExist:",
            "        return list()"
          ]
        ],
        "ietf/secr/utils/meeting.py": [
          43,
          0.4186046511627907,
          [
            11,
            19,
            21,
            22,
            23,
            24,
            25,
            26,
            28,
            29,
            30,
            33,
            34,
            35,
            36,
            37,
            40,
            41,
            42,
            43,
            44,
            45,
            54,
            59,
            73
          ],
          [
            "    return Meeting.objects.filter(type='ietf').order_by('-number')[0]",
            "    materials = dict(slides=[],recording=[],bluesheets=[])",
            "    for session in Session.objects.filter(group=group,meeting=meeting,status__in=('sched','schedw')):",
            "        for doc in session.materials.exclude(states__slug='deleted').order_by('order'):",
            "            if doc.type.slug in ('minutes','agenda'):",
            "                materials[doc.type.slug] = doc",
            "            elif doc.type.slug == 'draft':",
            "                continue",
            "            elif doc not in materials[doc.type.slug]:",
            "                materials[doc.type.slug].append(doc)",
            "    return materials",
            "    if meeting.type_id == 'ietf':",
            "        path = os.path.join(meeting.get_materials_path(),group.acronym + '.html')",
            "    elif meeting.type_id == 'interim':",
            "        path = os.path.join(meeting.get_materials_path(),'proceedings.html')",
            "    return path",
            "    url = '%sproceedings/%s/' % (settings.IETF_HOST_URL,meeting.number)",
            "    if meeting.type_id == 'ietf' and group:",
            "        url = url + '%s.html' % group.acronym",
            "    elif meeting.type_id == 'interim':",
            "        url = url + 'proceedings.html'",
            "    return url",
            "        schedule = timeslot.meeting.schedule",
            "        return None",
            "        return None"
          ]
        ],
        "ietf/secr/utils/test.py": [
          14,
          0.35714285714285715,
          [
            13,
            14,
            15,
            16,
            20,
            21,
            22,
            23,
            24
          ],
          [
            "    me = Person.objects.get(name='Ryan Cross')",
            "    me.role_set.all().delete()",
            "    Role.objects.create(person=me,email_id='rcross@amsl.com',name_id='secr',group_id=4)",
            "    print(me.role_set.all())",
            "    me = Person.objects.get(name='Ryan Cross')",
            "    me.role_set.all().delete()",
            "    for role in person.role_set.all():",
            "        Role.objects.create(person=me,email_id='rcross@amsl.com',name=role.name,group=role.group)",
            "    print(me.role_set.all())"
          ]
        ],
        "ietf/stats/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/stats/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/stats/models.py": [
          41,
          0.8292682926829268,
          [
            27,
            30,
            31,
            32,
            43,
            53,
            73
          ],
          [
            "        return \"{} -> {}\".format(self.alias, self.name)",
            "        self.alias = self.alias.lower()",
            "        update_fields = {\"alias\"}.union(kwargs.pop(\"update_fields\", set()))",
            "        super(AffiliationAlias, self).save(update_fields=update_fields, *args, **kwargs)",
            "        return self.ending",
            "        return \"{} -> {}\".format(self.alias, self.country.name)",
            "        return \"{} {}\".format(self.first_name, self.last_name)"
          ]
        ],
        "ietf/stats/resources.py": [
          45,
          1,
          [],
          []
        ],
        "ietf/stats/urls.py": [
          4,
          1,
          [],
          []
        ],
        "ietf/stats/utils.py": [
          235,
          0.5148936170212766,
          [
            26,
            27,
            28,
            29,
            31,
            68,
            69,
            74,
            75,
            80,
            81,
            87,
            88,
            89,
            95,
            96,
            97,
            98,
            115,
            116,
            117,
            119,
            133,
            134,
            135,
            136,
            137,
            156,
            157,
            158,
            161,
            162,
            164,
            167,
            168,
            169,
            170,
            173,
            174,
            175,
            176,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            193,
            194,
            197,
            215,
            217,
            218,
            219,
            221,
            223,
            241,
            242,
            243,
            248,
            249,
            250,
            251,
            253,
            302,
            317,
            318,
            320,
            333,
            334,
            335,
            336,
            337,
            338,
            339,
            340,
            341,
            342,
            343,
            344,
            350,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            372,
            373,
            374,
            376,
            377,
            378,
            380,
            382,
            384
          ],
          [
            "        try:",
            "            re.compile(ending_re)",
            "        except re.error:",
            "            pass",
            "        parts.append(ending_re)",
            "            affiliation = name",
            "            res[original_affiliation] = affiliation",
            "            affiliation = name",
            "            res[original_affiliation] = affiliation",
            "            affiliation = name",
            "            res[original_affiliation] = affiliation",
            "        count = case_spelling_count[affiliation]",
            "        uppercase_letters = sum(1 for c in affiliation if c.isupper())",
            "        return (count, uppercase_letters)",
            "            most_popular = sorted(similar_affiliations, key=affiliation_sort_key, reverse=True)[0]",
            "            for affiliation in similar_affiliations:",
            "                if affiliation != most_popular:",
            "                    res[affiliation] = most_popular",
            "        name = known_aliases.get(possible_alias.lower())",
            "        if name is not None:",
            "            return name",
            "        return possible_alias",
            "        for t in reversed(split):",
            "            t = t.strip()",
            "            if t:",
            "                return t",
            "        return \"\"",
            "        if us_zipcode_re.search(country):",
            "            res[original_country] = us_country_name",
            "            continue",
            "        if len(country) > 1 and country[-1] == \".\" and not country[-2].isupper():",
            "            country = country.rstrip(\".\")",
            "        country = country.strip(\"-,\").strip()",
            "        country = lookup_alias(country)",
            "        if country in known_countries:",
            "            res[original_country] = country",
            "            continue",
            "        last_part = lookup_alias(last_text_part_stripped(country.split(\",\")))",
            "        if last_part in known_countries:",
            "            res[original_country] = last_part",
            "            continue",
            "        last_part = lookup_alias(last_text_part_stripped(country.split()))",
            "        if last_part in known_countries:",
            "            res[original_country] = last_part",
            "            continue",
            "        country_lower = country.lower()",
            "        found = False",
            "        for alias_re, name in known_re_aliases.items():",
            "            if alias_re.search(country) or alias_re.search(country_lower):",
            "                res[original_country] = name",
            "                found = True",
            "                break",
            "        if found:",
            "            continue",
            "        res[original_country] = \"\"",
            "    i = 0",
            "    for count in sorted(citation_counts, reverse=True):",
            "        if i + 1 > count:",
            "            break",
            "        i += 1",
            "    return i",
            "    except requests.Timeout as exc:",
            "        log(f'GET request timed out for [{settings.STATS_REGISTRATION_ATTENDEES_JSON_URL}]: {exc}')",
            "        raise RuntimeError(\"Timeout retrieving data from registrations API\") from exc",
            "        except ValueError:",
            "            if response.content.strip() == 'Invalid meeting':",
            "                logger.info('Invalid meeting: {}'.format(meeting.number))",
            "                return (0,0,0)",
            "                raise RuntimeError(\"Could not decode response from registrations API: '%s...'\" % (response.content[:64], ))",
            "                    logger.error(\"No Person record for registration. email={}\".format(address))",
            "            except MeetingRegistration.DoesNotExist:",
            "                pass",
            "        raise RuntimeError(\"Bad response from registrations API: %s, '%s'\" % (response.status_code, response.content))",
            "    repaired_records = 0",
            "    qs = MeetingRegistration.objects.all()",
            "    if meetings:",
            "        qs = qs.filter(meeting__number__in=meetings)",
            "    for mr in qs:",
            "        if mr.email and not mr.person:",
            "            email_person = Person.objects.filter(email__address=mr.email).first()",
            "            if email_person:",
            "                mr.person = email_person",
            "                mr.save()",
            "                repaired_records += 1            ",
            "    return repaired_records",
            "    summary = MeetingRegistrationIssuesSummary()",
            "    summary.could_be_fixed = set()",
            "    summary.maybe_address = set()",
            "    summary.different_person = set()",
            "    summary.no_person = set()",
            "    summary.maybe_person = set()",
            "    summary.no_email = set()",
            "    summary.ok_records = 0",
            "    qs = MeetingRegistration.objects.all()",
            "    if meetings:",
            "        qs = qs.filter(meeting__number__in=meetings)",
            "    for mr in qs:",
            "        if mr.person and mr.email and mr.email in mr.person.email_set.values_list('address',flat=True):",
            "            summary.ok_records += 1",
            "        elif mr.email:",
            "            email_person = Person.objects.filter(email__address=mr.email).first()",
            "            if mr.person:",
            "                if not email_person:",
            "                    summary.maybe_address.add(f'{mr.email} is not present in any Email object. The MeetingRegistration object implies this is an address for {mr.person} ({mr.person.pk})')",
            "                elif email_person != mr.person:",
            "                    summary.different_person.add(f'{mr} ({mr.pk}) has person {mr.person} ({mr.person.pk}) but an email {mr.email} attached to a different person {email_person} ({email_person.pk}).')",
            "            elif email_person:",
            "                summary.could_be_fixed.add(f'{mr} ({mr.pk}) has no person, but email {mr.email} matches {email_person} ({email_person.pk})')",
            "                maybe_person_qs = Person.objects.filter(name__icontains=mr.last_name).filter(name__icontains=mr.first_name)",
            "                if maybe_person_qs.exists():",
            "                    summary.maybe_person.add(f'{mr} ({mr.pk}) has email address {mr.email} which cannot be associated with any Person. Consider these possible people {[(p,p.pk) for p in maybe_person_qs]}')",
            "                    summary.no_person.add(f'{mr} ({mr.pk}) has email address {mr.email} which cannot be associated with any Person')",
            "            summary.no_email.add(f'{mr} ({mr.pk}) provides no email address')",
            "    return summary"
          ]
        ],
        "ietf/stats/views.py": [
          731,
          0.9165526675786593,
          [
            60,
            203,
            204,
            315,
            316,
            329,
            330,
            331,
            333,
            334,
            335,
            336,
            338,
            340,
            341,
            345,
            346,
            348,
            458,
            507,
            558,
            564,
            565,
            566,
            567,
            583,
            584,
            590,
            591,
            592,
            593,
            633,
            848,
            945,
            978,
            1075,
            1076,
            1077,
            1078,
            1100,
            1101,
            1102,
            1103,
            1104,
            1105,
            1110,
            1112,
            1113,
            1133,
            1160,
            1191,
            1234,
            1245,
            1246,
            1247,
            1248,
            1271,
            1276,
            1284,
            1285,
            1286
          ],
          [
            "                    d.setlist(k, v)",
            "            except ValueError:",
            "                pass",
            "                        for dot_ext in types.split(\",\"):",
            "                            bins[dot_ext.lstrip(\".\").upper()].add(doc_name)",
            "                    t = filename.split(\".\", 1)",
            "                    if len(t) != 2:",
            "                        continue",
            "                    basename, ext = t",
            "                    ext = ext.lower()",
            "                    if not any(ext==allowlisted_ext for allowlisted_ext in settings.DOCUMENT_FORMAT_ALLOWLIST):",
            "                        continue",
            "                    name = doc_names_with_missing_types.get(basename)",
            "                    if name:",
            "                        bins[ext.upper()].add(name)",
            "                    percentage = len(names) * 100.0 / (total_docs or 1)",
            "                    series_data.append((fmt, len(names)))",
            "                    table_data.append((fmt, percentage, len(names), list(names)[:names_limit]))",
            "                    alias_data.append((name, alias))",
            "                    alias_data.append((country_name, alias, countries.get(country_name)))",
            "                    bins[citations or 0].add(name)",
            "                    percentage = len(names) * 100.0 / (total_persons or 1)",
            "                    series_data.append((citations, percentage))",
            "                    plain_names = sorted([ plain_name(n) for n in names ])",
            "                    table_data.append((citations, percentage, len(plain_names), list(plain_names)[:names_limit]))",
            "                    h_index = compute_hirsch_index([citations for _, document, citations in ts])",
            "                    bins[h_index or 0].add(name)",
            "                    percentage = len(names) * 100.0 / (total_persons or 1)",
            "                    series_data.append((citations, percentage))",
            "                    plain_names = sorted([ plain_name(n) for n in names ])",
            "                    table_data.append((citations, percentage, len(plain_names), list(plain_names)[:names_limit]))",
            "                doc_years[doc_id].add(time.astimezone(RPC_TZINFO).year)",
            "                        bins[eu_name].add(name)",
            "                            d = {",
            "                            bins[(meeting_number, eu_name)].add(name)",
            "        try:",
            "            return datetime.datetime.strptime(s.strip(), \"%Y-%m-%d\").date()",
            "        except ValueError:",
            "            return None",
            "            if r.name_id == \"secr\":",
            "                secr_access.add(r.group_id)",
            "                reviewer_only_access.discard(r.group_id)",
            "            elif r.name_id == \"reviewer\":",
            "                if not r.group_id in secr_access:",
            "                    reviewer_only_access.add(r.group_id)",
            "        teams = [t for t in teams if t.pk in secr_access or t.pk in reviewer_only_access]",
            "        for t in reviewer_only_access:",
            "            reviewer_filter_args[t] = { \"user\": request.user }",
            "            return HttpResponseRedirect(urlreverse(review_stats))",
            "                return l + [element]",
            "                found_results.add(slug)",
            "                pass",
            "                elif selected_result is not None:",
            "                    v1 = aggr[\"result\"][selected_result]",
            "                elif selected_state is not None:",
            "                    v1 = aggr[\"state\"][selected_state]",
            "                continue",
            "                found_results.add(slug)",
            "            totals = sum_period_review_assignment_stats(sum_raw_review_assignment_aggregations(raw_aggrs))",
            "            totals[\"obj\"] = \"Totals\"",
            "            data.append(totals)"
          ]
        ],
        "ietf/submit/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/submit/checkers.py": [
          195,
          0.764102564102564,
          [
            27,
            31,
            35,
            39,
            87,
            88,
            89,
            110,
            115,
            139,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            171,
            172,
            174,
            175,
            230,
            237,
            245,
            246,
            247,
            248,
            249,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            267,
            268,
            270,
            271
          ],
          [
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "            message = \"idnits error: %s:\\n  Error %s: %s\" %( cmd, code, err)",
            "            log(message)",
            "            passed = False",
            "                    raise RuntimeError(\"Unexpected state in idnits checker: item: %s, line: %s\" % (item, line))",
            "                pass",
            "            return None, \"%s: No such file or directory: '%s'\"%(name.capitalize(), path), errors, warnings, info",
            "            except Exception as exc:",
            "                sys.stdout = saved_stdout",
            "                sys.stderr = saved_stderr",
            "                msg = \"Exception when running xym on %s: %s\" % (name, exc)",
            "                log(msg)",
            "                raise",
            "                return None, msg, 0, 0, info",
            "                code += 1",
            "                err += \"Error: Bad extracted model name: '%s'\\n\" % m",
            "            code += 1",
            "            err += \"Error: Multiple models with the same name:\\n  %s\\n\" % (\"\\n  \".join(model_list))",
            "                                    line = text[lnum-1].rstrip()",
            "                                    warnings += 1",
            "                if settings.SUBMIT_YANGLINT_COMMAND and os.path.exists(settings.YANGLINT_BINARY):",
            "                    cmd_template = settings.SUBMIT_YANGLINT_COMMAND",
            "                    command = [ w for w in cmd_template.split() if not '=' in w ][0]",
            "                    cmd_version = VersionInfo.objects.get(command=command).version",
            "                    cmd = cmd_template.format(model=path, rfclib=settings.SUBMIT_YANG_RFC_MODEL_DIR, tmplib=workdir,",
            "                    code, out, err = pipe(cmd)",
            "                    out = out.decode('utf-8')",
            "                    err = err.decode('utf-8')",
            "                    if code > 0 or len(err.strip()) > 0:",
            "                        err_lines = err.splitlines()",
            "                        for line in err_lines:",
            "                            if line.strip():",
            "                                try:",
            "                                    if 'err : ' in line:",
            "                                        errors += 1",
            "                                    if 'warn: ' in line:",
            "                                        warnings += 1",
            "                                except ValueError:",
            "                                    pass",
            "                    message += \"%s: %s:\\n%s\\n\" % (cmd_version, cmd_template, out+\"No validation errors\\n\" if (code == 0 and len(err) == 0) else out+err)",
            "                set_coverage_checking(True)",
            "                errors += 1",
            "                message += \"No such file: %s\\nPossible mismatch between extracted xym file name and returned module name?\\n\" % (path)"
          ]
        ],
        "ietf/submit/forms.py": [
          588,
          0.7908163265306122,
          [
            96,
            102,
            103,
            105,
            107,
            108,
            112,
            116,
            135,
            136,
            137,
            139,
            140,
            141,
            142,
            143,
            144,
            176,
            177,
            181,
            223,
            243,
            248,
            255,
            260,
            289,
            337,
            345,
            354,
            355,
            358,
            360,
            369,
            376,
            377,
            378,
            379,
            380,
            382,
            383,
            384,
            385,
            386,
            387,
            390,
            395,
            398,
            399,
            436,
            437,
            438,
            442,
            445,
            452,
            453,
            485,
            486,
            487,
            488,
            503,
            504,
            505,
            506,
            520,
            521,
            522,
            524,
            525,
            526,
            527,
            528,
            529,
            530,
            535,
            539,
            540,
            541,
            542,
            543,
            544,
            545,
            546,
            547,
            548,
            549,
            550,
            551,
            552,
            553,
            554,
            555,
            556,
            557,
            558,
            559,
            568,
            571,
            579,
            600,
            658,
            659,
            661,
            669,
            769,
            770,
            786,
            809,
            813,
            821,
            832,
            836,
            838,
            844,
            846,
            875,
            876,
            877,
            881,
            884,
            889,
            894,
            902,
            908
          ],
          [
            "                self.cutoff_warning = ( 'The last submission time for Internet-Drafts before %s is %s.<br><br>' % (meeting, cutoff_00_str))",
            "            if now.date() >= (cutoff_00.date() - meeting.idsubmit_cutoff_warning_days) and now.date() < cutoff_00.date():",
            "                self.cutoff_warning = ( 'The last submission time for new documents (i.e., version -00 Internet-Drafts) before %s is %s.<br><br>' % (meeting, cutoff_00_str) +",
            "            elif now.date() >= cutoff_00.date() and now <= cutoff_01:",
            "                if now < cutoff_00:",
            "                    self.cutoff_warning = (",
            "                    self.cutoff_warning = (",
            "                    self.in_first_cut_off = True",
            "            m = str(e)",
            "            if m:",
            "                m = [m]",
            "                import traceback",
            "                typ, val, tb = sys.exc_info()",
            "                m = traceback.format_exception(typ, val, tb)",
            "                m = [l.replace('\\n ', ':\\n ') for l in m]",
            "            msgs = [s for s in ([f\"Error from xml2rfc ({where}):\"] + m + log_msgs) if s]",
            "            return msgs",
            "                    msgs = format_messages('xml', e, e.parser_msgs())",
            "                    raise forms.ValidationError(msgs, code=\"xml_parse_error\")",
            "                    raise forms.ValidationError(",
            "                raise forms.ValidationError(",
            "                raise forms.ValidationError(",
            "                raise forms.ValidationError(",
            "            raise forms.ValidationError(",
            "            raise forms.ValidationError(",
            "            raise forms.ValidationError(mark_safe(self.cutoff_warning))",
            "                raise forms.ValidationError(\"The Internet-Draft name \\\"%s\\\" is missing a third part, please rename it\" % name)",
            "                    group_type = None",
            "                except Group.DoesNotExist:",
            "                    raise forms.ValidationError('There is no active group with acronym \\'%s\\', please rename your Internet-Draft' % name_parts[2])",
            "                return Group.objects.get(acronym=\"iesg\")",
            "                return Group.objects.get(acronym=\"rfceditor\")",
            "                        raise forms.ValidationError('Internet-Draft names starting with draft-%s- are restricted, please pick a different name' % ntype)",
            "            out = log.write_out.getvalue().splitlines()",
            "            err = log.write_err.getvalue().splitlines()",
            "            m = str(e)",
            "            if m:",
            "                m = [ m ]",
            "                import traceback",
            "                typ, val, tb = sys.exc_info()",
            "                m = traceback.format_exception(typ, val, tb)",
            "                m = [ l.replace('\\n ', ':\\n ') for l in m ]",
            "            msgs = [s for s in ([\"Error from xml2rfc (%s):\" % (where,)] + m + out +  err) if s]",
            "            return msgs",
            "            raise forms.ValidationError(self.cutoff_warning)",
            "                continue",
            "            if not self.errors:",
            "                raise forms.ValidationError('Unexpected submission file types; found %s, but %s is required' % (', '.join(self.file_types), ' or '.join(self.base_formats)))",
            "                        v2v3 = xml2rfc.V2v3XmlWriter(self.xmltree)",
            "                        self.xmltree.tree = v2v3.convert2to3()",
            "                        self.xmlroot = self.xmltree.getroot()  # update to the new root",
            "                        self.add_error('xml', \"No docName attribute found in the xml root element\")",
            "                        self.add_error('xml', name_error) # This is a critical and immediate failure - do not proceed with other validation.",
            "                            self.revision = None",
            "                            self.filename = draftname",
            "                                self.add_error('xml', \"Error from xml2rfc (prep): %s\" % prep.errors)",
            "                        except Exception as e:",
            "                                msgs = format_messages('prep', e, xml2rfc.log)",
            "                                self.add_error('xml', msgs)",
            "                            except Exception as e:",
            "                                msgs = format_messages('txt', e, xml2rfc.log)",
            "                                log.log('\\n'.join(msgs))",
            "                                self.add_error('xml', msgs)",
            "                        except Exception as e:",
            "                            msgs = format_messages('html', e, xml2rfc.log)",
            "                            self.add_error('xml', msgs)",
            "                except Exception as e:",
            "                    try:",
            "                        msgs = format_messages('txt', e, xml2rfc.log)",
            "                        log.log('\\n'.join(msgs))",
            "                        self.add_error('xml', msgs)",
            "                    except Exception:",
            "                        self.add_error('xml', \"An exception occurred when trying to process the XML file: %s\" % e)",
            "            raise forms.ValidationError('')",
            "            txt_file = self.cleaned_data['txt']",
            "            txt_file.seek(0)",
            "            bytes = txt_file.read()",
            "            txt_file.seek(0)",
            "            try:",
            "                text = bytes.decode(PlainParser.encoding)",
            "                self.parsed_draft = PlaintextDraft(text, txt_file.name)",
            "                if self.filename == None:",
            "                    self.filename = self.parsed_draft.filename",
            "                elif self.filename != self.parsed_draft.filename:",
            "                    self.add_error('txt', \"Inconsistent name information: xml:%s, txt:%s\" % (self.filename, self.parsed_draft.filename))",
            "                if self.revision == None:",
            "                    self.revision = self.parsed_draft.revision",
            "                elif self.revision != self.parsed_draft.revision:",
            "                    self.add_error('txt', \"Inconsistent revision information: xml:%s, txt:%s\" % (self.revision, self.parsed_draft.revision))",
            "                if self.title == None:",
            "                    self.title = self.parsed_draft.get_title()",
            "                elif self.title != self.parsed_draft.get_title():",
            "                    self.add_error('txt', \"Inconsistent title information: xml:%s, txt:%s\" % (self.title, self.parsed_draft.get_title()))",
            "            except (UnicodeDecodeError, LookupError) as e:",
            "                self.add_error('txt', 'Failed decoding the uploaded file: \"%s\"' % str(e))",
            "            raise forms.ValidationError('')",
            "            raise forms.ValidationError(\"Could not extract a valid Internet-Draft name from the upload.  \"",
            "            raise forms.ValidationError(\"Could not extract a valid Internet-Draft revision from the upload.  \"",
            "                raise forms.ValidationError(mark_safe(self.cutoff_warning))",
            "            except (UnicodeDecodeError, LookupError) as e:",
            "                raise forms.ValidationError(f'Failed decoding the uploaded file: \"{str(e)}\"', code=\"decode_failed\")",
            "                raise forms.ValidationError(",
            "                raise forms.ValidationError(",
            "            except:",
            "                pass",
            "                raise forms.ValidationError(\"An Internet-Draft can only replace another Internet-Draft\")",
            "            rev = \"0\" + rev",
            "            raise forms.ValidationError(error)",
            "            raise forms.ValidationError(error)",
            "            raise forms.ValidationError(error_msg)",
            "            raise forms.ValidationError(\"Name appears to end with a revision number -00 - do not include the revision.\")",
            "            raise forms.ValidationError(\"Name has less than four dash-delimited components - can't form a valid group Internet-Draft name.\")",
            "            raise forms.ValidationError(\"Pre-approval for this name already exists.\")",
            "            raise forms.ValidationError(\"An Internet-Draft with this name has already been submitted and accepted. A pre-approval would not make any difference.\")",
            "        except Exception as e:",
            "            self.add_error('message', e)",
            "            return None",
            "                raise forms.ValidationError('Error parsing email: {} field not found.'.format(field))",
            "            raise forms.ValidationError('Error parsing email date field')",
            "            return self.cleaned_data",
            "            self.add_error('name', ",
            "                raise forms.ValidationError(error)",
            "            self.add_error('direction', \"Must be one of 'outgoing' or 'incoming'\")"
          ]
        ],
        "ietf/submit/mail.py": [
          204,
          0.8872549019607843,
          [
            100,
            135,
            136,
            157,
            158,
            163,
            191,
            224,
            228,
            229,
            230,
            234,
            235,
            236,
            239,
            240,
            312,
            313,
            314,
            319,
            339,
            367,
            368
          ],
          [
            "        return to_email",
            "        except Person.DoesNotExist:",
            "            pass",
            "        except Person.DoesNotExist:",
            "            pass",
            "        m.reply_to = m.cc",
            "        group = 'IESG'",
            "        return None",
            "    except Message.DoesNotExist:",
            "        log('Error finding matching message ({})'.format(to))",
            "        return None",
            "    except:",
            "        log('Error processing message ({})'.format(to))",
            "        return None",
            "        log('Error processing message - no submission ({})'.format(to))",
            "        return None",
            "        except Exception as e:",
            "            log(\"Exception: %s\\n\" % e)",
            "            raise",
            "        rs = \"Sent\"",
            "        by = Person.objects.get(name=\"(System)\")",
            "            payload = base64.b64encode(part.get_payload())",
            "            encoding = \"base64\""
          ]
        ],
        "ietf/submit/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/submit/models.py": [
          115,
          0.9391304347826087,
          [
            65,
            142,
            144,
            146,
            155,
            171,
            179
          ],
          [
            "        return \"%s-%s\" % (self.name, self.rev)",
            "        return \"%s submission check: %s: %s\" % (self.checker, 'Passed' if self.passed else 'Failed', self.message[:48]+'...')",
            "        return self.warnings != '[]'",
            "        return self.errors != '[]'",
            "        return \"%s %s by %s at %s\" % (self.submission.name, self.desc, self.by.plain_name() if self.by else \"(unknown)\", self.time)",
            "        return self.name",
            "        return \"%s %s by %s at %s\" % (self.submission.name, self.desc, self.by.plain_name() if self.by else \"(unknown)\", self.time)"
          ]
        ],
        "ietf/submit/parsers/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/submit/parsers/base.py": [
          60,
          0.9666666666666667,
          [
            45,
            46
          ],
          [
            "        warn_list = self.warnings.get(warning_type, [])",
            "        self.warnings[warning_type] = warn_list + [warning_str]"
          ]
        ],
        "ietf/submit/parsers/pdf_parser.py": [
          7,
          0,
          [
            1,
            4,
            5,
            6,
            10,
            11,
            12
          ],
          [
            "from ietf.submit.parsers.base import FileParser",
            "class PDFParser(FileParser):",
            "    ext = 'pdf'",
            "    mimetypes = ['application/pdf', ]",
            "    def critical_parse(self):",
            "        super(PDFParser, self).critical_parse()",
            "        return self.parsed_info"
          ]
        ],
        "ietf/submit/parsers/plain_parser.py": [
          41,
          0.926829268292683,
          [
            33,
            34,
            48
          ],
          [
            "            except UnicodeDecodeError:",
            "                return",
            "                    self.parsed_info.add_error(('The document name on the first page, \"%s\", contains disallowed characters with byte codes: %s ' % (name, (', '.join([ str(ord(c)) for c in extra_chars] )))) +"
          ]
        ],
        "ietf/submit/parsers/xml_parser.py": [
          6,
          1,
          [],
          []
        ],
        "ietf/submit/resources.py": [
          79,
          1,
          [],
          []
        ],
        "ietf/submit/tasks.py": [
          33,
          0.8181818181818181,
          [
            19,
            20,
            21,
            22,
            24,
            56
          ],
          [
            "    try:",
            "        submission = Submission.objects.get(pk=submission_id)",
            "    except Submission.DoesNotExist:",
            "        log.log(f'process_uploaded_submission_task called for missing submission_id={submission_id}')",
            "        process_uploaded_submission(submission)",
            "    log.log(f'Poked {self.name}, request id {self.request.id}')"
          ]
        ],
        "ietf/submit/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/submit/templatetags/submit_tags.py": [
          30,
          0.8,
          [
            37,
            38,
            39,
            40,
            41,
            42
          ],
          [
            "    result = '<pre>\\n'",
            "    for line in pages.split('\\n'):",
            "        result += escape(line)",
            "        result += '\\n'",
            "    result += '</pre>\\n'",
            "    return mark_safe(result)"
          ]
        ],
        "ietf/submit/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/submit/utils.py": [
          851,
          0.9012925969447708,
          [
            107,
            108,
            129,
            159,
            215,
            216,
            237,
            259,
            268,
            270,
            271,
            272,
            273,
            275,
            336,
            338,
            515,
            518,
            531,
            532,
            560,
            640,
            641,
            642,
            643,
            644,
            645,
            656,
            658,
            679,
            697,
            716,
            774,
            781,
            782,
            784,
            786,
            787,
            788,
            789,
            790,
            792,
            793,
            794,
            796,
            797,
            799,
            800,
            801,
            802,
            803,
            804,
            805,
            807,
            808,
            809,
            811,
            819,
            836,
            837,
            839,
            949,
            1123,
            1125,
            1187,
            1188,
            1189,
            1190,
            1191,
            1192,
            1193,
            1258,
            1274,
            1291,
            1324,
            1326,
            1327,
            1328,
            1343,
            1407,
            1408,
            1417,
            1418,
            1419
          ],
          [
            "            author['errors'].append(\"Duplicate email address.  A unique email address is required.\")",
            "            author_error_count += 1",
            "            name = name[:-3]",
            "            return 'Revision must be between 00 and 99'",
            "        except Person.DoesNotExist:",
            "            pass",
            "            by = Person.objects.get(name=\"(System)\")",
            "            e = SubmissionDocEvent(type=\"new_submission\", doc=draft, submission=submission, rev=submission.rev)",
            "                    desc = \"Request for posting approval emailed %s\" % (subevent.desc[pos + 19:])",
            "            e = AddedMessageEvent(type=\"added_message\", doc=draft)",
            "            e.message = subevent.submissionemailevent.message",
            "            e.msgtype = subevent.submissionemailevent.msgtype",
            "            e.in_reply_to = subevent.submissionemailevent.in_reply_to",
            "            continue",
            "            stream_slug = \"iab\"",
            "            stream_slug = \"irtf\"",
            "            continue",
            "            continue",
            "    except Person.DoesNotExist:",
            "        by = Person.objects.get(name=\"(System)\")",
            "        persons = Person.objects.none()",
            "    for ext in settings.IDSUBMIT_FILE_TYPES:",
            "        staging_path = Path(settings.IDSUBMIT_STAGING_PATH) ",
            "        source = staging_path / f\"{submission.name}-{prev_rev}.{ext}\"",
            "        dest = staging_path / f\"{submission.name}-{new_rev}.{ext}\"",
            "        if source.exists():",
            "            move(source, dest)",
            "            log.log(\"Intended to move '%s' to '%s', but found source missing while destination exists.\")",
            "            raise ValueError(\"Intended to move '%s' to '%s', but found source and destination missing.\")",
            "        return []",
            "        return []",
            "        return []",
            "        file_size = form.cleaned_data['txt'].size",
            "        for author in form.parsed_draft.get_author_list():",
            "            full_name, first_name, middle_initial, last_name, name_suffix, email, country, company = author",
            "            name = full_name.replace(\"\\n\", \"\").replace(\"\\r\", \"\").replace(\"<\", \"\").replace(\">\", \"\").strip()",
            "            if email:",
            "                try:",
            "                    validate_email(email)",
            "                except ValidationError:",
            "                    email = \"\"",
            "            def turn_into_unicode(s):",
            "                if s is None:",
            "                    return \"\"",
            "                if isinstance(s, str):",
            "                    return s",
            "                    try:",
            "                        return s.decode(\"utf-8\")",
            "                    except UnicodeDecodeError:",
            "                        try:",
            "                            return s.decode(\"latin-1\")",
            "                        except UnicodeDecodeError:",
            "                            return \"\"",
            "            name = turn_into_unicode(name)",
            "            email = turn_into_unicode(email)",
            "            company = turn_into_unicode(company)",
            "            authors.append({",
            "        abstract = form.abstract",
            "    elif len(submissions) == 1:",
            "        submission = submissions.first()",
            "        raise Exception(\"Multiple submissions found waiting for upload\")",
            "        raise SubmissionError(f'Error from xml2rfc (prep): {prep.errors}')",
            "        remote_ip = request.META.get('CF-Connecting-IP')",
            "        remote_ip = request.META.get('X-Forwarded-For').split(',')[0]",
            "        try:",
            "            return s.decode(\"utf-8\")",
            "        except UnicodeDecodeError:",
            "            try:",
            "                return s.decode(\"latin-1\")",
            "            except UnicodeDecodeError:",
            "                return \"\"",
            "        raise SubmissionError(\"Require XML and/or text format to process an Internet-Draft submission.\")",
            "            raise SubmissionError(",
            "            raise SubmissionError(\"Could not determine the title of the draft\")",
            "    except Exception:",
            "        log.log(f'Unexpected exception while processing submission {submission.pk}.')",
            "        log.log(traceback.format_exc())",
            "        raise SubmissionError('A system error occurred while processing the submission.')",
            "    return False",
            "        log.log(f'Submission {submission.pk} is not in \"validating\" state, skipping.')",
            "        return  # do nothing",
            "    except SubmissionError as err:",
            "        cancel_submission(submission)  # changes Submission.state",
            "        create_submission_event(None, submission, f\"Submission rejected: {err}\")"
          ]
        ],
        "ietf/submit/views.py": [
          571,
          0.8476357267950964,
          [
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            121,
            125,
            163,
            164,
            168,
            169,
            170,
            173,
            174,
            176,
            216,
            219,
            222,
            225,
            235,
            254,
            257,
            268,
            269,
            273,
            274,
            275,
            276,
            300,
            318,
            366,
            442,
            469,
            470,
            473,
            475,
            476,
            484,
            501,
            527,
            541,
            579,
            616,
            639,
            645,
            688,
            702,
            707,
            760,
            796,
            807,
            820,
            832,
            853,
            854,
            855,
            856,
            857,
            858,
            859,
            860,
            863,
            864,
            865,
            866,
            892,
            915,
            916,
            917,
            918,
            919,
            959,
            960,
            961,
            962,
            963,
            964,
            965,
            1007,
            1012,
            1028,
            1034,
            1035
          ],
          [
            "                    elif email.count() > 1:",
            "                        return err(500, \"Multiple matching accounts for %s\" % username)",
            "                    email = email.first()",
            "                    if not hasattr(email, 'person'):",
            "                        return err(400, \"No person matches %s\" % username)",
            "                    person = email.person",
            "                    if not hasattr(person, 'user'):",
            "                        return err(400, \"No user matches: %s\" % username)",
            "                    user = person.user",
            "                    return err(500, \"Multiple matching accounts for %s\" % username)",
            "                    return err(400, \"No person with username %s\" % username)",
            "            exception = e",
            "            return err(500, 'IO Error', str(e))",
            "        except Exception as e:",
            "            exception = e",
            "            raise",
            "                remove_submission_files(submission)",
            "                submission.delete()",
            "        return err(405, \"Method not allowed\")",
            "                        return err(500, \"Multiple matching accounts for %s\" % username)",
            "                        return err(400, \"No person matches %s\" % username)",
            "                        return err(400, \"No user matches: %s\" % username)",
            "                    return err(500, \"Multiple matching accounts for %s\" % username)",
            "                        raise ValidationError(\"Missing email address for author %s\" % a)",
            "                    raise ValidationError(errors)",
            "                    raise ValidationError('Submitter %s is not one of the document authors' % user.username)",
            "            exception = e",
            "            return err(500, \"IO Error: %s\" % str(e))",
            "        except Exception as e:",
            "            exception = e",
            "            raise",
            "            return err(500, \"Exception: %s\" % str(e))",
            "        error = 'No valid submission found for %s' % name",
            "        raise Http404",
            "            message = (",
            "                permission_denied(request, \"You do not have permission to perform this action\")",
            "                    if not is_secretariat:",
            "                        permission_denied(request, 'You do not have permission to perform this action')",
            "                    docevent_from_submission(submission, desc=\"Uploaded new revision\")",
            "                    desc = \"Secretariat manually posting. Approvals already received\"",
            "                    post_submission(request, submission, desc, desc)",
            "                    return redirect(\"ietf.submit.views.submission_status\", submission_id=submission.pk)",
            "                permission_denied(request, 'You do not have permission to perform this action.')",
            "                permission_denied(request, 'You do not have permission to perform this action.')",
            "            return HttpResponseRedirect(\"\")",
            "        permission_denied(request, 'You do not have permission to access this page.')",
            "                rename_submission_files(submission, prev_submission.rev, submission.rev)",
            "                desc = \"Sent request for manual post\"",
            "            form_errors = True",
            "                desc = \"New version approved by author\"",
            "                messages.error(request, 'The submission is not in a state where it can be cancelled.')",
            "            raise RuntimeError(\"Unexpected state in confirm_submission()\")",
            "        raise HttpResponseForbidden(\"You do not have permission to cancel this preapproval.\")",
            "            permission_denied(request, 'You do not have permission to perform this action.')",
            "            docevent_from_submission(submission, \"Cancelled submission for rev {}\".format(submission.rev))",
            "                return redirect(\"submit/manual_post.html\")",
            "                    msgtype = 'msgout'",
            "                    e = AddedMessageEvent(type=\"added_message\", doc=draft)",
            "                    e.message = submission_email_event.submissionemailevent.message",
            "                    e.msgtype = submission_email_event.submissionemailevent.msgtype",
            "                    e.in_reply_to = submission_email_event.submissionemailevent.in_reply_to",
            "                    e.by = request.user.person",
            "                    e.desc = submission_email_event.desc",
            "                    e.time = submission_email_event.time",
            "                    e.save()",
            "        except ValidationError as e:",
            "            form = SubmissionEmailForm(request.POST)",
            "            form._errors = {}",
            "            form._errors[\"__all__\"] = form.error_class([\"There was a failure uploading your message. (%s)\" % e.message])",
            "            return redirect('ietf.submit.views.submission_status',",
            "                rp = \" reply\"",
            "                try:",
            "                    in_reply_to = Message.objects.get(id=in_reply_to_id)",
            "                except Message.DoesNotExist:",
            "                    log(\"Unable to retrieve in_reply_to message: %s\" % in_reply_to_id)",
            "                    to_email = None",
            "                    cc = None",
            "                    subject = 'Regarding {}'.format(submission.name)",
            "            except Message.DoesNotExist:",
            "                to_email = None",
            "                cc = None",
            "                subject = 'Regarding {}'.format(submission.name)",
            "        body = base64.b64decode(attach.body)",
            "        content_type='text/plain'",
            "        raise Http404",
            "    result = poke.delay()",
            "    return HttpResponse(f'Poked {result}', content_type='text/plain')"
          ]
        ],
        "ietf/sync/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/sync/discrepancies.py": [
          22,
          1,
          [],
          []
        ],
        "ietf/sync/iana.py": [
          169,
          0.8875739644970415,
          [
            69,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            99,
            171,
            172,
            177,
            178,
            250,
            256,
            261,
            278
          ],
          [
            "    url += \"?start=%s&end=%s\" % (urlquote(start.astimezone(datetime.timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S\")),",
            "    username = \"ietfsync\"",
            "    password = settings.IANA_SYNC_PASSWORD",
            "    headers = { \"Authorization\": \"Basic %s\" % force_str(base64.encodebytes(smart_bytes(\"%s:%s\" % (username, password)))).replace(\"\\n\", \"\") }",
            "    try:",
            "        response = requests.get(url, headers=headers, timeout=settings.DEFAULT_REQUESTS_TIMEOUT)",
            "    except requests.Timeout as exc:",
            "        log(f'GET request failed for [{url}]: {exc}')",
            "        raise RuntimeError(f'Timeout retrieving [{url}]') from exc",
            "    return response.text",
            "            i[\"doc\"] = i[\"doc\"][len(\"https://www.ietf.org/internet-drafts/\"):]",
            "                    warnings.append(\"Wrong action state '%s' encountered in changes from IANA\" % c[\"state\"])",
            "                    continue",
            "                warnings.append(\"Unknown IANA %s state %s (%s)\" % (kind, c[\"state\"], timestamp))",
            "                continue",
            "            review_time = review_time.replace(tzinfo=datetime.timezone.utc)",
            "        name = name[:-len(\" via RT\")]",
            "        by = Person.objects.get(name=\"(System)\")",
            "        comment = \"\""
          ]
        ],
        "ietf/sync/mails.py": [
          7,
          0,
          [
            1,
            2,
            4,
            6,
            8,
            9,
            11
          ],
          [
            "from django.urls import reverse as urlreverse",
            "from django.conf import settings",
            "from ietf.utils.mail import send_mail",
            "from ietf.sync.discrepancies import find_discrepancies",
            "def email_discrepancies(receivers):",
            "    sections = find_discrepancies()",
            "    send_mail(None,"
          ]
        ],
        "ietf/sync/rfceditor.py": [
          451,
          0.8070953436807095,
          [
            95,
            111,
            112,
            113,
            114,
            115,
            116,
            118,
            119,
            120,
            121,
            122,
            123,
            167,
            168,
            171,
            172,
            235,
            236,
            239,
            253,
            254,
            255,
            306,
            324,
            327,
            328,
            329,
            330,
            409,
            423,
            424,
            503,
            504,
            507,
            525,
            529,
            530,
            531,
            532,
            533,
            534,
            537,
            538,
            539,
            572,
            573,
            576,
            577,
            581,
            582,
            583,
            585,
            605,
            609,
            630,
            633,
            636,
            666,
            667,
            670,
            671,
            688,
            696,
            697,
            701,
            702,
            703,
            704,
            721,
            722,
            724,
            725,
            726,
            727,
            729,
            730,
            731,
            732,
            756,
            819,
            822,
            824,
            827,
            828,
            829,
            831
          ],
          [
            "                        cluster = child.firstChild.data",
            "                elif name.startswith(\"IAB\"):",
            "                    stream = \"iab\"",
            "                elif name.startswith(\"IRTF\"):",
            "                    stream = \"irtf\"",
            "                elif name.startswith(\"INDEPENDENT\"):",
            "                    stream = \"ise\"",
            "                    stream = None",
            "                    warnings.append(\"unrecognized section \" + name)",
            "        except Exception as e:",
            "            log(\"Exception when processing an RFC queue entry: %s\" % e)",
            "            log(\"node: %s\" % node)",
            "            raise",
            "            warnings.append(\"unknown document %s\" % name)",
            "            continue",
            "            warnings.append(\"unknown state '%s' for %s\" % (state, name))",
            "            continue",
            "        d.tags.remove(*list(tag_mapping.values()))",
            "        d.unset_state(\"draft-rfceditor\")",
            "        changed.add(name)",
            "            except ValueError:",
            "                pass",
            "        return std_name",
            "                    wg = None",
            "                    has_errata = 0",
            "        except Exception as e:",
            "            log(\"Exception when processing an RFC index entry: %s\" % e)",
            "            log(\"node: %s\" % node)",
            "            raise",
            "            continue",
            "            except Document.DoesNotExist:",
            "                pass",
            "                log(f'Warning while processing {doc.name}: {draft.name} has no \"draft-iesg\" state')",
            "                new_iesg_state = State.objects.get(type_id=\"draft-iesg\", slug=\"idexists\")",
            "                    log(",
            "                log(\"Warning while processing {}: draft {} stream is {} but RFC stream is {}\".format(",
            "                stream_slug = f\"draft-stream-{draft.stream.slug}\"",
            "                prev_state = draft.get_state(stream_slug)",
            "                if prev_state is not None and prev_state.slug != \"pub\":",
            "                    new_state = State.objects.select_related(\"type\").get(used=True, type__slug=stream_slug, slug=\"pub\")",
            "                    draft.set_state(new_state)",
            "                    draft_changes.append(",
            "                    e = update_action_holders(draft, prev_state, new_state)",
            "                    if e:",
            "                        draft_events.append(e)",
            "            doc.stream = stream_mapping[stream]",
            "            rfc_changes.append(f\"{verbed} stream to {doc.stream}\")",
            "            doc.set_state(rfc_published_state)",
            "            rfc_changes.append(f\"{verbed} {rfc_published_state.type.label} to {rfc_published_state}\")",
            "            if wg:",
            "                doc.group = Group.objects.get(acronym=wg)",
            "                rfc_changes.append(f\"set group to {doc.group}\")",
            "                doc.group = Group.objects.get(",
            "                synthesized = d",
            "                    synthesized += datetime.timedelta(days=direction)",
            "            if not RelatedDocument.objects.filter(",
            "                r = RelatedDocument.objects.create(",
            "                rfc_changes.append(",
            "                    log(f\"Unexpected 'also' relationship of {a} encountered for {doc}\")",
            "                    next",
            "                    log(f\"Unexpected 'also' subseries element identifier {a} encountered for {doc}\")",
            "                    next",
            "                        subseries_doc.docevent_set.create(type=f\"{subseries_slug}_doc_created\", by=system, desc=f\"Created {subseries_doc_name} via sync to the rfc-index\")",
            "                        subseries_doc.docevent_set.create(type=\"sync_from_rfc_editor\", by=system, desc=f\"Added {doc.name} to {subseries_doc.name}\")",
            "                        rfc_events.append(doc.docevent_set.create(type=\"sync_from_rfc_editor\", by=system, desc=f\"Added {doc.name} to {subseries_doc.name}\"))",
            "                assert(not first_sync_creating_subseries)",
            "                subseries_doc.relateddocument_set.filter(target=subdoc).delete()",
            "                rfc_events.append(doc.docevent_set.create(type=\"sync_from_rfc_editor\", by=system, desc=f\"Removed {doc.name} from {subseries_doc.name}\"))",
            "                subseries_doc.docevent_set.create(type=\"sync_from_rfc_editor\", by=system, desc=f\"Removed {doc.name} from {subseries_doc.name}\")",
            "                doc.tags.add(tag_has_verified_errata)",
            "                rfc_changes.append(\"added Verified Errata tag\")",
            "            if doc.tags.filter(pk=tag_has_errata.pk):",
            "                doc.tags.remove(tag_has_errata)",
            "                if all_rejected:",
            "                    rfc_changes.append(\"removed Errata tag (all errata rejected)\")",
            "                    rfc_changes.append(\"removed Errata tag\")",
            "            if doc.tags.filter(pk=tag_has_verified_errata.pk):",
            "                doc.tags.remove(tag_has_verified_errata)",
            "                rfc_changes.append(\"removed Verified Errata tag\")",
            "                log(f\"Warning: {name} unexpectedly already exists\")",
            "            raise RuntimeError(\"Status code is not 200 OK (it's %s).\" % r.status_code)",
            "            raise RuntimeError('Response is not \"OK\" (it\\'s \"%s\").' % r.text)",
            "    except Exception as e:",
            "        msg = \"Exception on RFC-Editor notification for Internet-Draft '%s': %s: %s\" % (name, type(e), str(e))",
            "        log(msg)",
            "        if settings.SERVER_MODE == 'test':",
            "        error = str(e)"
          ]
        ],
        "ietf/sync/urls.py": [
          3,
          1,
          [],
          []
        ],
        "ietf/sync/views.py": [
          96,
          0.6354166666666666,
          [
            45,
            56,
            57,
            59,
            60,
            61,
            62,
            63,
            65,
            66,
            79,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            94,
            96,
            97,
            99,
            100,
            102,
            103,
            105,
            106,
            108,
            135,
            136,
            142
          ],
          [
            "        raise Http404",
            "        if settings.SERVER_MODE == \"production\" and not request.is_secure():",
            "            permission_denied(request, \"You must use HTTPS when sending username/password.\")",
            "        if not user.is_authenticated:",
            "            try:",
            "                user = User.objects.get(username__iexact=username)",
            "            except User.DoesNotExist:",
            "                return HttpResponse(\"Invalid username/password\")",
            "            if not user.check_password(password):",
            "                return HttpResponse(\"Invalid username/password\")",
            "        raise Http404",
            "        def runscript(name):",
            "            python = os.path.join(os.path.dirname(settings.BASE_DIR), \"env\", \"bin\", \"python\")",
            "            cmd = [python, os.path.join(SYNC_BIN_PATH, name)]",
            "            cmdstring = \" \".join(cmd)",
            "            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)",
            "            out, err = p.communicate()",
            "            out = out.decode('utf-8')",
            "            err = err.decode('utf-8')",
            "            if p.returncode:",
            "                log(\"Subprocess error %s when running '%s': %s %s\" % (p.returncode, cmd, err, out))",
            "                raise subprocess.CalledProcessError(p.returncode, cmdstring, \"\\n\".join([err, out]))",
            "        log(\"Running sync script from notify view POST\")",
            "        if notification == \"protocols\":",
            "            runscript(\"iana-protocols-updates\")",
            "        if notification == \"changes\":",
            "            runscript(\"iana-changes-updates\")",
            "        if notification == \"queue\":",
            "            runscript(\"rfc-editor-queue-updates\")",
            "        if notification == \"index\":",
            "            runscript(\"rfc-editor-index-updates\")",
            "        return HttpResponse(\"OK\", content_type=\"text/plain; charset=%s\"%settings.DEFAULT_CHARSET)",
            "        except ValueError:",
            "            return HttpResponse(\"Could not parse event id\")",
            "            return HttpResponse(\"Event does not exist\")"
          ]
        ],
        "ietf/urls.py": [
          30,
          0.8333333333333333,
          [
            28,
            29,
            95,
            98,
            99
          ],
          [
            "except KeyError:",
            "    pass",
            "    try:",
            "    except ImportError:",
            "        pass"
          ]
        ],
        "ietf/utils/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/utils/accesstoken.py": [
          8,
          1,
          [],
          []
        ],
        "ietf/utils/aliases.py": [
          41,
          0.8048780487804877,
          [
            28,
            31,
            33,
            36,
            64,
            75,
            79,
            80
          ],
          [
            "        return",
            "        return",
            "        email = email[1:-1]",
            "        return",
            "        return emails",
            "    except UnicodeEncodeError:",
            "        log('Error encoding email address for an %s alias: %s' % (alias, repr(emails)))",
            "        return []"
          ]
        ],
        "ietf/utils/bootstrap.py": [
          8,
          0.375,
          [
            9,
            10,
            11,
            12,
            13
          ],
          [
            "        if self.field_help:",
            "            html += '<div class=\"form-text\">{}</div>'.format(self.field_help)",
            "        for e in self.field_errors:",
            "            html += '<div class=\"alert alert-danger my-3\">{}</div>'.format(e)",
            "        return html"
          ]
        ],
        "ietf/utils/cache.py": [
          12,
          0,
          [
            4,
            5,
            6,
            8,
            11,
            13,
            14,
            15,
            16,
            17,
            18,
            20
          ],
          [
            "from django.core.cache.backends.base import DEFAULT_TIMEOUT",
            "from django.core.cache.backends.memcached import PyMemcacheCache",
            "from pymemcache.exceptions import MemcacheServerError",
            "from .log import log",
            "class LenientMemcacheCache(PyMemcacheCache):",
            "    def set(self, key, value, timeout=DEFAULT_TIMEOUT, version=None):",
            "        try:",
            "            super().set(key, value, timeout, version)",
            "        except MemcacheServerError as err:",
            "            if \"object too large for cache\" in str(err):",
            "                log(f\"Memcache failed to cache large object for {key}\")",
            "                raise"
          ]
        ],
        "ietf/utils/db.py": [
          13,
          0.7692307692307692,
          [
            26,
            27,
            28
          ],
          [
            "        if 'form_class' not in kwargs or issubclass(kwargs['form_class'], FormIETFJSONField):",
            "            kwargs.setdefault('empty_values', self.empty_values)",
            "        return super().formfield(**{**kwargs})"
          ]
        ],
        "ietf/utils/decorators.py": [
          78,
          0.8974358974358974,
          [
            31,
            36,
            39,
            40,
            87,
            88,
            96,
            111
          ],
          [
            "        return  f(*args, **kwargs)",
            "        raise ValueError(\"The @person_required decorator should be called after @login_required.\")",
            "    except Person.DoesNotExist:",
            "        return render(request, 'registration/missing_person.html')",
            "            log.log(\"Bad API call: args: %s, kwargs: %s, exception: %s\" % (args, kwargs, e))",
            "            return err(400, \"Bad or missing parameters\")",
            "        key = args, frozenset(list(kwargs.items()))",
            "        raise NotImplementedError(\"Use @lru_cache instead of memoize() for functions.\")"
          ]
        ],
        "ietf/utils/draft.py": [
          894,
          0.7248322147651006,
          [
            104,
            108,
            112,
            113,
            117,
            118,
            119,
            121,
            122,
            123,
            124,
            125,
            127,
            130,
            132,
            145,
            155,
            162,
            170,
            173,
            176,
            179,
            182,
            185,
            188,
            191,
            224,
            225,
            226,
            250,
            254,
            257,
            258,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            267,
            268,
            269,
            271,
            272,
            273,
            274,
            275,
            277,
            278,
            304,
            328,
            329,
            337,
            338,
            340,
            341,
            343,
            344,
            346,
            347,
            349,
            350,
            386,
            433,
            465,
            466,
            467,
            468,
            469,
            470,
            472,
            482,
            485,
            488,
            489,
            490,
            496,
            542,
            548,
            559,
            667,
            691,
            696,
            702,
            703,
            708,
            709,
            710,
            711,
            714,
            716,
            722,
            727,
            728,
            729,
            730,
            731,
            736,
            737,
            777,
            780,
            818,
            819,
            823,
            824,
            826,
            827,
            828,
            831,
            832,
            838,
            839,
            840,
            845,
            846,
            847,
            893,
            899,
            901,
            902,
            914,
            917,
            926,
            941,
            942,
            944,
            945,
            946,
            947,
            956,
            973,
            988,
            990,
            991,
            992,
            994,
            995,
            996,
            997,
            998,
            1001,
            1008,
            1009,
            1064,
            1065,
            1067,
            1097,
            1104,
            1113,
            1163,
            1164,
            1200,
            1201,
            1202,
            1208,
            1216,
            1252,
            1253,
            1254,
            1271,
            1272,
            1278,
            1279,
            1285,
            1286,
            1319,
            1320,
            1321,
            1322,
            1323,
            1325,
            1326,
            1328,
            1329,
            1330,
            1331,
            1332,
            1334,
            1335,
            1336,
            1337,
            1338,
            1339,
            1343,
            1344,
            1345,
            1347,
            1348,
            1349,
            1351,
            1352,
            1365,
            1366,
            1367,
            1368,
            1369,
            1370,
            1373,
            1374,
            1375,
            1376,
            1377,
            1379,
            1381,
            1382,
            1383,
            1386,
            1389,
            1390,
            1391,
            1392,
            1393,
            1394,
            1395,
            1396,
            1397,
            1398,
            1399,
            1400,
            1401,
            1402,
            1403,
            1404,
            1405,
            1406,
            1408,
            1410,
            1411,
            1413,
            1415,
            1416,
            1417,
            1418,
            1419,
            1421,
            1423,
            1424,
            1425,
            1427,
            1429,
            1430,
            1431,
            1432,
            1433,
            1435
          ],
          [
            "    sys.stdout.write(\"%s: %s\\n\" % (program, string))",
            "    sys.stderr.write(\"%s: Warning: %s\\n\" % (program, string))",
            "    sys.stderr.write(\"%s: Error: %s\\n\" % (program, string))",
            "    sys.exit(1)",
            "    file = io.open(file)",
            "    text = file.read()",
            "    file.close()",
            "    text = re.sub(\".\\x08\", \"\", text)    # Get rid of inkribbon backspace-emphasis",
            "    text = text.replace(\"\\r\\n\", \"\\n\")   # Convert DOS to unix",
            "    text = text.replace(\"\\r\", \"\\n\")     # Convert MAC to unix",
            "    text = text.expandtabs()",
            "    text = text.strip()",
            "    return text",
            "    acronym = re.sub(\"[^A-Z]\", \"\", l)",
            "    return s == acronym",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "        raise NotImplementedError",
            "            self.pages = []",
            "            for pagestart in range(0, len(self.lines), 56):",
            "                self.pages += [ \"\\n\".join(self.lines[pagestart:pagestart+56]) ]",
            "            draftname_match = re.search(draftname_regex, self.source)",
            "            rfcnum_match = re.search(rfcnum_regex, self.source)",
            "        elif rfcnum_match:",
            "            return (\"rfc\"+rfcnum_match.group(2), \"\")",
            "            self.errors[\"draftname\"] = \"Could not find the draft name and revision on the first page.\"",
            "            filename = \"\"",
            "            revision = \"\"",
            "            try:",
            "                __, base = self.source.rsplit(\"/\", 1)",
            "            except ValueError:",
            "                base = self.source",
            "            if base.startswith(\"draft-\"):",
            "                if '.' in base:",
            "                    name, __ = base.split(\".\", 1)",
            "                    name = base",
            "                revmatch = re.search(r\"\\d\\d$\", name)",
            "                if revmatch:",
            "                    filename = name[:-3]",
            "                    revision = name[-2:]",
            "                    filename = name",
            "            return filename, revision",
            "                    continue",
            "                pages, page, newpage = begpage(pages, page, newpage)",
            "                continue",
            "                pages, page, newpage = begpage(pages, page, newpage, line)",
            "                continue",
            "                pages, page, newpage = begpage(pages, page, newpage, line)",
            "                continue",
            "                pages, page, newpage = endpage(pages, page, newpage, line)",
            "                continue",
            "                pages, page, newpage = begpage(pages, page, newpage, line)",
            "                continue",
            "                pages, page, newpage = begpage(pages, page, newpage, line)",
            "                continue",
            "                self._pagecount = count_pages",
            "            return self._creation_date",
            "                    elif mon in month_names_abbrev3:",
            "                        month = month_names_abbrev3.index( mon ) + 1",
            "                    elif mon in month_names_abbrev4:",
            "                        month = month_names_abbrev4.index( mon ) + 1",
            "                    elif mon.isdigit() and int(mon) in range(1,13):",
            "                        month = int(mon)",
            "                        continue",
            "                            day = 15",
            "                except ValueError:",
            "                    pass",
            "        self.errors['creation_date'] = 'Creation Date field is empty or the creation date is not in a proper format.'",
            "        return self._creation_date",
            "            return self._abstract",
            "            return abstract",
            "                    break",
            "            text = re.sub(\"([^\\n]{72,}?) +([^\\n ]*)(\\n|$)\", \"\\\\1\\n\\\\2 \", text)",
            "                authpat = r\"(?:^| and )((?:%(hon)s ?)?['`]*%(first)s\\S*( +[^ ]+)*(?: %(suffix)s)?)( *\\(.*|,( [A-Z][-A-Za-z0-9]*)?| [A-Z][a-z]+)?\" % {\"hon\":hon, \"first\":first, \"suffix\":suffix,}",
            "                line = line[:trunc_space]",
            "                    break",
            "                        line = re.sub(editorformat, \"\", line)",
            "                        break",
            "                        author_list = re.findall(authformat, line)",
            "                        authors += [ a[0] for a in author_list ]",
            "                        companies += [ None for a in author_list ]",
            "                        author_on_line = True",
            "                        for author in author_list:",
            "                        break",
            "                            maybe_company = match.group(\"company\").strip(\" ,.\")",
            "                            if not maybe_company in [\"Inc\", \"Ltd\", \"S.A\", \"AG\", \"AB\", \"N.V\", ]:",
            "                                author = match.group(\"author\")",
            "                                company = match.group(\"company\")",
            "                                authors += [ author, '']",
            "                                companies += [ None, company ]",
            "                                author_on_line = True",
            "                                break",
            "                have_draftline = True",
            "                break",
            "                suffix = suffix_match.group(1)",
            "                author = author[:-len(suffix)].strip()",
            "                last, first = author.split(\",\",1)",
            "                author = \"%s %s\" % (first.strip(), last.strip())",
            "                if \".\" in author:",
            "                    first, last = author.rsplit(\".\", 1)",
            "                    first += \".\"",
            "                    first = author",
            "                    last = \"\"",
            "                    first, last = author.rsplit(\" \", 1)",
            "                    if \".\" in first and not \". \" in first:",
            "                        first = first.replace(\".\", \". \").strip()",
            "                prefix = prefix_match.group(1)",
            "                first = first[:-len(prefix)].strip()",
            "                last = prefix+\" \"+last",
            "                                                end = beg + len(\"\".join(columns[col:col+2]))",
            "                                                author_match = author_match.rsplit('(',1)[0].strip()",
            "                                                companies[i] = authors[i]",
            "                                                authors[i] = None",
            "                                                        surname, given_names = fullname.split(None, 1)",
            "                                                    given_names, surname = (fullname, \"\")",
            "                                                    fullname = fullname+\" \"+suffix",
            "                                                    _warn(\"Author tuple doesn't match text in Internet-Draft: %s, %s\" % (authors[i], fullname))",
            "                                                    authors[i] = None",
            "                            except AssertionError:",
            "                                sys.stderr.write(\"filename: \"+self.filename+\"\\n\")",
            "                                sys.stderr.write(\"authpat: \"+authpat+\"\\n\")",
            "                                raise",
            "                continue",
            "                            continue",
            "                        if nonblank_count == 1 or (nonblank_count == 2 and not blanklines) or (company_or_author==line.strip() and not blanklines):",
            "                            companies_seen += [ c.lower() for c in authmatch ]",
            "                            companies_seen += [ line.strip().lower() ] # XXX fix this for columnized author list",
            "                            companies_seen = list(set(companies_seen))",
            "                            for k in range(i+1, len(authors)):",
            "                                if authors[k] and authors[k].lower() in companies_seen:",
            "                                    companies[k] = authors[k]",
            "                                    authors[k] = None",
            "                        elif blanklines and not \"@\" in line:",
            "                            break",
            "                        except:",
            "                            column = l",
            "                if not author in ignore:",
            "                    companies[i] = authors[i]",
            "                authors[i] = None",
            "            return self._title",
            "            match = re.search(r'(?i)(.+\\n|.+\\n.+\\n)(\\s*status of this memo\\s*\\n)', self.pages[0])",
            "        self.errors[\"title\"] = \"Could not find the title on the first page.\"",
            "                            in_norm_ref_sect = True",
            "                            refType = self.REF_TYPE_NORMATIVE",
            "                    draft = m.group( 1 )",
            "                    if draft not in refs:",
            "                        refs[ draft ] = refType",
            "                        line = self.lines[i-1].rstrip()+line",
            "            del refs[self.filename]",
            "                        draft = draft_match.group(0).lower()",
            "                        if not draft in draftrefs:",
            "                            draftrefs += [ draft ]",
            "        _warn(\"Skipping unexpected Internet-Draft name: '%s'\" % (fn))",
            "        return {}",
            "        _warn(\"Could not find file:  '%s'\" % (filename))",
            "        return",
            "        except UnicodeDecodeError:",
            "            draft = PlaintextDraft(file.read().decode('latin1'), filename)",
            "    if opt_attributes:",
            "        def outputkey(key, fields):",
            "            field = fields[key]",
            "            if \"\\n\" in field:",
            "                field = \"\\n\" + field.rstrip()",
            "                field = field.strip()",
            "            outfile.write(\"%-24s: %s\\n\" % ( key, field.replace(\"\\\\\", \"\\\\\\\\\" ).replace(\"'\", \"\\\\x27\" )))",
            "        def outputkey(key, fields):",
            "            outfile.write(\" %s='%s'\" % ( key.lower(), fields[key].strip().replace(\"\\\\\", \"\\\\\\\\\" ).replace(\"'\", \"\\\\x27\" ).replace(\"\\n\", \"\\\\n\")))",
            "        if opt_timestamp:",
            "            outfile.write(\"%s \" % (fields[\"eventdate\"]))",
            "        outfile.write(\"%s\" % (os.path.basename(docname.strip())))",
            "    keys = list(fields.keys())",
            "    keys.sort()",
            "    for key in keys:",
            "        if fields[key] and not key in [\"eventdate\", ] and not key.startswith(\"_\"):",
            "            outputkey(key, fields)",
            "    outfile.write(\"\\n\")",
            "    if opt_trace:",
            "        t = time.time()",
            "        sys.stderr.write(\"%-58s\" % fn[:-4])",
            "    fields = getmeta(fn)",
            "    if fields:",
            "        _output(fields.get(\"doctag\", fn[:-7]), fields, outfile)",
            "    if opt_trace:",
            "        sys.stderr.write(\"%5.1f\\n\" % ((time.time() - t)))",
            "    options = \"\"",
            "    for line in re.findall(r\"\\n +(if|elif) +opt in \\[(.+)\\]:\\s+#(.+)\\n\", io.open(sys.argv[0]).read()):",
            "        if not options:",
            "            options += \"OPTIONS\\n\"",
            "        options += \"        %-16s %s\\n\" % (line[1].replace('\"', ''), line[2])",
            "    options = options.strip()",
            "    if len(sys.argv) < 1:",
            "        vars = globals()",
            "        vars.update(locals())",
            "        print(__doc__ % vars)",
            "        sys.exit(1)",
            "    try:",
            "    except Exception as e:",
            "        print(\"%s: %s\" % (program, e))",
            "        sys.exit(1)",
            "    for opt, value in opts:",
            "        elif opt in [\"-h\", \"--help\"]:   # Output this help text, then exit",
            "            vars = globals()",
            "            vars.update(locals())",
            "            print(__doc__ % vars)",
            "            sys.exit(1)",
            "        elif opt in [\"-v\", \"--version\"]: # Output version information, then exit",
            "            print(program, version)",
            "            sys.exit(0)",
            "        elif opt in [\"-a\", \"--attribs\"]: # Output key-value attribute pairs ",
            "            opt_attributes = True",
            "        elif opt in [\"-t\", ]: # Toggle leading timestamp information ",
            "            opt_timestamp = not opt_timestamp",
            "        elif opt in [\"--timestamp\"]: # Emit leading timestamp information ",
            "            opt_timestamp = True",
            "        elif opt in [\"--notimestamp\"]: # Omit leading timestamp information ",
            "            opt_timestamp = False",
            "        elif opt in [\"-T\", \"--trace\"]: # Emit trace information while working",
            "            opt_trace = True",
            "    company_domain = {}",
            "    if not files:",
            "        files = [ \"-\" ]",
            "    for file in files:",
            "        if file == \"-\":",
            "            file = sys.stdin",
            "        elif file.endswith(\".gz\"):",
            "            import gzip",
            "            file = gzip.open(file)",
            "            file = io.open(file)",
            "        basename = os.path.basename(file.name)",
            "        if basename.startswith(\"draft-\"):",
            "            draft = basename",
            "            _printmeta(file.name, outfile)",
            "            for line in file:",
            "                draft = line.strip()",
            "                if draft.startswith(\"#\"):",
            "                    continue",
            "                if draft:",
            "                    _printmeta(draft, outfile)"
          ]
        ],
        "ietf/utils/draft_search.py": [
          6,
          1,
          [],
          []
        ],
        "ietf/utils/fields.py": [
          181,
          0.9171270718232044,
          [
            33,
            116,
            117,
            164,
            166,
            231,
            239,
            254,
            315,
            334,
            335,
            336,
            340,
            354,
            355
          ],
          [
            "            return value",
            "            for k, v in picker_settings.items():",
            "                date_attrs['data-date-{}'.format(k)] = v",
            "            return None",
            "            return value",
            "        raise NotImplementedError('Must implement make_select2_data')",
            "        raise NotImplementedError('Must implement ajax_url')",
            "        pass",
            "            raise forms.ValidationError('You can select at most {} {}.'.format(",
            "        if accepted_empty_values is None:",
            "            accepted_empty_values = []",
            "        self.empty_values = [x",
            "        super().__init__(*args, **kwargs)",
            "        except FileNotFoundError:",
            "            pass  # don't do anything if the file has gone missing"
          ]
        ],
        "ietf/utils/hedgedoc.py": [
          72,
          0.9583333333333333,
          [
            81,
            82,
            84
          ],
          [
            "            except requests.RequestException as exc:",
            "                raise ServerNoteError from exc",
            "                raise NoteNotFound"
          ]
        ],
        "ietf/utils/history.py": [
          42,
          0.9285714285714286,
          [
            29,
            38,
            58
          ],
          [
            "    return None",
            "        return {}",
            "            continue"
          ]
        ],
        "ietf/utils/html.py": [
          48,
          0.8958333333333333,
          [
            36,
            37,
            61,
            83,
            87
          ],
          [
            "    allowed = set(acceptable_tags) - set([ t.lower() for t in tags ])",
            "    return bleach.clean(html, tags=allowed, strip=True)",
            "            doc = copy.deepcopy(html)",
            "        text = html2text.html2text(text)",
            "        raise forms.ValidationError(\"Unexpected text field mime type: %s\" % mime_type)"
          ]
        ],
        "ietf/utils/http.py": [
          2,
          1,
          [],
          []
        ],
        "ietf/utils/jstest.py": [
          61,
          0.5081967213114754,
          [
            16,
            17,
            18,
            27,
            28,
            30,
            33,
            34,
            35,
            36,
            37,
            54,
            55,
            56,
            59,
            60,
            63,
            70,
            71,
            72,
            73,
            74,
            75,
            80,
            81,
            82,
            97,
            98,
            101,
            102
          ],
          [
            "except ImportError as e:",
            "    skip_selenium = True",
            "    skip_message = \"Skipping selenium tests: %s\" % e",
            "    skip_selenium = True",
            "    skip_message = \"Skipping selenium tests: '{}' executable not found.\".format(executable_name)",
            "    print(\"     \"+skip_message)",
            "    service = Service(log_output=f\"{executable_name}.log\", service_args=['--log-no-truncate'])",
            "    options = Options()",
            "    options.add_argument(\"--headless\")",
            "    os.environ[\"MOZ_REMOTE_SETTINGS_DEVTOOLS\"] = \"1\"",
            "    return webdriver.Firefox(service=service, options=options)",
            "        super(IetfSeleniumTestCase, self).setUp()",
            "        self.driver = start_web_driver()",
            "        self.driver.set_window_size(1024,768)",
            "        super(IetfSeleniumTestCase, self).tearDown()",
            "        self.driver.close()",
            "        return '%s%s'%(self.live_server_url, urlreverse(*args, **kwargs))",
            "        url = self.absreverse(self.login_view)",
            "        password = '%s+password' % username",
            "        self.driver.get(url)",
            "        self.driver.find_element(By.NAME, 'username').send_keys(username)",
            "        self.driver.find_element(By.NAME, 'password').send_keys(password)",
            "        self.driver.find_element(By.XPATH, '//*[@id=\"content\"]//button[@type=\"submit\"]').click()",
            "        win_height = self.driver.get_window_rect()['height']",
            "        offset = element.rect['y'] + (element.rect['height'] - win_height) // 2",
            "        self.driver.execute_script(",
            "        self.element = element",
            "        self.child_selector = child_selector",
            "        child = self.element.find_element(By.CSS_SELECTOR, self.child_selector)",
            "        return child if child is not None else False"
          ]
        ],
        "ietf/utils/log.py": [
          97,
          0.7319587628865979,
          [
            17,
            18,
            19,
            20,
            28,
            29,
            32,
            37,
            38,
            39,
            40,
            42,
            67,
            74,
            80,
            83,
            84,
            93,
            94,
            95,
            96,
            97,
            119,
            132,
            143,
            145
          ],
          [
            "except ImportError:                     # import syslog will fail on Windows boxes",
            "    logging.basicConfig(filename='tracker.log',level=logging.INFO)",
            "    logfunc = logging.info",
            "    pass",
            "    logger = logging.getLogger(name)",
            "    if not logger.hasHandlers():",
            "        handlers = [",
            "        for h in handlers:",
            "            h.setFormatter(formatter)",
            "            h.setLevel(level)",
            "            logger.addHandler(h)",
            "    logger.setLevel(level)",
            "            _flushfunc = sys.stdout.flush   # pyflakes:ignore (intentional redefinition)",
            "        msg = msg.encode('unicode_escape')",
            "            where = \"\"",
            "    except IndexError:",
            "        file, line, where = \"/<UNKNOWN>\", 0, \"\"",
            "    info = sys.exc_info()",
            "    extype = info[0]",
            "    value = info[1]",
            "    tb = traceback.format_tb(info[2])",
            "    return (extype, value, tb)",
            "            break",
            "                raise AssertionError(\"Assertion failed: '%s': %s != %s (%s).\" % (statement, repr(value), state, note))",
            "                    extra[key] = frame.f_locals[key]",
            "                logger.error(\"Assertion failed: '%s': %s != %s (%s)\", statement, repr(value), state, note, exc_info=(AssertionError, e, tb), extra=extra)"
          ]
        ],
        "ietf/utils/mail.py": [
          399,
          0.8045112781954887,
          [
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            123,
            134,
            138,
            139,
            148,
            149,
            156,
            157,
            158,
            159,
            161,
            162,
            163,
            164,
            165,
            168,
            169,
            170,
            171,
            174,
            175,
            177,
            204,
            209,
            217,
            218,
            220,
            221,
            222,
            223,
            224,
            317,
            318,
            366,
            369,
            390,
            391,
            392,
            393,
            394,
            437,
            438,
            439,
            440,
            459,
            498,
            499,
            515,
            516,
            517,
            518,
            536,
            537,
            538,
            539,
            540,
            541,
            542,
            544,
            545,
            546,
            547,
            597,
            598,
            599,
            600,
            606,
            607,
            626,
            629,
            631
          ],
          [
            "                server.ehlo()",
            "                if 'starttls' not in server.esmtp_features:",
            "                    raise ImproperlyConfigured('password configured but starttls not supported')",
            "                (retval, retmsg) = server.starttls()",
            "                if retval != 220:",
            "                    raise ImproperlyConfigured('password configured but tls failed: %d %s' % ( retval, retmsg ))",
            "                server.ehlo()",
            "                server.login(settings.EMAIL_HOST_USER, settings.EMAIL_HOST_PASSWORD)",
            "                raise smtplib.SMTPException({'really': sys.exc_info()[0], 'value': sys.exc_info()[1], 'tb': traceback.format_tb(sys.exc_info()[2])})",
            "            except smtplib.SMTPServerDisconnected:",
            "                pass",
            "    add_headers(msg)",
            "    new = MIMEMultipart()",
            "    if settings.SERVER_MODE == 'production':",
            "        explanation = \"This is a copy of a message sent from the I-D tracker.\"",
            "    elif settings.SERVER_MODE == 'test' and toUser:",
            "        explanation = \"The attached message was generated by an instance of the tracker\\nin test mode.  It is being sent to you because you, or someone acting\\non your behalf, is testing the system.  If you do not recognize\\nthis action, please accept our apologies and do not be concerned as\\nthe action is being taken in a test context.\"",
            "        explanation = \"The attached message would have been sent, but the tracker is in %s mode.\\nIt was not sent to anybody.\" % settings.SERVER_MODE",
            "        if originalBcc:",
            "          explanation += (\"\\nIn addition to the destinations derived from the header below, the message would have been sent Bcc to %s\" % originalBcc)",
            "    new.attach(MIMEText(explanation + \"\\n\\n\"))",
            "    new.attach(MIMEMessage(msg))",
            "    new['From'] = settings.DEFAULT_FROM_EMAIL",
            "    new['Subject'] = '[Django %s] %s' % (settings.SERVER_MODE, force_str(msg.get('Subject', '[no subject]')))",
            "    new['To'] = to",
            "    send_smtp(new)",
            "    if request:",
            "        return RequestContext(request)",
            "        return Context()",
            "        name, addr = frm",
            "        return frm",
            "    if isinstance(frm, tuple):",
            "        name, addr = frm",
            "        name, addr = parseaddr(frm)",
            "    domain = addr.rsplit('@', 1)[-1]",
            "    if not domain in settings.UTILS_FROM_EMAIL_DOMAINS:",
            "        frm = on_behalf_of(frm)",
            "    return frm",
            "                except Exception:",
            "                    raise",
            "        return msg",
            "        show_that_mail_was_sent(request,'In production, email would have been sent',msg,bcc)",
            "    elif settings.SERVER_MODE == 'test':",
            "        if toUser:",
            "            copy_email(msg, to, toUser=True, originalBcc=bcc)",
            "        elif request and 'testmailcc' in request.COOKIES:",
            "            copy_email(msg, request.COOKIES[ 'testmailcc' ],originalBcc=bcc)",
            "            ev = extra[k]",
            "            if not isinstance(ev, list):",
            "                ev = [ ev, ]",
            "            extra[k] = list(set(v + ev))",
            "                    msg[key] = Header(v, 'utf-8')",
            "        body = (\"MIME-Version: 1.0\\r\\nContent-Type: %s\\r\\n\\r\\n\" % content_type) + message.body",
            "        msg = message_from_string(force_str(body))",
            "        orig = e.args[0]",
            "        extype = orig['really']",
            "        tb = orig['tb']",
            "        value = orig['value']",
            "        warning =  \"An error occurred while sending email:\\n\"",
            "        if getattr(e,'original_msg',None):",
            "            warning += \"Subject: %s\\n\" % e.original_msg.get('Subject','[no subject]')",
            "            warning += \"To: %s\\n\" % e.original_msg.get('To','[no to]')",
            "            warning += \"Cc: %s\\n\" % e.original_msg.get('Cc','[no cc]')",
            "        if isinstance(e,SMTPSomeRefusedRecipients):",
            "            warning += e.detailed_refusals()",
            "            warning += \"SMTP Exception: %s\\n\"%extype",
            "            warning += \"Error Message: %s\\n\\n\"%value",
            "            warning += \"The message was not delivered to anyone.\"",
            "        messages.warning(request,warning,extra_tags='preformatted',fail_silently=True)",
            "    except smtplib.SMTPException:",
            "        log(\"Exception encountered while sending a ticket to the secretariat\")",
            "        (extype,value) = sys.exc_info()[:2]",
            "        log(\"SMTP Exception: %s : %s\" % (extype,value))",
            "    except ValidationError:",
            "        return False",
            "        except ValidationError:",
            "            log('Bad data: get_email_addresses_from_text() got an '",
            "            return False"
          ]
        ],
        "ietf/utils/management/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/utils/management/base.py": [
          37,
          1,
          [],
          []
        ],
        "ietf/utils/markdown.py": [
          16,
          1,
          [],
          []
        ],
        "ietf/utils/markup_txt.py": [
          18,
          0.9444444444444444,
          [
            57
          ],
          [
            "        content = wordwrap(content, width)"
          ]
        ],
        "ietf/utils/meetecho.py": [
          96,
          0.8541666666666667,
          [
            56,
            57,
            59,
            60,
            207,
            210,
            215,
            236,
            237,
            238,
            241,
            258,
            259,
            260
          ],
          [
            "        except JSONDecodeError as err:",
            "            if response.headers['Content-Type'].startswith('application/json'):",
            "                raise MeetechoAPIError('Error decoding response as JSON') from err",
            "        return None",
            "        return f'Meetecho conference {self.description}'",
            "        props = [",
            "        return f'Conference({\", \".join(props)})'",
            "        group_acronym = group.acronym if hasattr(group, 'acronym') else group",
            "        if group_acronym not in self.wg_tokens:",
            "            self.wg_tokens[group_acronym] = self.api.retrieve_wg_tokens(",
            "        return self.wg_tokens[group_acronym]",
            "        for conf in self.fetch(group):",
            "            if conf.url == url:",
            "                self.api.delete_meeting(conf.deletion_token)"
          ]
        ],
        "ietf/utils/mime.py": [
          17,
          0.7058823529411765,
          [
            11,
            12,
            13,
            24,
            25
          ],
          [
            "        m = magic.open(magic.MAGIC_MIME)",
            "        m.load()",
            "        filetype = m.buffer(content)",
            "        mimetype = re.split(';', filetype)[0]",
            "        charset = 'utf-8'"
          ]
        ],
        "ietf/utils/models.py": [
          28,
          0.75,
          [
            38,
            39,
            40,
            41,
            42,
            43,
            44
          ],
          [
            "    opts = instance._meta",
            "    data = {}",
            "    for f in itertools.chain(opts.concrete_fields, opts.private_fields):",
            "        data[f.name] = f.value_from_object(instance)",
            "    for f in opts.many_to_many:",
            "        data[f.name] = [i.pk for i in f.value_from_object(instance)]",
            "    return data        "
          ]
        ],
        "ietf/utils/ordereddict.py": [
          10,
          0,
          [
            5,
            9,
            11,
            12,
            13,
            14,
            15,
            16,
            18,
            19
          ],
          [
            "def insert_after_in_ordered_dict(dictionary, key, value, after):",
            "    dictionary[key] = value",
            "    reorder = False",
            "    l = list(dictionary.items()) # don't mutate the dict while looping",
            "    for k, v in l:",
            "        if reorder and k != key:",
            "            del dictionary[k]",
            "            dictionary[k] = v",
            "        if k == after:",
            "            reorder = True"
          ]
        ],
        "ietf/utils/pdf.py": [
          12,
          0.25,
          [
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18
          ],
          [
            "    try:",
            "        infile = io.open(filename, \"rb\")",
            "    except IOError:",
            "        return 0",
            "    for line in infile:",
            "        m = re.match(br'\\] /Count ([0-9]+)',line)",
            "        if m:",
            "            return int(m.group(1))",
            "    return 0"
          ]
        ],
        "ietf/utils/pipe.py": [
          23,
          0.826086956521739,
          [
            13,
            30,
            31,
            32
          ],
          [
            "        bufsize = len(str)",
            "            if len(out) >= MAX:",
            "                err = \"Output exceeds %s bytes and has been truncated\" % MAX",
            "                break"
          ]
        ],
        "ietf/utils/resources.py": [
          36,
          1,
          [],
          []
        ],
        "ietf/utils/response.py": [
          6,
          1,
          [],
          []
        ],
        "ietf/utils/serialize.py": [
          17,
          0.8823529411764706,
          [
            17,
            21
          ],
          [
            "            v = list(v.values_list(\"pk\", flat=True))",
            "            v = v.strftime('%Y-%m-%d')"
          ]
        ],
        "ietf/utils/storage.py": [
          6,
          0.5,
          [
            6,
            7,
            8
          ],
          [
            "        path, args, kwargs = FileSystemStorage.deconstruct(obj)",
            "        kwargs[\"location\"] = None",
            "        return (path, args, kwargs)"
          ]
        ],
        "ietf/utils/templatetags/__init__.py": [
          0,
          1,
          [],
          []
        ],
        "ietf/utils/templatetags/classname.py": [
          5,
          1,
          [],
          []
        ],
        "ietf/utils/templatetags/dateformat.py": [
          14,
          0.5,
          [
            21,
            22,
            23,
            24,
            25,
            26,
            27
          ],
          [
            "    if value in (None, ''):",
            "        return ''",
            "    if   isinstance(value, datetime.datetime):",
            "        pass",
            "    elif isinstance(value, datetime.date):",
            "        arg = arg.translate(elide_timefmt).strip()",
            "    return date(value, arg)"
          ]
        ],
        "ietf/utils/templatetags/htmlfilters.py": [
          13,
          0.923076923076923,
          [
            19
          ],
          [
            "    return remove_tags(value, re.split(r\"\\s*,\\s*\", tags))"
          ]
        ],
        "ietf/utils/templatetags/misc_filters.py": [
          29,
          0.9310344827586207,
          [
            23,
            29
          ],
          [
            "        return ''",
            "        return str(combined)"
          ]
        ],
        "ietf/utils/templatetags/origin.py": [
          25,
          0.92,
          [
            38,
            39
          ],
          [
            "        origin, source = token.source",
            "        return OriginNode(origin)"
          ]
        ],
        "ietf/utils/templatetags/textfilters.py": [
          40,
          0.85,
          [
            31,
            32,
            33,
            34,
            35,
            36
          ],
          [
            "    if not isinstance(values, dict):",
            "        obj = values",
            "        values = obj.__dict__",
            "        for f in obj._meta.fields:",
            "            values[f.name] = getattr(obj, f.name)",
            "    return format.format(**values)"
          ]
        ],
        "ietf/utils/test_smtpserver.py": [
          63,
          0.8095238095238095,
          [
            30,
            31,
            40,
            41,
            45,
            46,
            48,
            49,
            60,
            79,
            90,
            91
          ],
          [
            "        self.exit_condition.append(True)",
            "        self.thread.join()",
            "            self.push(str('503 Error: need MAIL command'))",
            "            return",
            "            self.push(str('501 Syntax: RCPT TO: <address>'))",
            "            return",
            "            self.push(str('550 Error: Not touching that'))",
            "            return",
            "            self.inbox = []",
            "            self.inbox = inbox",
            "        if self.thread_driver:",
            "            self.thread_driver.stop()"
          ]
        ],
        "ietf/utils/test_textupload.py": [
          25,
          1,
          [],
          []
        ],
        "ietf/utils/test_utils.py": [
          171,
          0.8538011695906432,
          [
            92,
            93,
            94,
            168,
            219,
            220,
            221,
            222,
            225,
            226,
            227,
            243,
            260,
            261,
            262,
            264,
            265,
            266,
            267,
            279,
            287,
            288,
            289,
            290,
            294
          ],
          [
            "    text = BeautifulSoup(r.content, 'lxml').get_text()",
            "    text = re.sub(r'(\\n\\s+){2,}', '\\n\\n', text)",
            "    return text",
            "        test_inst.assertCountEqual(uids_found, set(expected_event_uids))",
            "        try:",
            "            self.parser.parse(data)",
            "        except Exception as e:",
            "            raise self.failureException(str(e))",
            "        self.assertHttpOK(resp)",
            "        self.assertTrue(resp['Content-Type'].startswith('text/html'))",
            "        self.assertValidHTML(resp.content)",
            "            dirname = os.path.join(os.environ['VIRTUAL_ENV'], dirname)",
            "            from pyquery import PyQuery",
            "            from lxml import html",
            "            self.maxDiff = None",
            "            errors = [html.tostring(n).decode() for n in PyQuery(response.content)(error_css_selector)]",
            "            if errors:",
            "                explanation = \"{} != {}\\nGot form back with errors:\\n----\\n\".format(response.status_code, 302) + \"----\\n\".join(errors)",
            "                self.assertEqual(response.status_code, 302, explanation)",
            "            raise self.failureException(\"No assertion made, both text and count is None\")",
            "            sys.stderr.write(\"Wrong count in assertMailboxContains().  The complete mailbox contains %s messages, only %s of them contain the searched-for text:\\n\\n\" % (len(mailbox), len(mlist)))",
            "            for m in mailbox:",
            "                sys.stderr.write(m.as_string())",
            "                sys.stderr.write('\\n\\n')",
            "            self.assertGreater(len(mlist), 0)"
          ]
        ],
        "ietf/utils/texescape.py": [
          13,
          1,
          [],
          []
        ],
        "ietf/utils/text.py": [
          163,
          0.8650306748466258,
          [
            60,
            61,
            89,
            95,
            118,
            146,
            150,
            189,
            190,
            199,
            200,
            201,
            202,
            204,
            206,
            215,
            221,
            222,
            224,
            232,
            262,
            263
          ],
          [
            "    except ValidationError:",
            "        return None",
            "        return text",
            "        return text    ",
            "        return text",
            "                breakpoint = line.find(\" \", ind)",
            "                break",
            "    except (UnicodeEncodeError, UnicodeDecodeError):",
            "        return False",
            "    assert isinstance(raw, bytes)",
            "    try:",
            "        text = raw.decode('utf-8')",
            "    except UnicodeDecodeError:",
            "        text = raw.decode('latin-1')",
            "    return text",
            "        return {}",
            "            if items:",
            "                items[-1] += l",
            "                return {}",
            "            return {}",
            "        except UnicodeDecodeError:",
            "            pass"
          ]
        ],
        "ietf/utils/textupload.py": [
          30,
          0.7666666666666667,
          [
            22,
            29,
            30,
            31,
            45,
            50,
            51
          ],
          [
            "        raise ValidationError(\"Text file too large (size %s).\" % uploaded_file.size)",
            "        m = magic.open(magic.MAGIC_MIME)",
            "        m.load()",
            "        filetype = m.buffer(content)",
            "        raise ValidationError(\"File has unknown encoding.\")",
            "    except Exception as e:",
            "        raise ValidationError(\"Error decoding file (%s). Try submitting with UTF-8 encoding or remove non-ASCII characters.\" % str(e))"
          ]
        ],
        "ietf/utils/timezone.py": [
          43,
          1,
          [],
          []
        ],
        "ietf/utils/urls.py": [
          30,
          0.8333333333333333,
          [
            26,
            27,
            32,
            36,
            37
          ],
          [
            "        branch = 'string'",
            "        name = force_str(view)",
            "        branch = 'view'",
            "        branch = 'notimpl'",
            "        raise NotImplementedError(\"Auto-named url from view of type %s: %s\" % (type(view), view))"
          ]
        ],
        "ietf/utils/validators.py": [
          167,
          0.7005988023952097,
          [
            45,
            46,
            50,
            56,
            59,
            66,
            67,
            68,
            70,
            78,
            79,
            80,
            82,
            88,
            89,
            91,
            111,
            136,
            137,
            174,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            188,
            193,
            194,
            195,
            196,
            197,
            204,
            233,
            251,
            252,
            269,
            270,
            271,
            274,
            275,
            276,
            277,
            278,
            283
          ],
          [
            "        except Exception as e:",
            "            raise ValidationError('Please enter a valid regular expression.  '",
            "            raise ValidationError('Did you really mean that?  The regular expression '",
            "        return isinstance(other, RegexStringValidator)",
            "        return not (self == other)",
            "    except FileNotFoundError:",
            "        if missing_ok:",
            "            return",
            "            raise",
            "    except FileNotFoundError:",
            "        if missing_ok:",
            "            return None, None",
            "            raise",
            "        mod = raw.replace(b'virtual', b' virtual')",
            "        mime_type, encoding = get_mime_type(mod)",
            "        raise ValidationError('Found content with unexpected mime type: %s.  Expected one of %s.' %",
            "        return all([",
            "    if not is_valid_ipv6_address(value):",
            "        raise ValidationError(_('Enter a valid IPv6 address.'), code='invalid')",
            "        except ValidationError as e:",
            "            if value:",
            "                try:",
            "                    scheme, netloc, path, query, fragment = urlsplit(value)",
            "                except ValueError:  # for example, \"Invalid IPv6 URL\"",
            "                    raise ValidationError(self.message, code=self.code)",
            "                try:",
            "                    netloc = netloc.encode('idna').decode('ascii')  # IDN -> ACE",
            "                except UnicodeError:  # invalid domain part",
            "                    raise e",
            "                url = urlunsplit((scheme, netloc, path, query, fragment))",
            "                super().__call__(url)",
            "                raise",
            "                potential_ip = host_match.groups()[0]",
            "                try:",
            "                    validate_ipv6_address(potential_ip)",
            "                except ValidationError:",
            "                    raise ValidationError(self.message, code=self.code)",
            "            raise ValidationError(self.message, code=self.code)",
            "        raise ValidationError('Unknown resource type '+name.type.name)",
            "        except FileNotFoundError:",
            "            return 0, 0  # don't fail if the image is missing",
            "        if isinstance(self._model, str):",
            "            self._model = apps.get_model(self._model)",
            "        return self._model",
            "        for val in value:",
            "            try:",
            "                self.model.objects.get(**{self.field_name: val})",
            "            except ObjectDoesNotExist:",
            "                raise ValidationError(",
            "        return ("
          ]
        ],
        "ietf/utils/xmldraft.py": [
          131,
          0.9312977099236641,
          [
            60,
            61,
            89,
            105,
            110,
            235,
            236,
            237,
            240
          ],
          [
            "            except Exception as e:",
            "                raise XMLParseError(parser_out.getvalue(), parser_err.getvalue()) from e",
            "            return \"\"",
            "                continue",
            "        return \"\"",
            "        super().__init__(*args)",
            "        self._out = out",
            "        self._err = err",
            "        return self._out.splitlines() + self._err.splitlines()"
          ]
        ],
        "ietf/wsgi.py": [
          11,
          0,
          [
            6,
            7,
            8,
            10,
            12,
            14,
            15,
            17,
            19,
            21,
            22
          ],
          [
            "import os",
            "import sys",
            "import syslog",
            "path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))",
            "syslog.openlog(str(\"datatracker\"), syslog.LOG_PID, syslog.LOG_USER)",
            "if not path in sys.path:",
            "    sys.path.insert(0, path)",
            "os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ietf.settings\")",
            "syslog.syslog(\"Starting datatracker wsgi instance\")",
            "from django.core.wsgi import get_wsgi_application",
            "application = get_wsgi_application()"
          ]
        ]
      },
      "format": 5
    },
    "migration": {
      "format": 3,
      "present": {}
    },
    "template": {
      "coverage": 0.9440559440559441,
      "covered": {
        "401.html": false,
        "403.html": true,
        "404.html": true,
        "admin/group/group/change_form.html": false,
        "admin/group/group/change_list.html": false,
        "admin/group/group/send_sdo_reminder.html": false,
        "announcement/confirm.html": true,
        "announcement/main.html": true,
        "api/index.html": true,
        "api/openid-issuer.html": true,
        "base.html": true,
        "base/icons.html": true,
        "base/menu.html": true,
        "base/menu_active_groups.html": true,
        "base/menu_user.html": true,
        "base/menu_wg.html": true,
        "base_secr.html": true,
        "base_secr_bootstrap.html": true,
        "base_site.html": true,
        "base_site_bootstrap.html": true,
        "community/atom.xml": true,
        "community/list_menu.html": true,
        "community/manage_list.html": true,
        "community/notification_email.txt": true,
        "community/subscription.html": true,
        "community/track_document.html": true,
        "community/untrack_document.html": true,
        "community/view_list.html": true,
        "confirm_cancel.html": true,
        "confirm_delete.html": true,
        "cookies/settings.html": true,
        "debug.html": true,
        "doc/ad_list.html": true,
        "doc/add_comment.html": true,
        "doc/add_sessionpresentation.html": true,
        "doc/ballot/approvaltext.html": true,
        "doc/ballot/approve_ballot.html": true,
        "doc/ballot/approve_downrefs.html": true,
        "doc/ballot/ballot_comment_mail.txt": true,
        "doc/ballot/ballot_issued.html": true,
        "doc/ballot/clear_ballot.html": true,
        "doc/ballot/defer_ballot.html": true,
        "doc/ballot/edit_position.html": true,
        "doc/ballot/ednote_changed_late.txt": true,
        "doc/ballot/irsg_ballot_approve.html": true,
        "doc/ballot/irsg_ballot_close.html": true,
        "doc/ballot/lastcalltext.html": true,
        "doc/ballot/rfceditornote.html": true,
        "doc/ballot/rsab_ballot_approve.html": true,
        "doc/ballot/rsab_ballot_close.html": true,
        "doc/ballot/send_ballot_comment.html": true,
        "doc/ballot/undefer_ballot.html": true,
        "doc/ballot/writeupnotes.html": true,
        "doc/ballot_popup.html": true,
        "doc/bibxml.xml": true,
        "doc/bofreq/bof_requests.html": true,
        "doc/bofreq/bofreq_template.md": true,
        "doc/bofreq/change_editors.html": true,
        "doc/bofreq/change_responsible.html": true,
        "doc/bofreq/new_bofreq.html": true,
        "doc/bofreq/upload_content.html": true,
        "doc/change_ad.html": true,
        "doc/change_shepherd.html": true,
        "doc/change_shepherd_email.html": true,
        "doc/change_state.html": true,
        "doc/change_title.html": true,
        "doc/charter/action_announcement_text.html": true,
        "doc/charter/action_text.txt": true,
        "doc/charter/approve.html": true,
        "doc/charter/ballot_issued.html": true,
        "doc/charter/ballot_writeup.txt": true,
        "doc/charter/ballot_writeupnotes.html": true,
        "doc/charter/change_ad.html": true,
        "doc/charter/change_state.html": true,
        "doc/charter/change_title.html": true,
        "doc/charter/charter_with_milestones.txt": true,
        "doc/charter/group_info.txt": true,
        "doc/charter/issue_ballot_mail.txt": true,
        "doc/charter/review_announcement_text.html": true,
        "doc/charter/review_text.txt": true,
        "doc/charter/submit.html": true,
        "doc/conflict_review/ad_approval_pending_email.txt": true,
        "doc/conflict_review/approval_text.txt": true,
        "doc/conflict_review/approve.html": true,
        "doc/conflict_review/changed_ad.txt": true,
        "doc/conflict_review/review_choices.txt": true,
        "doc/conflict_review/review_started.txt": true,
        "doc/conflict_review/start.html": true,
        "doc/conflict_review/submit.html": true,
        "doc/document_ballot.html": true,
        "doc/document_ballot_content.html": true,
        "doc/document_bibtex.bib": true,
        "doc/document_bofreq.html": true,
        "doc/document_charter.html": true,
        "doc/document_chatlog.html": true,
        "doc/document_conflict_review.html": true,
        "doc/document_draft.html": true,
        "doc/document_email.html": true,
        "doc/document_format_buttons.html": true,
        "doc/document_history.html": true,
        "doc/document_history_form.html": true,
        "doc/document_html.html": true,
        "doc/document_info.html": true,
        "doc/document_material.html": true,
        "doc/document_polls.html": true,
        "doc/document_referenced_by.html": true,
        "doc/document_references.html": true,
        "doc/document_review.html": true,
        "doc/document_rfc.html": true,
        "doc/document_statement.html": true,
        "doc/document_status_change.html": true,
        "doc/document_subseries.html": true,
        "doc/document_subseries_top.html": true,
        "doc/document_top.html": true,
        "doc/document_writeup.html": true,
        "doc/downref.html": true,
        "doc/downref_add.html": true,
        "doc/draft/add_iana_experts_comment.html": true,
        "doc/draft/adopt_draft.html": true,
        "doc/draft/change_ad.html": true,
        "doc/draft/change_consensus.html": true,
        "doc/draft/change_iana_state.html": true,
        "doc/draft/change_intended_status.html": true,
        "doc/draft/change_replaces.html": true,
        "doc/draft/change_shepherd_writeup.html": true,
        "doc/draft/change_state.html": true,
        "doc/draft/change_stream.html": true,
        "doc/draft/change_stream_state.html": true,
        "doc/draft/edit_info.html": true,
        "doc/draft/expire_warning_email.txt": true,
        "doc/draft/id_expired_email.txt": true,
        "doc/draft/last_call_requested.html": true,
        "doc/draft/make_last_call.html": true,
        "doc/draft/release_draft.html": true,
        "doc/draft/request_publication.html": true,
        "doc/draft/request_resurrect.html": true,
        "doc/draft/resurrect.html": true,
        "doc/draft/review_possibly_replaces.html": true,
        "doc/draft/rfceditor_note_duplicate_error.html": false,
        "doc/draft/rfceditor_post_approved_draft_failed.html": false,
        "doc/drafts_for_ad.html": true,
        "doc/drafts_in_iesg_process.html": true,
        "doc/drafts_in_last_call.html": true,
        "doc/edit_action_holders.html": true,
        "doc/edit_authors.html": true,
        "doc/edit_field.html": true,
        "doc/edit_notify.html": true,
        "doc/edit_sessionpresentation.html": true,
        "doc/edit_telechat_date.html": true,
        "doc/email_aliases.html": true,
        "doc/eval_email.txt": true,
        "doc/frontpage.html": true,
        "doc/idnits2-rfcs-obsoleted.txt": true,
        "doc/idnits2-state.txt": true,
        "doc/index_active_drafts.html": true,
        "doc/index_all_drafts.html": true,
        "doc/index_subseries.html": true,
        "doc/irsg_ballot_status.html": true,
        "doc/mail/ad_approval_email.txt": true,
        "doc/mail/approval_mail.txt": true,
        "doc/mail/approval_mail_rfc_editor.txt": true,
        "doc/mail/ballot_deferred_email.txt": true,
        "doc/mail/ballot_rfceditornote.txt": true,
        "doc/mail/ballot_writeup.txt": true,
        "doc/mail/bofreq_editors_changed.txt": true,
        "doc/mail/bofreq_new_revision.txt": true,
        "doc/mail/bofreq_responsible_changed.txt": true,
        "doc/mail/bofreq_title_changed.txt": true,
        "doc/mail/change_notice.txt": true,
        "doc/mail/charter_internal_review.txt": true,
        "doc/mail/close_irsg_ballot_mail.txt": true,
        "doc/mail/close_rsab_ballot_mail.txt": true,
        "doc/mail/comment_added_email.txt": true,
        "doc/mail/doc_adopted_email.txt": true,
        "doc/mail/downrefs_notice.txt": true,
        "doc/mail/email_iesg_processing.txt": true,
        "doc/mail/external_resource_change_request.txt": true,
        "doc/mail/iana_expert_review_state_changed.txt": true,
        "doc/mail/intended_status_changed_email.txt": true,
        "doc/mail/issue_iesg_ballot_mail.txt": true,
        "doc/mail/issue_irsg_ballot_mail.txt": true,
        "doc/mail/issue_rsab_ballot_mail.txt": true,
        "doc/mail/last_call_announcement.txt": true,
        "doc/mail/last_call_request.txt": true,
        "doc/mail/lc_to_yang_doctors.txt": true,
        "doc/mail/publication_request.txt": true,
        "doc/mail/pulled_from_rfc_queue_email.txt": true,
        "doc/mail/remind_action_holders_mail.txt": true,
        "doc/mail/resurrect_completed_email.txt": true,
        "doc/mail/resurrect_request_email.txt": true,
        "doc/mail/review_possibly_replaces_request.txt": true,
        "doc/mail/state_changed_email.txt": true,
        "doc/mail/stream_changed_email.txt": true,
        "doc/mail/stream_state_changed_email.txt": true,
        "doc/mail/stream_tags_changed_email.txt": true,
        "doc/mail/update_telechat.txt": true,
        "doc/material/all_presentations.html": true,
        "doc/material/choose_material_type.html": true,
        "doc/material/edit_material.html": true,
        "doc/material/presentations-row.html": true,
        "doc/opengraph.html": true,
        "doc/recent_drafts.html": true,
        "doc/relationship_help.html": false,
        "doc/remind_action_holders.html": true,
        "doc/remove_sessionpresentation.html": true,
        "doc/review/assign_reviewer.html": true,
        "doc/review/close_request.html": true,
        "doc/review/complete_review.html": true,
        "doc/review/edit_request_comment.html": true,
        "doc/review/edit_request_deadline.html": true,
        "doc/review/mark_reviewer_assignment_no_response.html": true,
        "doc/review/reject_reviewer_assignment.html": true,
        "doc/review/request_info.html": true,
        "doc/review/request_review.html": true,
        "doc/review/review_request.html": true,
        "doc/review/review_wish_add.html": true,
        "doc/review/review_wishes_remove.html": true,
        "doc/review/submit_unsolicited_review.html": true,
        "doc/review/withdraw_reviewer_assignment.html": true,
        "doc/review_assignment_summary.html": true,
        "doc/review_request_summary.html": false,
        "doc/revisions_list.html": true,
        "doc/rsab_ballot_status.html": true,
        "doc/search/search.html": true,
        "doc/search/search_form.html": true,
        "doc/search/search_result_row.html": true,
        "doc/search/search_results.html": true,
        "doc/search/status_columns.html": true,
        "doc/shepherd_writeup.html": true,
        "doc/shepherd_writeup.txt": true,
        "doc/shepherd_writeup_template.html": true,
        "doc/state_help.html": true,
        "doc/statement/new_statement.html": true,
        "doc/statement/statement_template.md": true,
        "doc/statement/upload_content.html": true,
        "doc/stats/highstock.html": true,
        "doc/status_change/ad_approval_pending_email.txt": true,
        "doc/status_change/approval_text.txt": true,
        "doc/status_change/approve.html": true,
        "doc/status_change/edit_related_rows.html": true,
        "doc/status_change/edit_relations.html": true,
        "doc/status_change/initial_template.txt": true,
        "doc/status_change/last_call.html": true,
        "doc/status_change/last_call_announcement.txt": true,
        "doc/status_change/make_last_call.html": false,
        "doc/status_change/start.html": true,
        "doc/status_change/status_changes.html": false,
        "doc/status_change/submit.html": true,
        "doc/submit_to_iesg.html": true,
        "doc/submit_to_iesg_email.txt": true,
        "doc/yang-check-modal-overlay.html": true,
        "email_failed.html": false,
        "form.html": true,
        "googlea30ad1dacffb5e5b.html": true,
        "group/1wg-charters-by-acronym.txt": true,
        "group/1wg-charters.txt": true,
        "group/1wg-summary-by-acronym.txt": true,
        "group/1wg-summary.txt": true,
        "group/active_adm.html": true,
        "group/active_ags.html": true,
        "group/active_areas.html": true,
        "group/active_dirs.html": true,
        "group/active_groups.html": true,
        "group/active_iabgroups.html": true,
        "group/active_rags.html": true,
        "group/active_review_dirs.html": true,
        "group/active_rfced.html": true,
        "group/active_rgs.html": true,
        "group/active_teams.html": true,
        "group/active_wgs.html": true,
        "group/add_comment.html": true,
        "group/all_photos.html": true,
        "group/all_status.html": true,
        "group/appeal_artifact.html": true,
        "group/appeals.html": true,
        "group/bofs.html": true,
        "group/change_review_secretary_settings.html": true,
        "group/change_reviewer_settings.html": true,
        "group/chartering_groups.html": true,
        "group/comment_added_email.txt": true,
        "group/conclude.html": true,
        "group/concluded_groups.html": true,
        "group/customize_workflow.html": true,
        "group/edit.html": true,
        "group/edit_milestones.html": true,
        "group/email.html": true,
        "group/email_aliases.html": true,
        "group/email_iesg_secretary_re_charter.txt": true,
        "group/email_open_review_assignments.html": true,
        "group/feed_item_description.html": true,
        "group/group_about.html": true,
        "group/group_about_status.html": true,
        "group/group_about_status_edit.html": true,
        "group/group_about_status_meeting.html": true,
        "group/group_base.html": true,
        "group/group_documents.html": true,
        "group/group_entry.txt": true,
        "group/group_entry_with_charter.txt": true,
        "group/group_photos.html": true,
        "group/group_stats_modal.html": true,
        "group/history.html": true,
        "group/index.html": true,
        "group/manage_review_requests.html": true,
        "group/materials.html": true,
        "group/meetings-row.html": true,
        "group/meetings.html": true,
        "group/milestone_form.html": true,
        "group/milestones.html": true,
        "group/reset_charter_milestones.html": true,
        "group/reset_next_reviewer.html": true,
        "group/review_requests.html": true,
        "group/reviewer_overview.html": true,
        "group/statements.html": false,
        "group/stream_documents.html": true,
        "group/stream_edit.html": true,
        "help/state_index.html": true,
        "help/states.html": false,
        "idindex/all_id2.txt": true,
        "idindex/id_index.txt": true,
        "iesg/agenda.html": true,
        "iesg/agenda.txt": true,
        "iesg/agenda_charter.html": true,
        "iesg/agenda_charter.txt": true,
        "iesg/agenda_conflict_doc.html": true,
        "iesg/agenda_conflict_doc.txt": true,
        "iesg/agenda_doc.html": true,
        "iesg/agenda_doc.txt": true,
        "iesg/agenda_documents.html": true,
        "iesg/agenda_package.txt": true,
        "iesg/discusses.html": true,
        "iesg/feed_item_description.html": true,
        "iesg/ietf_activity_report.html": true,
        "iesg/milestones_needing_review.html": true,
        "iesg/moderator_charter.html": true,
        "iesg/moderator_conflict_doc.html": true,
        "iesg/moderator_doc.html": true,
        "iesg/moderator_package.html": true,
        "iesg/nav.html": true,
        "iesg/past_documents.html": true,
        "iesg/photos.html": true,
        "iesg/review_decisions.html": true,
        "iesg/telechat_agenda_content_edit.html": true,
        "iesg/telechat_agenda_content_manage.html": true,
        "ietfauth/allowlist_form.html": true,
        "ietfauth/apikeys.html": true,
        "ietfauth/edit_field.html": true,
        "ietfauth/review_overview.html": true,
        "ietfauth/testemail.html": false,
        "includes/activities.html": true,
        "includes/buttons_back.html": true,
        "includes/buttons_next_cancel.html": false,
        "includes/buttons_proceed.html": true,
        "includes/buttons_save_cancel.html": true,
        "includes/buttons_search.html": true,
        "includes/buttons_submit.html": true,
        "includes/buttons_submit_cancel.html": true,
        "includes/meetings_footer.html": true,
        "includes/search_results_table.html": true,
        "includes/session_info.txt": true,
        "includes/sessions_footer.html": true,
        "includes/sessions_request_form.html": true,
        "includes/sessions_request_view.html": true,
        "includes/sessions_request_view_formset.html": true,
        "includes/sessions_request_view_session_set.html": true,
        "ipr/add_comment.html": true,
        "ipr/add_email.html": true,
        "ipr/admin_list.html": true,
        "ipr/details.txt": true,
        "ipr/details_edit.html": true,
        "ipr/details_edit_draft.html": true,
        "ipr/details_history.html": true,
        "ipr/details_tabs.html": true,
        "ipr/details_view.html": true,
        "ipr/disclosure.html": true,
        "ipr/email.html": false,
        "ipr/ipr_intro.html": true,
        "ipr/ipr_table.html": true,
        "ipr/list.html": true,
        "ipr/migration_licensing.txt": false,
        "ipr/new_update_email.txt": true,
        "ipr/notify.html": true,
        "ipr/posted_document_email.txt": true,
        "ipr/posted_generic_email.txt": true,
        "ipr/posted_submitter_email.txt": true,
        "ipr/removed.html": true,
        "ipr/search.html": true,
        "ipr/search_doc_list.html": true,
        "ipr/search_doc_result.html": true,
        "ipr/search_doctitle_result.html": true,
        "ipr/search_error.html": false,
        "ipr/search_form.html": true,
        "ipr/search_holder_result.html": true,
        "ipr/search_iprtitle_result.html": true,
        "ipr/search_patent_result.html": true,
        "ipr/search_result.html": true,
        "ipr/search_wg_result.html": true,
        "ipr/state.html": true,
        "ipr/submitted.html": true,
        "ipr/update_submitter_email.txt": true,
        "liaisons/add_comment.html": true,
        "liaisons/detail.html": true,
        "liaisons/detail_history.html": true,
        "liaisons/detail_tabs.html": true,
        "liaisons/edit.html": true,
        "liaisons/edit_attachment.html": true,
        "liaisons/feed_item_description.html": true,
        "liaisons/field_help.html": true,
        "liaisons/guide_from_ietf.html": true,
        "liaisons/guide_to_ietf.html": true,
        "liaisons/help.html": true,
        "liaisons/liaison_base.html": true,
        "liaisons/liaison_deadline_mail.txt": true,
        "liaisons/liaison_desc.html": true,
        "liaisons/liaison_mail.txt": true,
        "liaisons/liaison_table.html": true,
        "liaisons/liaison_title.html": true,
        "liaisons/pending_liaison_mail.txt": true,
        "liaisons/sdo_reminder.txt": true,
        "liaisons/search_form.html": true,
        "logo.html": true,
        "mailinglists/group_archives.html": true,
        "mailinglists/nonwg.html": true,
        "mailtrigger/recipient.html": true,
        "mailtrigger/trigger.html": true,
        "main.html": true,
        "meeting/activity_report.html": true,
        "meeting/add_session_drafts.html": true,
        "meeting/agenda.html": true,
        "meeting/agenda.ics": true,
        "meeting/agenda.txt": true,
        "meeting/agenda_filter.html": true,
        "meeting/approve_proposed_slides.html": true,
        "meeting/bluesheet.txt": true,
        "meeting/cancel_session.html": true,
        "meeting/create_timeslot.html": true,
        "meeting/delete_schedule.html": true,
        "meeting/diff_schedules.html": true,
        "meeting/edit_materials_button.html": true,
        "meeting/edit_meeting_schedule.html": true,
        "meeting/edit_meeting_schedule_session.html": true,
        "meeting/edit_meeting_timeslots_and_misc_sessions.html": true,
        "meeting/edit_session.html": true,
        "meeting/edit_timeslot.html": true,
        "meeting/edit_timeslot_form.html": true,
        "meeting/edit_timeslot_type.html": true,
        "meeting/finalize.html": true,
        "meeting/group_materials.html": true,
        "meeting/group_proceedings.html": true,
        "meeting/import_minutes.html": true,
        "meeting/important-dates.html": true,
        "meeting/important_dates.ics": true,
        "meeting/important_dates_for_meeting.ics": true,
        "meeting/interim_announce.html": true,
        "meeting/interim_announcement.txt": true,
        "meeting/interim_announcement_request.txt": true,
        "meeting/interim_approval.txt": true,
        "meeting/interim_approval_request.txt": true,
        "meeting/interim_info.txt": true,
        "meeting/interim_meeting_cancellation_notice.txt": true,
        "meeting/interim_minutes_reminder.txt": true,
        "meeting/interim_nav.html": true,
        "meeting/interim_pending.html": true,
        "meeting/interim_request.html": true,
        "meeting/interim_request_cancel.html": false,
        "meeting/interim_request_details.html": true,
        "meeting/interim_request_edit.html": true,
        "meeting/interim_send_announcement.html": true,
        "meeting/interim_session_buttons.html": true,
        "meeting/interim_session_cancellation_notice.txt": true,
        "meeting/interim_skip_announce.html": true,
        "meeting/make_schedule_official.html": true,
        "meeting/materials.html": true,
        "meeting/materials_editable_groups.html": true,
        "meeting/materials_upload_closed.html": false,
        "meeting/new_meeting_schedule.html": true,
        "meeting/no-agenda.csv": false,
        "meeting/no-agenda.txt": true,
        "meeting/past.html": true,
        "meeting/previously_approved_slides.html": true,
        "meeting/private_schedule.html": true,
        "meeting/proceedings.html": true,
        "meeting/proceedings/edit_material.html": true,
        "meeting/proceedings/edit_material_base.html": true,
        "meeting/proceedings/edit_meetinghosts.html": true,
        "meeting/proceedings/introduction.html": true,
        "meeting/proceedings/material_details.html": true,
        "meeting/proceedings/materials_table.html": true,
        "meeting/proceedings/remove_restore_material.html": true,
        "meeting/proceedings/title.html": true,
        "meeting/proceedings/upload_material.html": true,
        "meeting/proceedings_acknowledgements.html": true,
        "meeting/proceedings_activity_report.html": true,
        "meeting/proceedings_attendees.html": true,
        "meeting/proceedings_overview.html": true,
        "meeting/properties_edit.html": true,
        "meeting/propose_session_slides.html": true,
        "meeting/remove_sessionpresentation.html": true,
        "meeting/request_minutes.html": true,
        "meeting/request_minutes.txt": true,
        "meeting/requests.html": true,
        "meeting/schedule_list.html": true,
        "meeting/session_agenda_include.html": true,
        "meeting/session_buttons_include.html": true,
        "meeting/session_details.html": true,
        "meeting/session_details_form.html": true,
        "meeting/session_details_panel.html": true,
        "meeting/session_materials.html": true,
        "meeting/slides_approved.txt": true,
        "meeting/slides_proposed.txt": true,
        "meeting/timeslot_edit.html": true,
        "meeting/timeslot_edit_timeslot.html": true,
        "meeting/tz-display.html": true,
        "meeting/upcoming.html": true,
        "meeting/upcoming.ics": true,
        "meeting/upload_session_agenda.html": true,
        "meeting/upload_session_bluesheets.html": true,
        "meeting/upload_session_minutes.html": true,
        "meeting/upload_session_slides.html": true,
        "meetings/add.html": true,
        "meetings/base_rooms_times.html": true,
        "meetings/edit_meeting.html": false,
        "meetings/main.html": true,
        "meetings/misc_session_edit.html": true,
        "meetings/misc_sessions.html": true,
        "meetings/notifications.html": true,
        "meetings/regular_session_edit.html": true,
        "meetings/rooms.html": true,
        "meetings/session_schedule_notification.txt": true,
        "meetings/sessions.html": true,
        "meetings/times.html": true,
        "meetings/times_edit.html": false,
        "meetings/view.html": true,
        "message/message.html": true,
        "minimal.html": true,
        "nomcom/announcements.html": true,
        "nomcom/chair_help.html": true,
        "nomcom/delete_nomcom.html": false,
        "nomcom/download_questionnaire.txt": true,
        "nomcom/edit_nomcom.html": true,
        "nomcom/edit_nominee.html": true,
        "nomcom/edit_position.html": true,
        "nomcom/edit_template.html": true,
        "nomcom/edit_topic.html": true,
        "nomcom/eligible.html": true,
        "nomcom/email_list_panel.html": true,
        "nomcom/extract_email_lists.html": true,
        "nomcom/feedback.html": true,
        "nomcom/history.html": true,
        "nomcom/iesg_position_requirements.html": true,
        "nomcom/index.html": true,
        "nomcom/list_positions.html": true,
        "nomcom/list_templates.html": true,
        "nomcom/list_topics.html": true,
        "nomcom/merge_request.txt": true,
        "nomcom/new_edit_members.html": true,
        "nomcom/nomcom_private_base.html": true,
        "nomcom/nomcom_public_base.html": true,
        "nomcom/private_feedback_email.html": true,
        "nomcom/private_index.html": true,
        "nomcom/private_key.html": true,
        "nomcom/private_merge_nominee.html": true,
        "nomcom/private_merge_person.html": true,
        "nomcom/private_nominate.html": true,
        "nomcom/private_questionnaire.html": true,
        "nomcom/process_nomination_status.html": true,
        "nomcom/public_nominate.html": true,
        "nomcom/qualified_volunteer_list_for_announcement.txt": true,
        "nomcom/questionnaires.html": true,
        "nomcom/reclassify_feedback_item.html": false,
        "nomcom/remove_position.html": true,
        "nomcom/remove_topic.html": true,
        "nomcom/requirements.html": true,
        "nomcom/send_reminder_mail.html": true,
        "nomcom/show_template.html": true,
        "nomcom/view_feedback.html": true,
        "nomcom/view_feedback_nominee.html": true,
        "nomcom/view_feedback_pending.html": true,
        "nomcom/view_feedback_topic.html": true,
        "nomcom/view_feedback_unrelated.html": true,
        "nomcom/volunteer.html": true,
        "nomcom/volunteers.html": true,
        "nomcom/volunteers_not_accepted.html": true,
        "nomcom/year_index.html": true,
        "notify_expirations/body.txt": false,
        "notify_expirations/subject.txt": false,
        "oidc_provider/authorize.html": true,
        "oidc_provider/error.html": false,
        "person/mail/possible_duplicates.txt": true,
        "person/merge.html": true,
        "person/person_info.html": true,
        "person/person_link.html": true,
        "person/photo.html": true,
        "person/profile.html": true,
        "registration/add_email_email.txt": true,
        "registration/add_email_exists_email.txt": true,
        "registration/change_password.html": true,
        "registration/change_username.html": true,
        "registration/confirm_account.html": true,
        "registration/confirm_new_email.html": true,
        "registration/confirm_profile_update.html": true,
        "registration/create.html": true,
        "registration/creation_email.txt": true,
        "registration/creation_exists_email.txt": true,
        "registration/edit_profile.html": true,
        "registration/index.html": true,
        "registration/logged_out.html": true,
        "registration/login.html": true,
        "registration/manual.html": true,
        "registration/missing_person.html": false,
        "registration/password_change_email.txt": true,
        "registration/password_reset.html": true,
        "registration/password_reset_email.txt": true,
        "registration/username_change_email.txt": true,
        "release/about.html": true,
        "review/completed_review.txt": true,
        "review/deadline_changed.txt": true,
        "review/notify_ad.txt": true,
        "review/partially_completed_review.txt": true,
        "review/review_reminder_overdue_assignment.txt": true,
        "review/review_request_changed.txt": true,
        "review/reviewer_assignment_rejected.txt": true,
        "review/reviewer_availability_changed.txt": true,
        "review/reviewer_reminder.txt": true,
        "review/reviewer_reminder_all_open_reviews.txt": true,
        "review/reviewer_reminder_unconfirmed_assignments.txt": true,
        "review/reviewer_unavailability_ending.txt": true,
        "review/secretary_reminder.txt": true,
        "review/unavailable_table.html": true,
        "rolodex/add.html": true,
        "rolodex/add_proceed.html": true,
        "rolodex/delete.html": false,
        "rolodex/edit.html": true,
        "rolodex/search.html": true,
        "rolodex/view.html": true,
        "site.webmanifest": true,
        "sreq/confirm.html": true,
        "sreq/edit.html": true,
        "sreq/locked.html": true,
        "sreq/main.html": true,
        "sreq/new.html": true,
        "sreq/not_meeting_notification.txt": true,
        "sreq/session_approval_notification.txt": true,
        "sreq/session_cancel_notification.txt": true,
        "sreq/session_request_notification.txt": true,
        "sreq/tool_status.html": true,
        "sreq/view.html": true,
        "stats/document_stats.html": true,
        "stats/document_stats_author_affiliation.html": true,
        "stats/document_stats_author_citations.html": true,
        "stats/document_stats_author_continent.html": true,
        "stats/document_stats_author_country.html": true,
        "stats/document_stats_author_documents.html": true,
        "stats/document_stats_author_hindex.html": true,
        "stats/document_stats_authors.html": true,
        "stats/document_stats_format.html": true,
        "stats/document_stats_formlang.html": true,
        "stats/document_stats_pages.html": true,
        "stats/document_stats_words.html": true,
        "stats/document_stats_yearly.html": true,
        "stats/includes/number_with_details_cell.html": true,
        "stats/index.html": true,
        "stats/known_countries_list.html": true,
        "stats/meeting_stats.html": true,
        "stats/meeting_stats_continent.html": true,
        "stats/meeting_stats_country.html": true,
        "stats/meeting_stats_overview.html": true,
        "stats/review_stats.html": true,
        "submit/add_preapproval.html": true,
        "submit/add_submit_email.html": true,
        "submit/announce_new_version.txt": true,
        "submit/announce_to_authors.txt": true,
        "submit/announce_to_lists.txt": true,
        "submit/api_submission_info.html": true,
        "submit/api_submit_info.html": true,
        "submit/approval_request.txt": true,
        "submit/approvals.html": true,
        "submit/cancel_preapproval.html": true,
        "submit/confirm_submission.html": true,
        "submit/confirm_submission.txt": true,
        "submit/edit_submission.html": true,
        "submit/email.html": true,
        "submit/extresources_form.html": true,
        "submit/full_url.txt": true,
        "submit/manual_post.html": true,
        "submit/manual_post_request.txt": true,
        "submit/problem-reports-footer.html": true,
        "submit/replaces_form.html": true,
        "submit/search_submission.html": true,
        "submit/submission_email.html": true,
        "submit/submission_files.html": true,
        "submit/submission_status.html": true,
        "submit/submit_base.html": true,
        "submit/submitter_form.html": true,
        "submit/tool_instructions.html": true,
        "submit/upload_submission.html": true,
        "sync/discrepancies.html": true,
        "sync/discrepancies_report.txt": false,
        "sync/notify.html": true,
        "sync/rfceditor_undo.html": true,
        "telechat/base_telechat.html": true,
        "telechat/bash.html": true,
        "telechat/doc.html": true,
        "telechat/doc_template.html": false,
        "telechat/group.html": true,
        "telechat/main.html": true,
        "telechat/management.html": false,
        "telechat/minutes.html": false,
        "telechat/roll_call.html": false,
        "test/mail_body.txt": false,
        "test/mail_subject.txt": false,
        "unauthorized.html": false,
        "utf8_4byte_failed.html": false,
        "utils/apikey_usage_report.txt": true,
        "utils/header_change_content.txt": false,
        "utils/merge_person_records.txt": true
      },
      "format": 1
    },
    "time": "2023-12-18T22:56:17Z",
    "url": {
      "coverage": 0.9357142857142857,
      "covered": {
        "^$": [
          "ietf.doc.views_search.frontpage",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/$": [
          "ietf.group.views.active_groups",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/1wg-charters-by-acronym.txt": [
          "ietf.group.views.wg_charters_by_acronym",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/1wg-charters.txt": [
          "ietf.group.views.wg_charters",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/1wg-summary-by-acronym.txt": [
          "ietf.group.views.wg_summary_acronym",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/1wg-summary.txt": [
          "ietf.group.views.wg_summary_area",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/bofs/$": [
          "ietf.group.views.bofs",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/bofs/create/$": [
          "ietf.group.views.edit",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/email-aliases/$": [
          "ietf.group.views.email_aliases",
          true
        ],
        "^(?P<group_type>(wg|rg|ag|rag|team|dir|review|area|program|iabasg|iabworkshop|adhoc|ise|adm|rfcedtyp|edwg|edappr))/photos/$": [
          "ietf.group.views.chair_photos",
          true
        ],
        "^(?P<path>public)/(?P<script>.*?\\.cgi)(/.*)?$": [
          "ietf.redirects.views.redirect",
          true
        ],
        "^accounts/$": [
          "ietf.ietfauth.views.index",
          true
        ],
        "^accounts/allowlist/add/?$": [
          "ietf.ietfauth.views.add_account_allowlist",
          true
        ],
        "^accounts/apikey/?$": [
          "ietf.ietfauth.views.apikey_index",
          true
        ],
        "^accounts/apikey/add/?$": [
          "ietf.ietfauth.views.apikey_create",
          true
        ],
        "^accounts/apikey/del/?$": [
          "ietf.ietfauth.views.apikey_disable",
          true
        ],
        "^accounts/confirmnewemail/(?P<auth>[^/]+)/$": [
          "ietf.ietfauth.views.confirm_new_email",
          true
        ],
        "^accounts/create/$": [
          "ietf.ietfauth.views.create_account",
          true
        ],
        "^accounts/create/confirm/(?P<auth>[^/]+)/$": [
          "ietf.ietfauth.views.confirm_account",
          true
        ],
        "^accounts/editexternalresources/$": [
          "ietf.ietfauth.views.edit_person_externalresources",
          true
        ],
        "^accounts/login/$": [
          "ietf.ietfauth.views.login",
          true
        ],
        "^accounts/password/$": [
          "ietf.ietfauth.views.change_password",
          true
        ],
        "^accounts/profile/$": [
          "ietf.ietfauth.views.profile",
          true
        ],
        "^accounts/reset/$": [
          "ietf.ietfauth.views.password_reset",
          true
        ],
        "^accounts/reset/confirm/(?P<auth>[^/]+)/$": [
          "ietf.ietfauth.views.confirm_password_reset",
          true
        ],
        "^accounts/review/$": [
          "ietf.ietfauth.views.review_overview",
          true
        ],
        "^accounts/settings/$": [
          "ietf.cookies.views.preferences",
          true
        ],
        "^accounts/settings/expires_soon/": [
          "ietf.cookies.views.expires_soon",
          true
        ],
        "^accounts/settings/expires_soon/(?P<days>.+)$": [
          "ietf.cookies.views.expires_soon",
          true
        ],
        "^accounts/settings/full_draft/": [
          "ietf.cookies.views.full_draft",
          true
        ],
        "^accounts/settings/full_draft/(?P<enabled>.+)$": [
          "ietf.cookies.views.full_draft",
          true
        ],
        "^accounts/settings/left_menu/": [
          "ietf.cookies.views.left_menu",
          true
        ],
        "^accounts/settings/left_menu/(?P<enabled>.+)$": [
          "ietf.cookies.views.left_menu",
          true
        ],
        "^accounts/settings/new_enough/": [
          "ietf.cookies.views.new_enough",
          true
        ],
        "^accounts/settings/new_enough/(?P<days>.+)$": [
          "ietf.cookies.views.new_enough",
          true
        ],
        "^accounts/username/$": [
          "ietf.ietfauth.views.change_username",
          true
        ],
        "^api/$": [
          "ietf.api.views.api_help",
          true
        ],
        "^api/appauth/[authortools|bibxml]": [
          "ietf.api.views.app_auth",
          true
        ],
        "^api/directauth/?$": [
          "ietf.api.views.directauth",
          true
        ],
        "^api/export/personal-information/$": [
          "ietf.api.views.PersonalInformationExportView",
          true
        ],
        "^api/iesg/position": [
          "ietf.doc.views_ballot.api_set_position",
          true
        ],
        "^api/meeting/(?P<num>[A-Za-z0-9._+-]+)/agenda-data$": [
          "ietf.meeting.views.api_get_agenda_data",
          true
        ],
        "^api/meeting/session/(?P<session_id>[A-Za-z0-9._+-]+)/materials$": [
          "ietf.meeting.views.api_get_session_materials",
          true
        ],
        "^api/meeting/session/video/url$": [
          "ietf.meeting.views.api_set_session_video_url",
          true
        ],
        "^api/notify/meeting/bluesheet/?$": [
          "ietf.meeting.views.api_upload_bluesheet",
          true
        ],
        "^api/notify/meeting/registration/?": [
          "ietf.api.views.api_new_meeting_registration",
          true
        ],
        "^api/notify/session/attendees/?$": [
          "ietf.meeting.views.api_add_session_attendees",
          true
        ],
        "^api/notify/session/chatlog/?$": [
          "ietf.meeting.views.api_upload_chatlog",
          true
        ],
        "^api/notify/session/polls/?$": [
          "ietf.meeting.views.api_upload_polls",
          true
        ],
        "^api/openid/\\.well-known/openid-configuration/?$": [
          "oidc_provider.views.ProviderInfoView",
          true
        ],
        "^api/openid/authorize/?$": [
          "oidc_provider.views.AuthorizeView",
          true
        ],
        "^api/openid/introspect/?$": [
          "oidc_provider.views.TokenIntrospectionView",
          false
        ],
        "^api/openid/jwks/?$": [
          "oidc_provider.views.JwksView",
          true
        ],
        "^api/openid/token/?$": [
          "oidc_provider.views.TokenView",
          true
        ],
        "^api/openid/userinfo/?$": [
          "oidc_provider.lib.utils.oauth2.protected_resource_view.<locals>.wrapper.<locals>.view_wrapper",
          true
        ],
        "^api/rfcdiff-latest-json/(?P<name>[A-Za-z0-9._+-]+?)(?:-(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?(\\.txt|\\.html)?/?$": [
          "ietf.api.views.rfcdiff_latest_json",
          true
        ],
        "^api/rfcdiff-latest-json/(?P<name>[Rr][Ff][Cc] [0-9]+?)(\\.txt|\\.html)?/?$": [
          "ietf.api.views.rfcdiff_latest_json",
          true
        ],
        "^api/submission/(?P<submission_id>[0-9]+)/status/?": [
          "ietf.submit.views.api_submission_status",
          true
        ],
        "^api/submission/?$": [
          "ietf.submit.views.api_submission",
          true
        ],
        "^api/submit/?$": [
          "ietf.submit.views.api_submit",
          true
        ],
        "^api/v1/(?P<api_name>api)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          false
        ],
        "^api/v1/(?P<api_name>community)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>dbtemplate)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>doc)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>group)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>idindex)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          false
        ],
        "^api/v1/(?P<api_name>iesg)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>ietfauth)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          false
        ],
        "^api/v1/(?P<api_name>ipr)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>liaisons)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>mailinglists)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>mailtrigger)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>meeting)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>message)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>name)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>nomcom)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>person)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>redirects)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>release)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          false
        ],
        "^api/v1/(?P<api_name>review)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>stats)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>submit)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/(?P<api_name>sync)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          false
        ],
        "^api/v1/(?P<api_name>utils)/$": [
          "tastypie.api.Api.wrap_view.<locals>.wrapper",
          true
        ],
        "^api/v1/?$": [
          "ietf.api.views.top_level",
          true
        ],
        "^api/v2/person/person": [
          "ietf.api.views.ApiV2PersonExportView",
          true
        ],
        "^api/version/?$": [
          "ietf.api.views.version",
          true
        ],
        "^community/personal/(?P<username>[^/]+)/$": [
          "ietf.community.views.view_list",
          true
        ],
        "^community/personal/(?P<username>[^/]+)/csv/$": [
          "ietf.community.views.export_to_csv",
          true
        ],
        "^community/personal/(?P<username>[^/]+)/feed/$": [
          "ietf.community.views.feed",
          true
        ],
        "^community/personal/(?P<username>[^/]+)/manage/$": [
          "ietf.community.views.manage_list",
          true
        ],
        "^community/personal/(?P<username>[^/]+)/subscription/$": [
          "ietf.community.views.subscription",
          true
        ],
        "^community/personal/(?P<username>[^/]+)/trackdocument/(?P<name>[^/]+)/$": [
          "ietf.community.views.track_document",
          true
        ],
        "^community/personal/(?P<username>[^/]+)/untrackdocument/(?P<name>[^/]+)/$": [
          "ietf.community.views.untrack_document",
          true
        ],
        "^doc/$": [
          "ietf.doc.views_search.search",
          false
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/$": [
          "ietf.doc.views_review.request_review",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<acronym>[-a-z0-9]+)/submitunsolicitedreview/$": [
          "ietf.doc.views_review.complete_review",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<assignment_id>[0-9]+)/complete/$": [
          "ietf.doc.views_review.complete_review",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<assignment_id>[0-9]+)/noresponse/$": [
          "ietf.doc.views_review.mark_reviewer_assignment_no_response",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<assignment_id>[0-9]+)/rejectreviewerassignment/$": [
          "ietf.doc.views_review.reject_reviewer_assignment",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<assignment_id>[0-9]+)/withdraw/$": [
          "ietf.doc.views_review.withdraw_reviewer_assignment",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<request_id>[0-9]+)/$": [
          "ietf.doc.views_review.review_request",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<request_id>[0-9]+)/addrequestcomment/$": [
          "ietf.doc.views_review.add_request_comment",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<request_id>[0-9]+)/assignreviewer/$": [
          "ietf.doc.views_review.assign_reviewer",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<request_id>[0-9]+)/close/$": [
          "ietf.doc.views_review.close_request",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<request_id>[0-9]+)/editcomment/$": [
          "ietf.doc.views_review.edit_comment",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<request_id>[0-9]+)/editdeadline/$": [
          "ietf.doc.views_review.edit_deadline",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/(?P<request_id>[0-9]+)/login/$": [
          "ietf.doc.views_review.review_request_forced_login",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/addreviewwish/$": [
          "ietf.doc.views_review.review_wish_add",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/assignment/(?P<assignment_id>[0-9]+)/searchmailarchive/$": [
          "ietf.doc.views_review.search_mail_archive",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/removereviewwishes/$": [
          "ietf.doc.views_review.review_wishes_remove",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/submitunsolicitedreview/$": [
          "ietf.doc.views_review.submit_unsolicited_review_choose_team",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/reviewrequest/team/(?P<acronym>[-a-z0-9]+)/searchmailarchive/$": [
          "ietf.doc.views_review.search_mail_archive",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/session/(?P<session_id>\\d+)/edit$": [
          "ietf.doc.views_doc.edit_sessionpresentation",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/session/(?P<session_id>\\d+)/remove$": [
          "ietf.doc.views_doc.remove_sessionpresentation",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+)/session/add$": [
          "ietf.doc.views_doc.add_sessionpresentation",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)(?:/(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?/$": [
          "ietf.doc.views_doc.document_main",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)(?:/(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?/bibtex/$": [
          "ietf.doc.views_doc.document_bibtex",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)(?:/(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?/idnits2-state/$": [
          "ietf.doc.views_doc.idnits2_state",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/(?:(?P<rev>[0-9]{1,2}(-[0-9]{2})?)/)?doc.json$": [
          "ietf.doc.views_doc.document_json",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/ballot/(?P<ballot_id>[0-9]+)/$": [
          "ietf.doc.views_doc.document_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/ballot/(?P<ballot_id>[0-9]+)/emailposition/$": [
          "ietf.doc.views_ballot.send_ballot_comment",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/ballot/(?P<ballot_id>[0-9]+)/position/$": [
          "ietf.doc.views_ballot.edit_position",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/ballot/(iesg/)?$": [
          "ietf.doc.views_doc.document_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/ballot/irsg/$": [
          "ietf.doc.views_doc.document_irsg_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/ballot/rsab/$": [
          "ietf.doc.views_doc.document_rsab_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/ballotpopup/(?P<ballot_id>[0-9]+)/$": [
          "ietf.doc.views_doc.ballot_popup",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/conflict-review/ad/$": [
          "ietf.doc.views_conflict_review.edit_ad",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/conflict-review/approve/$": [
          "ietf.doc.views_conflict_review.approve_conflict_review",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/conflict-review/notices/$": [
          "ietf.doc.views_doc.edit_notify",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/conflict-review/start_conflict_review/$": [
          "ietf.doc.views_conflict_review.start_review",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/conflict-review/state/$": [
          "ietf.doc.views_conflict_review.change_state",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/conflict-review/submit/$": [
          "ietf.doc.views_conflict_review.submit",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/conflict-review/telechat/$": [
          "ietf.doc.views_doc.telechat_date",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/actionholders/$": [
          "ietf.doc.views_doc.edit_action_holders",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/ad/$": [
          "ietf.doc.views_draft.edit_ad",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/addcomment/$": [
          "ietf.doc.views_doc.add_comment",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/adopt/$": [
          "ietf.doc.views_draft.adopt_draft",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/approvaltext/$": [
          "ietf.doc.views_ballot.ballot_approvaltext",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/approveballot/$": [
          "ietf.doc.views_ballot.approve_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/approvedownrefs/$": [
          "ietf.doc.views_ballot.approve_downrefs",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/authors/$": [
          "ietf.doc.views_doc.edit_authors",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/ballotrfceditornote/$": [
          "ietf.doc.views_ballot.ballot_rfceditornote",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/ballotwriteupnotes/$": [
          "ietf.doc.views_ballot.ballot_writeupnotes",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/clearballot/(?P<ballot_type_slug>[\\w-]+)/$": [
          "ietf.doc.views_ballot.clear_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/closeballot/irsg/$": [
          "ietf.doc.views_ballot.close_irsg_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/closeballot/rsab/$": [
          "ietf.doc.views_ballot.close_rsab_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/consensus/$": [
          "ietf.doc.views_draft.edit_consensus",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/deferballot/$": [
          "ietf.doc.views_ballot.defer_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/ianaexpertcomment/$": [
          "ietf.doc.views_draft.add_iana_experts_comment",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/info/$": [
          "ietf.doc.views_draft.edit_info",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/issueballot/irsg/$": [
          "ietf.doc.views_ballot.issue_irsg_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/issueballot/rsab/$": [
          "ietf.doc.views_ballot.issue_rsab_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/lastcalltext/$": [
          "ietf.doc.views_ballot.lastcalltext",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/makelastcall/$": [
          "ietf.doc.views_ballot.make_last_call",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/notify/$": [
          "ietf.doc.views_doc.edit_notify",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/release/$": [
          "ietf.doc.views_draft.release_draft",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/remindactionholders/$": [
          "ietf.doc.views_doc.remind_action_holders",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/replaces/$": [
          "ietf.doc.views_draft.replaces",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/requestpublication/$": [
          "ietf.doc.views_draft.request_publication",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/requestresurrect/$": [
          "ietf.doc.views_draft.request_resurrect",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/resources/$": [
          "ietf.doc.views_draft.edit_doc_extresources",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/resurrect/$": [
          "ietf.doc.views_draft.resurrect",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/shepherd/$": [
          "ietf.doc.views_draft.edit_shepherd",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/shepherdemail/$": [
          "ietf.doc.views_draft.change_shepherd_email",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/shepherdwriteup/$": [
          "ietf.doc.views_draft.edit_shepherd_writeup",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/state/$": [
          "ietf.doc.views_draft.change_state",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/state/(?P<state_type>draft-stream-[a-z]+)/$": [
          "ietf.doc.views_draft.change_stream_state",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/state/(?P<state_type>iana-action|iana-review|iana-experts)/$": [
          "ietf.doc.views_draft.change_iana_state",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/status/$": [
          "ietf.doc.views_draft.change_intention",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/stream/$": [
          "ietf.doc.views_draft.change_stream",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/submit-to-iesg/$": [
          "ietf.doc.views_draft.to_iesg",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/suggested-replaces/$": [
          "ietf.doc.views_draft.review_possibly_replaces",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/telechat/$": [
          "ietf.doc.views_doc.telechat_date",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/edit/undeferballot/$": [
          "ietf.doc.views_ballot.undefer_ballot",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/email/$": [
          "ietf.doc.views_doc.document_email",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/history/$": [
          "ietf.doc.views_doc.document_history",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/material/(?P<action>state|title|abstract|revise)/$": [
          "ietf.doc.views_material.edit_material",
          false
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/meetings/?$": [
          "ietf.doc.views_doc.all_presentations",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/referencedby/$": [
          "ietf.doc.views_doc.document_referenced_by",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/references/$": [
          "ietf.doc.views_doc.document_references",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/session/(?P<action>state|title|abstract|revise)/$": [
          "ietf.doc.views_material.edit_material",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/shepherdwriteup/$": [
          "ietf.doc.views_doc.document_shepherd_writeup",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/ad/$": [
          "ietf.doc.views_status_change.edit_ad",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/approve/$": [
          "ietf.doc.views_status_change.approve",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/last-call/$": [
          "ietf.doc.views_status_change.last_call",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/notices/$": [
          "ietf.doc.views_doc.edit_notify",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/relations/$": [
          "ietf.doc.views_status_change.edit_relations",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/state/$": [
          "ietf.doc.views_status_change.change_state",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/submit/$": [
          "ietf.doc.views_status_change.submit",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/telechat/$": [
          "ietf.doc.views_doc.telechat_date",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/status-change/title/$": [
          "ietf.doc.views_status_change.edit_title",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9._+-]+?)/writeup/$": [
          "ietf.doc.views_doc.document_writeup",
          true
        ],
        "^doc/(?P<name>[A-Za-z0-9\\._\\+\\-]+)$": [
          "ietf.doc.views_search.search_for_name",
          true
        ],
        "^doc/(?P<name>bofreq-[-a-z0-9]+)/editors/$": [
          "ietf.doc.views_bofreq.change_editors",
          true
        ],
        "^doc/(?P<name>bofreq-[-a-z0-9]+)/responsible/$": [
          "ietf.doc.views_bofreq.change_responsible",
          true
        ],
        "^doc/(?P<name>bofreq-[-a-z0-9]+)/state/$": [
          "ietf.doc.views_bofreq.change_state",
          true
        ],
        "^doc/(?P<name>bofreq-[-a-z0-9]+)/submit/$": [
          "ietf.doc.views_bofreq.submit",
          true
        ],
        "^doc/(?P<name>bofreq-[-a-z0-9]+)/title/$": [
          "ietf.doc.views_bofreq.edit_title",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/(?P<option>initcharter|recharter|abandon)/$": [
          "ietf.doc.views_charter.change_state",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/action/$": [
          "ietf.doc.views_charter.action_announcement_text",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/ad/$": [
          "ietf.doc.views_charter.edit_ad",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/approve/$": [
          "ietf.doc.views_charter.approve",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/ballotwriteupnotes/$": [
          "ietf.doc.views_charter.ballot_writeupnotes",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/notify/$": [
          "ietf.doc.views_doc.edit_notify",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/review/$": [
          "ietf.doc.views_charter.review_announcement_text",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/state/$": [
          "ietf.doc.views_charter.change_state",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/submit/(?:(?P<option>initcharter|recharter)/)?$": [
          "ietf.doc.views_charter.submit",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/telechat/$": [
          "ietf.doc.views_doc.telechat_date",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/title/$": [
          "ietf.doc.views_charter.change_title",
          true
        ],
        "^doc/(?P<name>charter-[-a-z0-9]+)/withmilestones-(?P<rev>[0-9-]{2,5}).txt$": [
          "ietf.doc.views_charter.charter_with_milestones_txt",
          true
        ],
        "^doc/(?P<name>statement-[-a-z0-9]+)/(?:(?P<rev>[0-9]{1,2}(-[0-9]{2})?)/)?pdf/$": [
          "ietf.doc.views_statement.serve_pdf",
          true
        ],
        "^doc/(?P<name>statement-[-a-z0-9]+)/submit/$": [
          "ietf.doc.views_statement.submit",
          true
        ],
        "^doc/(?P<type_id>(bcp|std|fyi))/?$": [
          "ietf.doc.views_search.index_subseries",
          true
        ],
        "^doc/active/?$": [
          "ietf.doc.views_search.index_active_drafts",
          true
        ],
        "^doc/ad/(?P<name>[^/]+)/?$": [
          "ietf.doc.views_search.docs_for_ad",
          true
        ],
        "^doc/ad/?$": [
          "ietf.doc.views_search.ad_workload",
          true
        ],
        "^doc/all/?$": [
          "ietf.doc.views_search.index_all_drafts",
          true
        ],
        "^doc/ballots/irsg/$": [
          "ietf.doc.views_ballot.irsg_ballot_status",
          true
        ],
        "^doc/ballots/rsab/$": [
          "ietf.doc.views_ballot.rsab_ballot_status",
          true
        ],
        "^doc/bibxml3/(?P<name>[A-Za-z0-9._+-]+?)(?:-(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?.xml$": [
          "ietf.doc.views_doc.document_bibxml",
          true
        ],
        "^doc/bibxml3/reference.I-D.(?P<name>[A-Za-z0-9._+-]+?)(?:-(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?.xml$": [
          "ietf.doc.views_doc.document_bibxml_ref",
          true
        ],
        "^doc/bof-requests/?$": [
          "ietf.doc.views_bofreq.bof_requests",
          true
        ],
        "^doc/bof-requests/new/$": [
          "ietf.doc.views_bofreq.new_bof_request",
          true
        ],
        "^doc/downref/?$": [
          "ietf.doc.views_downref.downref_registry",
          true
        ],
        "^doc/downref/add/?$": [
          "ietf.doc.views_downref.downref_registry_add",
          true
        ],
        "^doc/email-aliases/?$": [
          "ietf.doc.views_doc.email_aliases",
          true
        ],
        "^doc/help/relationships/$": [
          "ietf.doc.views_help.relationship_help",
          false
        ],
        "^doc/help/relationships/(?P<subset>\\w+)/$": [
          "ietf.doc.views_help.relationship_help",
          false
        ],
        "^doc/help/state/(?P<type>[\\w-]+)/$": [
          "ietf.doc.views_help.state_help",
          true
        ],
        "^doc/html/(?P<name>[A-Za-z0-9._+-]+?)(?:-(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?(\\.txt|\\.html)?/?$": [
          "ietf.doc.views_doc.document_html",
          true
        ],
        "^doc/html/(?P<name>[Rr][Ff][Cc] [0-9]+?)(\\.txt|\\.html)?/?$": [
          "ietf.doc.views_doc.document_html",
          true
        ],
        "^doc/id/(?P<name>[A-Za-z0-9._+-]+?)(?:-(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?(?:\\.(?P<ext>(txt|html|xml)))?/?$": [
          "ietf.doc.views_doc.document_raw_id",
          true
        ],
        "^doc/idnits2-rfc-status/?$": [
          "ietf.doc.views_doc.idnits2_rfc_status",
          true
        ],
        "^doc/idnits2-rfcs-obsoleted/?$": [
          "ietf.doc.views_doc.idnits2_rfcs_obsoleted",
          true
        ],
        "^doc/iesg/?$": [
          "ietf.doc.views_search.drafts_in_iesg_process",
          true
        ],
        "^doc/in-last-call/?$": [
          "ietf.doc.views_search.drafts_in_last_call",
          true
        ],
        "^doc/pdf/(?P<name>[A-Za-z0-9._+-]+?)(?:-(?P<rev>[0-9]{1,2}(-[0-9]{2})?))?(?:\\.(?P<ext>[a-z]+))?/?$": [
          "ietf.doc.views_doc.document_pdfized",
          true
        ],
        "^doc/recent/?$": [
          "ietf.doc.views_search.recent_drafts",
          true
        ],
        "^doc/rfc-status-changes/?$": [
          "ietf.doc.views_status_change.rfc_status_changes",
          false
        ],
        "^doc/search/?$": [
          "ietf.doc.views_search.search",
          true
        ],
        "^doc/select2search/(?P<model_name>document)/(?P<doc_type>(draft|rfc|all))/$": [
          "ietf.doc.views_search.ajax_select2_search_docs",
          true
        ],
        "^doc/shepherdwriteup-template/(?P<type>\\w+)/?$": [
          "ietf.doc.views_doc.document_shepherd_writeup_template",
          true
        ],
        "^doc/start-rfc-status-change/(?:(?P<name>[A-Za-z0-9._+-]+?)/)?$": [
          "ietf.doc.views_status_change.start_rfc_status_change",
          true
        ],
        "^doc/statement/new/$": [
          "ietf.doc.views_statement.new_statement",
          true
        ],
        "^doc/stats/newrevisiondocevent/?$": [
          "ietf.doc.views_stats.chart_newrevisiondocevent",
          true
        ],
        "^doc/stats/newrevisiondocevent/conf/?$": [
          "ietf.doc.views_stats.chart_conf_newrevisiondocevent",
          true
        ],
        "^doc/stats/newrevisiondocevent/data/?$": [
          "ietf.doc.views_stats.chart_data_newrevisiondocevent",
          true
        ],
        "^doc/stats/person/(?P<id>[0-9]+)/drafts/conf/?$": [
          "ietf.doc.views_stats.chart_conf_person_drafts",
          true
        ],
        "^doc/stats/person/(?P<id>[0-9]+)/drafts/data/?$": [
          "ietf.doc.views_stats.chart_data_person_drafts",
          true
        ],
        "^drafts/wgid/(?P<id>\\d+)/$": [
          "ietf.doc.redirect_drafts_urls.<lambda>",
          false
        ],
        "^feed/document-changes/(?P<name>[A-Za-z0-9._+-]+?)/$": [
          "ietf.doc.feeds.DocumentChangesFeed",
          true
        ],
        "^feed/group-changes/(?P<acronym>[-a-z0-9]+)/$": [
          "ietf.group.feeds.GroupChangesFeed",
          true
        ],
        "^feed/iesg-agenda/$": [
          "ietf.iesg.feeds.IESGAgendaFeed",
          true
        ],
        "^feed/ipr/$": [
          "ietf.ipr.feeds.LatestIprDisclosuresFeed",
          true
        ],
        "^feed/last-call/$": [
          "ietf.doc.feeds.InLastCallFeed",
          true
        ],
        "^feed/liaison/(?P<kind>recent|from|to|subject)/(?:(?P<search>[^/]+)/)?$": [
          "ietf.liaisons.feeds.LiaisonStatementsFeed",
          true
        ],
        "^feed/rfc/$": [
          "ietf.doc.feeds.RfcFeed",
          true
        ],
        "^feed/rfc/(?P<year>\\d{4})/?$": [
          "ietf.doc.feeds.RfcFeed",
          true
        ],
        "^feed/wg-proceedings/$": [
          "ietf.meeting.feeds.LatestMeetingMaterialFeed",
          true
        ],
        "^group/$": [
          "ietf.group.views.active_groups",
          true
        ],
        "^group/(?P<acronym>[-a-z0-9]+)/$": [
          "ietf.group.views.group_home",
          true
        ],
        "^group/all-status/$": [
          "ietf.group.views.all_status",
          true
        ],
        "^group/chartering/$": [
          "ietf.group.views.chartering_groups",
          true
        ],
        "^group/chartering/create/(?P<group_type>(wg|rg))/$": [
          "ietf.group.views.edit",
          true
        ],
        "^group/concluded/$": [
          "ietf.group.views.concluded_groups",
          true
        ],
        "^group/email-aliases/$": [
          "ietf.group.views.email_aliases",
          true
        ],
        "^group/groupmenu.json": [
          "ietf.group.views.group_menu_data",
          true
        ],
        "^group/groupstats.json": [
          "ietf.group.views.group_stats_data",
          true
        ],
        "^help/state/(?P<doc>[-\\w]+)/(?P<type>[-\\w]+)/?$": [
          "ietf.help.views.state",
          false
        ],
        "^help/state/(?P<doc>[-\\w]+)/?$": [
          "ietf.help.views.state",
          false
        ],
        "^help/state/?$": [
          "ietf.help.views.state_index",
          true
        ],
        "^iesg/agenda/(?:(?P<date>\\d{4}-\\d{2}-\\d{2})/)?$": [
          "ietf.iesg.views.agenda",
          true
        ],
        "^iesg/agenda/(?:(?P<date>\\d{4}-\\d{2}-\\d{2})/)?agenda.json$": [
          "ietf.iesg.views.agenda_json",
          true
        ],
        "^iesg/agenda/(?:(?P<date>\\d{4}-\\d{2}-\\d{2})/)?agenda.txt$": [
          "ietf.iesg.views.agenda_txt",
          true
        ],
        "^iesg/agenda/(?:(?P<date>\\d{4}-\\d{2}-\\d{2})/)?agenda_package.txt$": [
          "ietf.iesg.views.agenda_package",
          true
        ],
        "^iesg/agenda/(?:(?P<date>\\d{4}-\\d{2}-\\d{2})/)?moderator_package.html$": [
          "ietf.iesg.views.agenda_moderator_package",
          true
        ],
        "^iesg/agenda/documents.txt$": [
          "ietf.iesg.views.agenda_documents_txt",
          true
        ],
        "^iesg/agenda/documents/$": [
          "ietf.iesg.views.agenda_documents",
          true
        ],
        "^iesg/agenda/section/(?P<section>[a-z_]+)$": [
          "ietf.iesg.views.telechat_agenda_content_view",
          true
        ],
        "^iesg/agenda/section/(?P<section>[a-z_]+)/edit$": [
          "ietf.iesg.views.telechat_agenda_content_edit",
          true
        ],
        "^iesg/agenda/sections$": [
          "ietf.iesg.views.telechat_agenda_content_manage",
          true
        ],
        "^iesg/agenda/telechat-(?:(?P<date>\\d{4}-\\d{2}-\\d{2})-)?docs.tgz": [
          "ietf.iesg.views.telechat_docs_tarfile",
          true
        ],
        "^iesg/decisions/(?:(?P<year>[0-9]{4})/)?$": [
          "ietf.iesg.views.review_decisions",
          true
        ],
        "^iesg/discusses/$": [
          "ietf.iesg.views.discusses",
          true
        ],
        "^iesg/ietf-activity/$": [
          "ietf.iesg.views.ietf_activity",
          true
        ],
        "^iesg/milestones/$": [
          "ietf.iesg.views.milestones_needing_review",
          true
        ],
        "^iesg/past/documents/$": [
          "ietf.iesg.views.past_documents",
          true
        ],
        "^iesg/photos/$": [
          "ietf.iesg.views.photos",
          true
        ],
        "^ipr/$": [
          "ietf.ipr.views.showlist",
          true
        ],
        "^ipr/(?P<id>\\d+)/$": [
          "ietf.ipr.views.show",
          true
        ],
        "^ipr/(?P<id>\\d+)/addcomment/$": [
          "ietf.ipr.views.add_comment",
          true
        ],
        "^ipr/(?P<id>\\d+)/addemail/$": [
          "ietf.ipr.views.add_email",
          true
        ],
        "^ipr/(?P<id>\\d+)/edit/$": [
          "ietf.ipr.views.edit",
          true
        ],
        "^ipr/(?P<id>\\d+)/email/$": [
          "ietf.ipr.views.email",
          true
        ],
        "^ipr/(?P<id>\\d+)/history/$": [
          "ietf.ipr.views.history",
          true
        ],
        "^ipr/(?P<id>\\d+)/notify/(?P<type>update|posted)/$": [
          "ietf.ipr.views.notify",
          true
        ],
        "^ipr/(?P<id>\\d+)/post/$": [
          "ietf.ipr.views.post",
          true
        ],
        "^ipr/(?P<id>\\d+)/state/$": [
          "ietf.ipr.views.state",
          true
        ],
        "^ipr/about/$": [
          "ietf.ipr.views.about",
          true
        ],
        "^ipr/admin/(?P<state>pending|removed|parked)/$": [
          "ietf.ipr.views.admin",
          true
        ],
        "^ipr/ajax/search/$": [
          "ietf.ipr.views.ajax_search",
          true
        ],
        "^ipr/by-draft-recursive/$": [
          "ietf.ipr.views.by_draft_recursive_txt",
          false
        ],
        "^ipr/by-draft/$": [
          "ietf.ipr.views.by_draft_txt",
          true
        ],
        "^ipr/new-(?P<type>(specific|generic|general|third-party))/$": [
          "ietf.ipr.views.new",
          true
        ],
        "^ipr/search/$": [
          "ietf.ipr.views.search",
          true
        ],
        "^ipr/update/(?P<id>\\d+)/$": [
          "ietf.ipr.views.update",
          true
        ],
        "^liaison/$": [
          "ietf.liaisons.views.liaison_list",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/$": [
          "ietf.liaisons.views.liaison_detail",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/addcomment/$": [
          "ietf.liaisons.views.add_comment",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/delete-attachment/(?P<attach_id>[A-Za-z0-9._+-]+)$": [
          "ietf.liaisons.views.liaison_delete_attachment",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/edit-attachment/(?P<doc_id>[A-Za-z0-9._+-]+)$": [
          "ietf.liaisons.views.liaison_edit_attachment",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/edit/$": [
          "ietf.liaisons.views.liaison_edit",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/history/$": [
          "ietf.liaisons.views.liaison_history",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/reply/$": [
          "ietf.liaisons.views.liaison_reply",
          true
        ],
        "^liaison/(?P<object_id>\\d+)/resend/$": [
          "ietf.liaisons.views.liaison_resend",
          true
        ],
        "^liaison/(?P<state>(posted|pending|dead))/": [
          "ietf.liaisons.views.liaison_list",
          true
        ],
        "^liaison/add/$": [
          "ietf.liaisons.views.redirect_add",
          true
        ],
        "^liaison/add/(?P<type>(incoming|outgoing))/$": [
          "ietf.liaisons.views.liaison_add",
          true
        ],
        "^liaison/ajax/get_info/$": [
          "ietf.liaisons.views.ajax_get_liaison_info",
          true
        ],
        "^liaison/ajax/select2search/$": [
          "ietf.liaisons.views.ajax_select2_search_liaison_statements",
          true
        ],
        "^liaison/for_approval/$": [
          "ietf.liaisons.views.redirect_for_approval",
          true
        ],
        "^liaison/for_approval/(?P<object_id>\\d+)/$": [
          "ietf.liaisons.views.redirect_for_approval",
          true
        ],
        "^list/nonwg/?$": [
          "ietf.mailinglists.views.nonwg",
          true
        ],
        "^list/wg/?$": [
          "ietf.mailinglists.views.groups",
          true
        ],
        "^mailtrigger/name/$": [
          "ietf.mailtrigger.views.show_triggers",
          true
        ],
        "^mailtrigger/name/(?P<mailtrigger_slug>[-\\w]+)/$": [
          "ietf.mailtrigger.views.show_triggers",
          true
        ],
        "^mailtrigger/recipient/$": [
          "ietf.mailtrigger.views.show_recipients",
          true
        ],
        "^mailtrigger/recipient/(?P<recipient_slug>[-\\w]+)/$": [
          "ietf.mailtrigger.views.show_recipients",
          true
        ],
        "^meeting/$": [
          "ietf.meeting.views.current_materials",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?agenda(?P<utc>-utc)?(?P<ext>\\.html)?/?$": [
          "ietf.meeting.views.agenda",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?agenda(?P<utc>-utc)?(?P<ext>\\.txt|\\.csv)$": [
          "ietf.meeting.views.agenda_plain",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?agenda.json$": [
          "ietf.meeting.views.agenda_json",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?agenda/agenda\\.ics$": [
          "ietf.meeting.views.agenda_ical",
          false
        ],
        "^meeting/(?:(?P<num>\\d+)/)?agenda/edit/$": [
          "ietf.meeting.views.edit_meeting_schedule",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?agenda\\.ics$": [
          "ietf.meeting.views.agenda_ical",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?floor-plan/?$": [
          "ietf.meeting.views.agenda",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?important-dates.(?P<output_format>ics)$": [
          "ietf.meeting.views.important_dates",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?important-dates/$": [
          "ietf.meeting.views.important_dates",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?materials(?:.html)?/?$": [
          "ietf.meeting.views.materials",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?materials/(?P<document>[a-z][-a-z0-9]+)((?P<ext>\\.[a-z0-9]+)|/)?$": [
          "ietf.meeting.views.materials_document",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings(?:.html)?/?$": [
          "ietf.meeting.views.proceedings",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings(?:.html)?/finalize/?$": [
          "ietf.meeting.views.finalize_proceedings",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/acknowledgements/$": [
          "ietf.meeting.views.proceedings_acknowledgements",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/activity-report/$": [
          "ietf.meeting.views.proceedings_activity_report",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/attendees/$": [
          "ietf.meeting.views.proceedings_attendees",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/materials/$": [
          "ietf.meeting.views_proceedings.material_details",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/materials/(?P<material_type>[a-z_]+)/$": [
          "ietf.meeting.views_proceedings.edit_material",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/materials/(?P<material_type>[a-z_]+)/new/$": [
          "ietf.meeting.views_proceedings.upload_material",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/materials/(?P<material_type>[a-z_]+)/remove/$": [
          "ietf.meeting.views_proceedings.remove_restore_material",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/materials/(?P<material_type>[a-z_]+)/restore/$": [
          "ietf.meeting.views_proceedings.remove_restore_material",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/meetinghosts/(?P<host_id>\\d+)/logo/$": [
          "ietf.meeting.views_proceedings.meetinghost_logo",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/meetinghosts/edit/": [
          "ietf.meeting.views_proceedings.edit_meetinghosts",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?proceedings/overview/$": [
          "ietf.meeting.views.proceedings_overview",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?request_minutes/?$": [
          "ietf.meeting.views.request_minutes",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?requests$": [
          "ietf.meeting.views.meeting_requests",
          true
        ],
        "^meeting/(?:(?P<num>\\d+)/)?session/?$": [
          "ietf.meeting.views.materials_editable_groups",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<acronym>[-a-z0-9]+)-drafts.pdf$": [
          "ietf.meeting.views.session_draft_pdf",
          false
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<acronym>[-a-z0-9]+)-drafts.tgz$": [
          "ietf.meeting.views.session_draft_tarfile",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<owner>[-A-Za-z0-9\\'+._]+@[A-Za-z0-9-._]+)/(?P<name>[A-Za-z0-9-:_]+)(\\.(?P<ext>.html))?/?$": [
          "ietf.meeting.views.agenda",
          false
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<owner>[-A-Za-z0-9\\'+._]+@[A-Za-z0-9-._]+)/(?P<name>[A-Za-z0-9-:_]+)/delete$": [
          "ietf.meeting.views.delete_schedule",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<owner>[-A-Za-z0-9\\'+._]+@[A-Za-z0-9-._]+)/(?P<name>[A-Za-z0-9-:_]+)/details$": [
          "ietf.meeting.views.edit_schedule_properties",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<owner>[-A-Za-z0-9\\'+._]+@[A-Za-z0-9-._]+)/(?P<name>[A-Za-z0-9-:_]+)/edit/?$": [
          "ietf.meeting.views.edit_meeting_schedule",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<owner>[-A-Za-z0-9\\'+._]+@[A-Za-z0-9-._]+)/(?P<name>[A-Za-z0-9-:_]+)/make_official$": [
          "ietf.meeting.views.make_schedule_official",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<owner>[-A-Za-z0-9\\'+._]+@[A-Za-z0-9-._]+)/(?P<name>[A-Za-z0-9-:_]+)/new/$": [
          "ietf.meeting.views.new_meeting_schedule",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/(?P<owner>[-A-Za-z0-9\\'+._]+@[A-Za-z0-9-._]+)/(?P<name>[A-Za-z0-9-:_]+)/timeslots/$": [
          "ietf.meeting.views.edit_meeting_timeslots_and_misc_sessions",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/by-type/(?P<type>[a-z]+)/ics$": [
          "ietf.meeting.views.agenda_by_type_ics",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/new/$": [
          "ietf.meeting.views.new_meeting_schedule",
          true
        ],
        "^meeting/(?P<num>\\d+)/agenda/personalize": [
          "ietf.meeting.views.agenda",
          false
        ],
        "^meeting/(?P<num>\\d+)/agendas/diff/$": [
          "ietf.meeting.views.diff_schedules",
          true
        ],
        "^meeting/(?P<num>\\d+)/agendas/list$": [
          "ietf.meeting.views.list_schedules",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<acronym>[-a-z0-9]+)/?$": [
          "ietf.meeting.views.session_details",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/add_to_session$": [
          "ietf.meeting.views.ajax_add_slides_to_session",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/agenda$": [
          "ietf.meeting.views.upload_session_agenda",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/bluesheets$": [
          "ietf.meeting.views.upload_session_bluesheets",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/doc/(?P<name>[A-Za-z0-9._+-]+?)/remove$": [
          "ietf.meeting.views.remove_sessionpresentation",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/drafts$": [
          "ietf.meeting.views.add_session_drafts",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/import/minutes$": [
          "ietf.meeting.views.import_session_minutes",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/minutes$": [
          "ietf.meeting.views.upload_session_minutes",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/propose_slides$": [
          "ietf.meeting.views.propose_session_slides",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/remove_from_session$": [
          "ietf.meeting.views.ajax_remove_slides_from_session",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/reorder_in_session$": [
          "ietf.meeting.views.ajax_reorder_slides_in_session",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)/slides(?:/(?P<name>[A-Za-z0-9._+-]+?))?$": [
          "ietf.meeting.views.upload_session_slides",
          true
        ],
        "^meeting/(?P<num>\\d+)/session/(?P<session_id>\\d+)\\.ics$": [
          "ietf.meeting.views.agenda_ical",
          true
        ],
        "^meeting/(?P<num>\\d+)/sessions/(?P<acronym>[-a-z0-9]+)\\.ics$": [
          "ietf.meeting.views.agenda_ical",
          true
        ],
        "^meeting/(?P<num>\\d+)/slidesubmission/(?P<slidesubmission_id>\\d+)$": [
          "ietf.meeting.views.approve_proposed_slides",
          true
        ],
        "^meeting/(?P<num>\\d+)/timeslot/(?P<slot_id>\\d+)/edit$": [
          "ietf.meeting.views.edit_timeslot",
          true
        ],
        "^meeting/(?P<num>\\d+)/timeslot/(?P<slot_id>\\d+)/edittype$": [
          "ietf.meeting.views.edit_timeslot_type",
          true
        ],
        "^meeting/(?P<num>\\d+)/timeslot/new$": [
          "ietf.meeting.views.create_timeslot",
          true
        ],
        "^meeting/(?P<num>\\d+)/timeslots/edit/?$": [
          "ietf.meeting.views.edit_timeslots",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/agenda.json$": [
          "ietf.meeting.views.agenda_json",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/agenda/(?P<acronym>[A-Za-z0-9-]+)-drafts.pdf$": [
          "ietf.meeting.views.session_draft_pdf",
          false
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/agenda/(?P<acronym>[A-Za-z0-9-]+)-drafts.tgz$": [
          "ietf.meeting.views.session_draft_tarfile",
          false
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/materials/(?P<document>[a-z][-a-z0-9]+)((?P<ext>\\.[a-z0-9]+)|/)?$": [
          "ietf.meeting.views.materials_document",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<acronym>[-a-z0-9]+)/?$": [
          "ietf.meeting.views.session_details",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/add_to_session$": [
          "ietf.meeting.views.ajax_add_slides_to_session",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/agenda$": [
          "ietf.meeting.views.upload_session_agenda",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/bluesheets$": [
          "ietf.meeting.views.upload_session_bluesheets",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/doc/(?P<name>[A-Za-z0-9._+-]+?)/remove$": [
          "ietf.meeting.views.remove_sessionpresentation",
          false
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/drafts$": [
          "ietf.meeting.views.add_session_drafts",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/import/minutes$": [
          "ietf.meeting.views.import_session_minutes",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/minutes$": [
          "ietf.meeting.views.upload_session_minutes",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/propose_slides$": [
          "ietf.meeting.views.propose_session_slides",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/remove_from_session$": [
          "ietf.meeting.views.ajax_remove_slides_from_session",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/reorder_in_session$": [
          "ietf.meeting.views.ajax_reorder_slides_in_session",
          false
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)/slides(?:/(?P<name>[A-Za-z0-9._+-]+?))?$": [
          "ietf.meeting.views.upload_session_slides",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/session/(?P<session_id>\\d+)\\.ics$": [
          "ietf.meeting.views.agenda_ical",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/sessions/(?P<acronym>[-a-z0-9]+)\\.ics$": [
          "ietf.meeting.views.agenda_ical",
          true
        ],
        "^meeting/(?P<num>interim-[a-z0-9-]+)/slidesubmission/(?P<slidesubmission_id>\\d+)$": [
          "ietf.meeting.views.approve_proposed_slides",
          true
        ],
        "^meeting/interim/announce/(?P<number>[A-Za-z0-9._+-]+)/?$": [
          "ietf.meeting.views.interim_send_announcement",
          true
        ],
        "^meeting/interim/announce/?$": [
          "ietf.meeting.views.interim_announce",
          true
        ],
        "^meeting/interim/pending/?$": [
          "ietf.meeting.views.interim_pending",
          true
        ],
        "^meeting/interim/request/(?P<number>[A-Za-z0-9._+-]+)/?$": [
          "ietf.meeting.views.interim_request_details",
          true
        ],
        "^meeting/interim/request/(?P<number>[A-Za-z0-9._+-]+)/cancel/?$": [
          "ietf.meeting.views.interim_request_cancel",
          true
        ],
        "^meeting/interim/request/(?P<number>[A-Za-z0-9._+-]+)/edit/?$": [
          "ietf.meeting.views.interim_request_edit",
          true
        ],
        "^meeting/interim/request/?$": [
          "ietf.meeting.views.interim_request",
          true
        ],
        "^meeting/interim/session/(?P<sessionid>[A-Za-z0-9._+-]+)/cancel/?$": [
          "ietf.meeting.views.interim_request_session_cancel",
          true
        ],
        "^meeting/interim/skip_announce/(?P<number>[A-Za-z0-9._+-]+)/?$": [
          "ietf.meeting.views.interim_skip_announcement",
          true
        ],
        "^meeting/past/?$": [
          "ietf.meeting.views.past",
          true
        ],
        "^meeting/session/(?P<session_id>\\d+)/agenda_materials$": [
          "ietf.meeting.views.session_materials",
          true
        ],
        "^meeting/session/(?P<session_id>\\d+)/cancel/?": [
          "ietf.meeting.views.cancel_session",
          true
        ],
        "^meeting/session/(?P<session_id>\\d+)/edit/?": [
          "ietf.meeting.views.edit_session",
          true
        ],
        "^meeting/upcoming/?$": [
          "ietf.meeting.views.upcoming",
          true
        ],
        "^meeting/upcoming\\.ics/?$": [
          "ietf.meeting.views.upcoming_ical",
          true
        ],
        "^meeting/upcoming\\.json/?$": [
          "ietf.meeting.views.upcoming_json",
          true
        ],
        "^nomcom/$": [
          "ietf.nomcom.views.index",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/$": [
          "ietf.nomcom.views.year_index",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/eligible/$": [
          "ietf.nomcom.views.public_eligible",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/expertise/$": [
          "ietf.nomcom.views.requirements",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/feedback/$": [
          "ietf.nomcom.views.public_feedback",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/nominate/$": [
          "ietf.nomcom.views.public_nominate",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/nominate/newperson$": [
          "ietf.nomcom.views.public_nominate_newperson",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/$": [
          "ietf.nomcom.views.private_index",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/eligible/$": [
          "ietf.nomcom.views.private_eligible",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/position/$": [
          "ietf.nomcom.views.list_positions",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/position/(?P<position_id>\\d+)/$": [
          "ietf.nomcom.views.edit_position",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/position/(?P<position_id>\\d+)/remove/$": [
          "ietf.nomcom.views.remove_position",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/position/add/$": [
          "ietf.nomcom.views.edit_position",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/templates/$": [
          "ietf.nomcom.views.list_templates",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/templates/(?P<template_id>\\d+)/$": [
          "ietf.nomcom.views.edit_template",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/topic/$": [
          "ietf.nomcom.views.list_topics",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/topic/(?P<topic_id>\\d+)/$": [
          "ietf.nomcom.views.edit_topic",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/topic/(?P<topic_id>\\d+)/remove/$": [
          "ietf.nomcom.views.remove_topic",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/topic/add/$": [
          "ietf.nomcom.views.edit_topic",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/volunteers/$": [
          "ietf.nomcom.views.private_volunteers",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/volunteers/announce-list/$": [
          "ietf.nomcom.views.qualified_volunteer_list_for_announcement",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/chair/volunteers/csv/$": [
          "ietf.nomcom.views.private_volunteers_csv",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/edit-members/$": [
          "ietf.nomcom.views.edit_members",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/edit-nomcom/$": [
          "ietf.nomcom.views.edit_nomcom",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/edit/nominee/(?P<nominee_id>\\d+)$": [
          "ietf.nomcom.views.edit_nominee",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/extract-email-lists/$": [
          "ietf.nomcom.views.extract_email_lists",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/feedback-email/$": [
          "ietf.nomcom.views.private_feedback_email",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/feedback/$": [
          "ietf.nomcom.views.private_feedback",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/help/$": [
          "ietf.nomcom.views.configuration_help",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/key/$": [
          "ietf.nomcom.views.private_key",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/merge-nominee/$": [
          "ietf.nomcom.views.private_merge_nominee",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/merge-person/$": [
          "ietf.nomcom.views.private_merge_person",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/nominate/$": [
          "ietf.nomcom.views.private_nominate",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/nominate/newperson$": [
          "ietf.nomcom.views.private_nominate_newperson",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/questionnaire-response/$": [
          "ietf.nomcom.views.private_questionnaire",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/send-reminder-mail/(?P<type>\\w+)/$": [
          "ietf.nomcom.views.send_reminder_mail",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/view-feedback/$": [
          "ietf.nomcom.views.view_feedback",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/view-feedback/nominee/(?P<nominee_id>\\d+)$": [
          "ietf.nomcom.views.view_feedback_nominee",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/view-feedback/pending/$": [
          "ietf.nomcom.views.view_feedback_pending",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/view-feedback/topic/(?P<topic_id>\\d+)$": [
          "ietf.nomcom.views.view_feedback_topic",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/private/view-feedback/unrelated/$": [
          "ietf.nomcom.views.view_feedback_unrelated",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/process-nomination-status/(?P<nominee_position_id>\\d+)/(?P<state>[\\w]+)/(?P<date>[\\d]+)/(?P<hash>[a-f0-9]+)/$": [
          "ietf.nomcom.views.process_nomination_status",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/questionnaires/$": [
          "ietf.nomcom.views.questionnaires",
          true
        ],
        "^nomcom/(?P<year>\\d{4})/requirements/$": [
          "ietf.nomcom.views.requirements",
          false
        ],
        "^nomcom/(?P<year>\\d{4})/volunteers/$": [
          "ietf.nomcom.views.public_volunteers",
          true
        ],
        "^nomcom/ann/$": [
          "ietf.nomcom.views.announcements",
          true
        ],
        "^nomcom/ann/(?P<message_id>\\d+)/$": [
          "ietf.message.views.message",
          true
        ],
        "^nomcom/history/$": [
          "ietf.nomcom.views.history",
          true
        ],
        "^nomcom/volunteer/$": [
          "ietf.nomcom.views.volunteer",
          true
        ],
        "^person/(?P<email_or_name>[^/]+)$": [
          "ietf.person.views.profile",
          true
        ],
        "^person/(?P<email_or_name>[^/]+)/photo/?$": [
          "ietf.person.views.photo",
          true
        ],
        "^person/(?P<personid>[0-9]+)/email.json$": [
          "ietf.person.ajax.person_email_json",
          true
        ],
        "^person/merge/$": [
          "ietf.person.views.merge",
          true
        ],
        "^person/search/(?P<model_name>(person|email))/$": [
          "ietf.person.views.ajax_select2_search",
          true
        ],
        "^secr/announcement/$": [
          "ietf.secr.announcement.views.main",
          true
        ],
        "^secr/announcement/confirm/$": [
          "ietf.secr.announcement.views.confirm",
          true
        ],
        "^secr/meetings/$": [
          "ietf.secr.meetings.views.main",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/$": [
          "ietf.secr.meetings.views.view",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/$": [
          "ietf.secr.meetings.views.rooms",
          false
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/(?P<session_id>\\d{1,6})/edit/$": [
          "ietf.secr.meetings.views.regular_session_edit",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/miscsessions/$": [
          "ietf.secr.meetings.views.misc_sessions",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/miscsessions/cancel/(?P<slot_id>\\d{1,6})/$": [
          "ietf.secr.meetings.views.misc_session_cancel",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/miscsessions/delete/(?P<slot_id>\\d{1,6})/$": [
          "ietf.secr.meetings.views.misc_session_delete",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/miscsessions/edit/(?P<slot_id>\\d{1,6})/$": [
          "ietf.secr.meetings.views.misc_session_edit",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/regularsessions/$": [
          "ietf.secr.meetings.views.regular_sessions",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/rooms/$": [
          "ietf.secr.meetings.views.rooms",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/times/$": [
          "ietf.secr.meetings.views.times",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/times/delete/(?P<time>[0-9\\:]+)/$": [
          "ietf.secr.meetings.views.times_delete",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/(?P<schedule_name>[A-Za-z0-9_\\-]+)/times/edit/(?P<time>[0-9\\:]+)/$": [
          "ietf.secr.meetings.views.times_edit",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/edit/$": [
          "ietf.secr.meetings.views.edit_meeting",
          true
        ],
        "^secr/meetings/(?P<meeting_id>\\d{1,6})/notifications/$": [
          "ietf.secr.meetings.views.notifications",
          true
        ],
        "^secr/meetings/add/$": [
          "ietf.secr.meetings.views.add",
          true
        ],
        "^secr/rolodex/$": [
          "ietf.secr.rolodex.views.search",
          true
        ],
        "^secr/rolodex/(?P<id>\\d{1,6})/$": [
          "ietf.secr.rolodex.views.view",
          true
        ],
        "^secr/rolodex/(?P<id>\\d{1,6})/edit/$": [
          "ietf.secr.rolodex.views.edit",
          true
        ],
        "^secr/rolodex/add-proceed/$": [
          "ietf.secr.rolodex.views.add_proceed",
          true
        ],
        "^secr/rolodex/add/$": [
          "ietf.secr.rolodex.views.add",
          true
        ],
        "^secr/sreq/$": [
          "ietf.secr.sreq.views.main",
          true
        ],
        "^secr/sreq/(?P<acronym>[-a-z0-9]+)/$": [
          "ietf.secr.sreq.views.view",
          true
        ],
        "^secr/sreq/(?P<acronym>[-a-z0-9]+)/approve/$": [
          "ietf.secr.sreq.views.approve",
          true
        ],
        "^secr/sreq/(?P<acronym>[-a-z0-9]+)/cancel/$": [
          "ietf.secr.sreq.views.cancel",
          true
        ],
        "^secr/sreq/(?P<acronym>[-a-z0-9]+)/confirm/$": [
          "ietf.secr.sreq.views.confirm",
          true
        ],
        "^secr/sreq/(?P<acronym>[-a-z0-9]+)/edit/$": [
          "ietf.secr.sreq.views.edit",
          true
        ],
        "^secr/sreq/(?P<acronym>[-a-z0-9]+)/new/$": [
          "ietf.secr.sreq.views.new",
          true
        ],
        "^secr/sreq/(?P<acronym>[-a-z0-9]+)/no_session/$": [
          "ietf.secr.sreq.views.no_session",
          true
        ],
        "^secr/sreq/(?P<num>[A-Za-z0-9_\\-\\+]+)/(?P<acronym>[-a-z0-9]+)/edit/$": [
          "ietf.secr.sreq.views.edit",
          false
        ],
        "^secr/sreq/(?P<num>[A-Za-z0-9_\\-\\+]+)/(?P<acronym>[-a-z0-9]+)/view/$": [
          "ietf.secr.sreq.views.view",
          false
        ],
        "^secr/sreq/status/$": [
          "ietf.secr.sreq.views.tool_status",
          true
        ],
        "^secr/telechat/$": [
          "ietf.secr.telechat.views.main",
          true
        ],
        "^secr/telechat/(?P<date>[0-9\\-]+)/bash/$": [
          "ietf.secr.telechat.views.bash",
          true
        ],
        "^secr/telechat/(?P<date>[0-9\\-]+)/doc/$": [
          "ietf.secr.telechat.views.doc",
          true
        ],
        "^secr/telechat/(?P<date>[0-9\\-]+)/doc/(?P<name>[A-Za-z0-9.-]+)/$": [
          "ietf.secr.telechat.views.doc_detail",
          true
        ],
        "^secr/telechat/(?P<date>[0-9\\-]+)/doc/(?P<name>[A-Za-z0-9.-]+)/(?P<nav>next|previous)/$": [
          "ietf.secr.telechat.views.doc_navigate",
          false
        ],
        "^secr/telechat/(?P<date>[0-9\\-]+)/management/$": [
          "ietf.secr.telechat.views.management",
          false
        ],
        "^secr/telechat/(?P<date>[0-9\\-]+)/minutes/$": [
          "ietf.secr.telechat.views.minutes",
          false
        ],
        "^secr/telechat/(?P<date>[0-9\\-]+)/roll-call/$": [
          "ietf.secr.telechat.views.roll_call",
          false
        ],
        "^secr/telechat/new/$": [
          "ietf.secr.telechat.views.new",
          false
        ],
        "^sitemap-(?P<section>.+).xml$": [
          "django.contrib.sitemaps.views.sitemap",
          true
        ],
        "^sitemap.xml$": [
          "django.contrib.sitemaps.views.index",
          true
        ],
        "^static/(?P<path>.*)$": [
          "django.contrib.staticfiles.views.serve",
          false
        ],
        "^stats/$": [
          "ietf.stats.views.stats_index",
          true
        ],
        "^stats/document/(?:(?P<stats_type>authors|pages|words|format|formlang|author/(?:documents|affiliation|country|continent|citations|hindex)|yearly/(?:affiliation|country|continent))/)?$": [
          "ietf.stats.views.document_stats",
          true
        ],
        "^stats/knowncountries/$": [
          "ietf.stats.views.known_countries_list",
          true
        ],
        "^stats/meeting/(?:(?P<stats_type>overview|country|continent)/)?$": [
          "ietf.stats.views.meeting_stats",
          true
        ],
        "^stats/meeting/(?P<num>\\d+)/(?P<stats_type>country|continent)/$": [
          "ietf.stats.views.meeting_stats",
          true
        ],
        "^stats/review/(?:(?P<stats_type>completion|results|states|time)/)?(?:(?P<acronym>[-a-z0-9]+)/)?$": [
          "ietf.stats.views.review_stats",
          true
        ],
        "^stream/$": [
          "ietf.group.views.streams",
          true
        ],
        "^stream/(?P<acronym>[-a-z0-9]+)/$": [
          "ietf.group.views.stream_documents",
          true
        ],
        "^stream/(?P<acronym>[-a-z0-9]+)/edit/$": [
          "ietf.group.views.stream_edit",
          true
        ],
        "^submit/$": [
          "ietf.submit.views.upload_submission",
          true
        ],
        "^submit/approvals/$": [
          "ietf.submit.views.approvals",
          true
        ],
        "^submit/approvals/addpreapproval/$": [
          "ietf.submit.views.add_preapproval",
          true
        ],
        "^submit/approvals/cancelpreapproval/(?P<preapproval_id>[a-f\\d]+)/$": [
          "ietf.submit.views.cancel_preapproval",
          true
        ],
        "^submit/async-poke/?$": [
          "ietf.submit.views.async_poke_test",
          false
        ],
        "^submit/manualpost/$": [
          "ietf.submit.views.manualpost",
          true
        ],
        "^submit/manualpost/addemail$": [
          "ietf.submit.views.add_manualpost_email",
          true
        ],
        "^submit/manualpost/addemail/(?P<submission_id>\\d+)/(?P<access_token>[a-f\\d]*)/$": [
          "ietf.submit.views.add_manualpost_email",
          true
        ],
        "^submit/manualpost/attachment/(?P<submission_id>\\d+)/(?P<message_id>\\d+)/(?P<filename>.*)$": [
          "ietf.submit.views.show_submission_email_attachment",
          true
        ],
        "^submit/manualpost/cancel$": [
          "ietf.submit.views.cancel_waiting_for_draft",
          true
        ],
        "^submit/manualpost/email/(?P<submission_id>\\d+)/(?P<message_id>\\d+)/$": [
          "ietf.submit.views.show_submission_email_message",
          true
        ],
        "^submit/manualpost/email/(?P<submission_id>\\d+)/(?P<message_id>\\d+)/(?P<access_token>[a-f\\d]*)/$": [
          "ietf.submit.views.show_submission_email_message",
          true
        ],
        "^submit/manualpost/replyemail/(?P<submission_id>\\d+)/(?P<message_id>\\d+)/$": [
          "ietf.submit.views.send_submission_email",
          true
        ],
        "^submit/manualpost/sendemail/(?P<submission_id>\\d+)/$": [
          "ietf.submit.views.send_submission_email",
          true
        ],
        "^submit/status/$": [
          "ietf.submit.views.search_submission",
          true
        ],
        "^submit/status/(?P<submission_id>\\d+)/$": [
          "ietf.submit.views.submission_status",
          true
        ],
        "^submit/status/(?P<submission_id>\\d+)/(?P<access_token>[a-f\\d]*)/$": [
          "ietf.submit.views.submission_status",
          true
        ],
        "^submit/status/(?P<submission_id>\\d+)/(?P<access_token>[a-f\\d]+)/edit/$": [
          "ietf.submit.views.edit_submission",
          true
        ],
        "^submit/status/(?P<submission_id>\\d+)/confirm/(?P<auth_token>[a-f\\d]+)/$": [
          "ietf.submit.views.confirm_submission",
          true
        ],
        "^submit/status/(?P<submission_id>\\d+)/edit/$": [
          "ietf.submit.views.edit_submission",
          true
        ],
        "^submit/tool-instructions/$": [
          "ietf.submit.views.tool_instructions",
          true
        ],
        "^sync/(?P<org>\\w+)/notify/(?P<notification>\\w+)/$": [
          "ietf.sync.views.notify",
          true
        ],
        "^sync/discrepancies/$": [
          "ietf.sync.views.discrepancies",
          true
        ],
        "^sync/rfceditor/undo/": [
          "ietf.sync.views.rfceditor_undo",
          true
        ],
        "^templates/(?P<acronym>[-a-z0-9]+)/$": [
          "ietf.dbtemplate.views.group_template_list",
          false
        ],
        "^templates/(?P<acronym>[-a-z0-9]+)/(?P<template_id>[\\d]+)/$": [
          "ietf.dbtemplate.views.group_template_edit",
          false
        ]
      },
      "format": 4
    }
  },
  "version": "12.1.0"
}